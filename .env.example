# =============================================================================
# MCP Retriever Server - 통합 환경 설정
# =============================================================================
# 이 파일은 모든 서버 프로필(BASIC, AUTH, CONTEXT, CACHED, COMPLETE)을 지원합니다.
# 
# 사용법:
# 1. cp .env.example .env
# 2. .env 파일을 편집하여 필요한 값들을 설정
# 3. MCP_PROFILE을 원하는 프로필로 설정
#
# 프로필별 기능:
# - BASIC: 최소 기능 (stdio 모드, 인증 없음)
# - AUTH: 인증 기능 추가 (http 모드)
# - CONTEXT: AUTH + 컨텍스트 추적
# - CACHED: AUTH + Redis 캐싱
# - COMPLETE: 모든 기능 활성화
# - CUSTOM: 개별 기능 선택 (MCP_ENABLE_* 변수 사용)
#
# =============================================================================

# =============================================================================
# 기본 서버 설정 (모든 프로필 공통)
# =============================================================================

# 서버 프로필 선택
MCP_PROFILE=COMPLETE

# 서버 이름 (로깅 및 식별용)
MCP_SERVER_NAME=mcp-retriever-complete

# 전송 방식: stdio (BASIC) 또는 http (AUTH 이상)
MCP_TRANSPORT=http

# HTTP 모드에서 사용할 포트
MCP_SERVER_PORT=8001

# =============================================================================
# 프로필별 기능 제어 (CUSTOM 프로필 또는 개별 오버라이드용)
# =============================================================================
# 각 기능을 개별적으로 활성화/비활성화할 수 있습니다.
# 프로필 기본값을 오버라이드하려면 주석을 제거하고 값을 설정하세요.

# 인증 기능 (BASIC: false, AUTH 이상: true)
# MCP_ENABLE_AUTH=true

# 컨텍스트 추적 (BASIC/AUTH/CACHED: false, CONTEXT/COMPLETE: true)
# MCP_ENABLE_CONTEXT=true

# Redis 캐싱 (BASIC/AUTH/CONTEXT: false, CACHED/COMPLETE: true)
# MCP_ENABLE_CACHE=true

# 속도 제한 (BASIC/AUTH/CONTEXT/CACHED: false, COMPLETE: true)
# MCP_ENABLE_RATE_LIMIT=true

# 성능 메트릭 (BASIC/AUTH/CACHED: false, CONTEXT/COMPLETE: true)
# MCP_ENABLE_METRICS=true

# 요청 검증 (BASIC: false, AUTH 이상: true)
# MCP_ENABLE_VALIDATION=true

# 에러 핸들러 (모든 프로필: true)
# MCP_ENABLE_ERROR_HANDLER=true

# 향상된 로깅 (BASIC: false, AUTH 이상: true)
# MCP_ENABLE_ENHANCED_LOGGING=true

# =============================================================================
# 인증 설정 (AUTH 프로필 이상에서 필요)
# =============================================================================

# JWT 비밀 키 (프로덕션에서는 반드시 변경하세요)
# 강력한 랜덤 문자열 생성: openssl rand -base64 32
JWT_SECRET_KEY=your-jwt-secret-key-change-in-production

# JWT 알고리즘
JWT_ALGORITHM=HS256

# JWT 액세스 토큰 만료 시간 (분)
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# JWT 리프레시 토큰 만료 시간 (일)
JWT_REFRESH_TOKEN_EXPIRE_DAYS=7

# MCP 내부 API 키 (서버 간 통신용)
# 강력한 랜덤 문자열 생성: openssl rand -hex 32
MCP_INTERNAL_API_KEY=your-internal-api-key-change-in-production

# Auth Gateway URL (MCP 서버에서 사용)
# Docker: http://auth-gateway:8000, 로컬: http://localhost:8000
AUTH_GATEWAY_URL=http://localhost:8000

# 인증 요구 여부 (tools/list, health_check는 인증 없이 접근 가능)
MCP_REQUIRE_AUTH=false

# Auth Gateway 데이터베이스 URL (Docker 환경용)
# Docker에서는 SQLite를 /data 볼륨에 저장
# AUTH_DATABASE_URL=sqlite+aiosqlite:////data/auth.db

# 초기 관리자 계정 설정
# Docker 시작 시 자동으로 관리자 계정을 생성합니다
AUTO_CREATE_ADMIN=true
ADMIN_EMAIL=admin@example.com
ADMIN_PASSWORD=Admin123!
ADMIN_USERNAME=System Admin

# =============================================================================
# 캐시 설정 (CACHED, COMPLETE 프로필에서 필요)
# =============================================================================

# Redis 연결 URL
# Docker: redis://redis:6379/0, 로컬: redis://localhost:6379/0
REDIS_URL=redis://localhost:6379/0

# Redis 개별 설정 (Docker Compose용)
# Docker에서는 REDIS_URL 대신 개별 설정 사용
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0

# 캐시 TTL 설정 (초 단위)
CACHE_TTL_WEB=300      # 웹 검색 결과: 5분
CACHE_TTL_VECTOR=900   # 벡터 검색 결과: 15분
CACHE_TTL_DB=600       # DB 검색 결과: 10분
CACHE_TTL_ALL=300      # 통합 검색 결과: 5분

# 캐시 통계 활성화
ENABLE_CACHE_STATS=true

# =============================================================================
# 속도 제한 설정 (COMPLETE 프로필에서 필요)
# =============================================================================

# 분당 요청 수 제한
RATE_LIMIT_PER_MINUTE=60

# 시간당 요청 수 제한
# Docker에서는 3600으로 설정됨
RATE_LIMIT_PER_HOUR=1000

# 버스트 크기 (순간적 요청 허용량)
RATE_LIMIT_BURST=10

# =============================================================================
# 로깅 설정 (AUTH 이상에서 향상된 로깅)
# =============================================================================

# 로그 레벨 (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# 요청 본문 로깅 (디버깅용, 프로덕션에서는 false 권장)
LOG_REQUEST_BODY=false

# 응답 본문 로깅 (디버깅용, 프로덕션에서는 false 권장)
LOG_RESPONSE_BODY=false

# 이모지 사용 여부
USE_EMOJI=true

# 민감 정보 필드 (로깅시 마스킹됨)
SENSITIVE_FIELDS=password,token,api_key,secret,auth

# =============================================================================
# 리트리버 설정 (모든 프로필 공통)
# =============================================================================

# Tavily API 키 (웹 검색용)
# https://tavily.com 에서 발급받으세요
TAVILY_API_KEY=tvly-your-api-key-here

# PostgreSQL 데이터베이스 연결 문자열
# Docker: postgresql://mcp_user:mcp_password@postgres:5432/mcp_retriever
# 로컬: postgresql://mcp_user:mcp_password@localhost:5432/mcp_retriever
POSTGRES_DSN=postgresql://mcp_user:mcp_password@localhost:5432/mcp_retriever

# PostgreSQL 개별 설정 (Docker Compose용)
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=mcp_user
POSTGRES_PASSWORD=mcp_password
POSTGRES_DB=mcp_retriever

# Qdrant 벡터 데이터베이스 설정
# Docker: qdrant, 로컬: localhost
QDRANT_HOST=localhost
QDRANT_PORT=6333
QDRANT_GRPC_PORT=6334

# =============================================================================
# 서비스 URL 설정 (마이크로서비스 환경)
# =============================================================================

# MCP 서버 URL (Auth Gateway에서 사용)
# Docker: http://mcp-server:8001, 로컬: http://localhost:8001
MCP_SERVER_URL=http://localhost:8001

# Auth Gateway URL (테스트 및 E2E 테스트용)
AUTH_URL=http://localhost:8000

# MCP 서버 URL (테스트용)
MCP_URL=http://localhost:8001

# =============================================================================
# 테스트 및 개발 설정
# =============================================================================

# Playwright 헤드리스 모드 (CI/CD 환경에서는 true)
PLAYWRIGHT_HEADLESS=true

# 환경 구분 (development, staging, production)
ENVIRONMENT=development

# =============================================================================
# Docker Compose 전용 설정
# =============================================================================
# Docker 환경에서는 다음 설정들이 자동으로 적용됩니다:
#
# 서비스 호스트명:
# - POSTGRES_HOST=postgres (로컬: localhost)
# - QDRANT_HOST=qdrant (로컬: localhost)  
# - REDIS_HOST=redis (로컬: localhost)
#
# 서비스 URL:
# - AUTH_GATEWAY_URL=http://auth-gateway:8000 (로컬: http://localhost:8000)
# - MCP_SERVER_URL=http://mcp-server:8001 (로컬: http://localhost:8001)
#
# 데이터베이스:
# - AUTH_DATABASE_URL=sqlite+aiosqlite:////data/auth.db (Auth Gateway 전용)
#
# Redis 설정:
# - REDIS_DB=0 (auth-gateway), REDIS_DB=1 (mcp-server)
#
# 로그 레벨:
# - LOG_LEVEL=DEBUG (Docker에서 디버깅용, 로컬: INFO 권장)
#
# 속도 제한:
# - RATE_LIMIT_PER_HOUR=3600 (Docker), 1000 (로컬 기본값)
#
# 로컬 개발시에는 위 설정들을 localhost 기반으로 수정하세요.
# =============================================================================