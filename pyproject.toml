[project]
name = "make-mcp-server-vibe"
version = "0.1.0"
description = "패스트캠퍼스 2025.07 일할맛세미나 - MCP for Retriever"
authors = [{"name" = "HyunjunJeon", "email" = "jeonhj920@gmail.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastmcp>=2.10.6",
    "fastapi>=0.115.0",
    "httpx>=0.28.0",
    "httpx-sse>=0.4.0",
    "sse-starlette>=2.2.1",
    "python-jose[cryptography]>=3.3.0",
    "asyncpg>=0.30.0",
    "qdrant-client>=1.12.0",
    "tavily-python>=0.5.0",
    "structlog>=24.4.0",
    "pydantic>=2.10.0",
    "redis>=5.2.0",
    "uvicorn[standard]>=0.34.0",
    "passlib[bcrypt]>=1.7.4",
    "sqlalchemy>=2.0.42",
    "aiosqlite>=0.21.0",
    "greenlet>=3.2.3",
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
    "opentelemetry-instrumentation-fastapi>=0.50b0",
    "opentelemetry-instrumentation-httpx>=0.50b0",
    "opentelemetry-instrumentation-asyncpg>=0.50b0",
    "opentelemetry-instrumentation-redis>=0.50b0",
    "opentelemetry-exporter-otlp>=1.29.0",
    "opentelemetry-exporter-prometheus>=0.50b0",
    "sentry-sdk[fastapi]>=2.19.0",
    "python-fasthtml>=0.12.22",
    "pyjwt>=2.10.1",
]

[dependency-groups]
dev = [
    "ruff>=0.12.4",
    "ty>=0.0.1a16",
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-playwright>=0.5.2",
    "playwright>=1.49.0",
    "pytest-benchmark>=5.0.0",
    "memory-profiler>=0.61.0",
    "psutil>=6.1.0",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
markers = [
    "benchmark: marks tests as benchmark tests",
    "integration: marks tests as integration tests",
]

[tool.pytest.benchmark]
min_rounds = 5
warmup = true
warmup_iterations = 1
disable_gc = true
sort = "min"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
