This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter), security check has been disabled.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: tests/**/*, CHANGELOG.md, CODE_OF_CONDUCT.md, CONTRIBUTING.md, docs/**/*, .hugo/**/*, cmd/**/*, **/*-mssql.*
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
.ci/
  continuous.release.cloudbuild.yaml
  generate_release_table.sh
  integration.cloudbuild.yaml
  test_with_coverage.sh
  versioned.release.cloudbuild.yaml
.github/
  ISSUE_TEMPLATE/
    bug_report.yml
    config.yml
    feature_request.yml
    question.yml
  workflows/
    cloud_build_failure_reporter.yml
    docs_deploy.yaml
    docs_preview_clean.yaml
    docs_preview_deploy.yaml
    lint.yaml
    schedule_reporter.yml
    sync-labels.yaml
    tests.yaml
  auto-label.yaml
  blunderbuss.yml
  CODEOWNERS
  header-checker-lint.yaml
  label-sync.yml
  labels.yaml
  release-please.yml
  renovate.json5
  sync-repo-settings.yaml
internal/
  auth/
    google/
      google.go
    auth.go
  log/
    handler.go
    log_test.go
    log.go
    logger.go
  prebuiltconfigs/
    tools/
      alloydb-postgres.yaml
      bigquery.yaml
      cloud-sql-mssql.yaml
      cloud-sql-mysql.yaml
      cloud-sql-postgres.yaml
      firestore.yaml
      postgres.yaml
      spanner-postgres.yaml
      spanner.yaml
    prebuiltconfigs_test.go
    prebuiltconfigs.go
  server/
    mcp/
      jsonrpc/
        jsonrpc.go
      util/
        lifecycle.go
      v20241105/
        method.go
        types.go
      v20250326/
        method.go
        types.go
      v20250618/
        method.go
        types.go
      mcp.go
    api_test.go
    api.go
    common_test.go
    config.go
    mcp_test.go
    mcp.go
    server_test.go
    server.go
  sources/
    alloydbpg/
      alloydb_pg_test.go
      alloydb_pg.go
    bigquery/
      bigquery_test.go
      bigquery.go
    bigtable/
      bigtable_test.go
      bigtable.go
    cloudsqlmssql/
      cloud_sql_mssql_test.go
      cloud_sql_mssql.go
    cloudsqlmysql/
      cloud_sql_mysql_test.go
      cloud_sql_mysql.go
    cloudsqlpg/
      cloud_sql_pg_test.go
      cloud_sql_pg.go
    couchbase/
      couchbase_test.go
      couchbase.go
    dgraph/
      dgraph_test.go
      dgraph.go
    firestore/
      firestore_test.go
      firestore.go
    http/
      http_test.go
      http.go
    mssql/
      mssql_test.go
      mssql.go
    mysql/
      mysql_test.go
      mysql.go
    neo4j/
      neo4j_test.go
      neo4j.go
    postgres/
      postgres_test.go
      postgres.go
    redis/
      redis_test.go
      redis.go
    spanner/
      spanner_test.go
      spanner.go
    sqlite/
      sqlite_test.go
      sqlite.go
    valkey/
      valkey_test.go
      valkey.go
    dialect.go
    ip_type.go
    sources.go
    util.go
  telemetry/
    instrumentation.go
    telemetry.go
  testutils/
    testutils.go
  tools/
    alloydbainl/
      alloydbainl_test.go
      alloydbainl.go
    bigquery/
      bigqueryexecutesql/
        bigqueryexecutesql_test.go
        bigqueryexecutesql.go
      bigquerygetdatasetinfo/
        bigquerygetdatasetinfo_test.go
        bigquerygetdatasetinfo.go
      bigquerygettableinfo/
        bigquerygettableinfo_test.go
        bigquerygettableinfo.go
      bigquerylistdatasetids/
        bigquerylistdatasetids_test.go
        bigquerylistdatasetids.go
      bigquerylisttableids/
        bigquerylisttableids_test.go
        bigquerylisttableids.go
      bigquerysql/
        bigquery_test.go
        bigquerysql.go
    bigtable/
      bigtable_test.go
      bigtable.go
    couchbase/
      couchbase_test.go
      couchbase.go
    dgraph/
      dgraph_test.go
      dgraph.go
    firestore/
      firestoredeletedocuments/
        firestoredeletedocuments_test.go
        firestoredeletedocuments.go
      firestoregetdocuments/
        firestoregetdocuments_test.go
        firestoregetdocuments.go
      firestoregetrules/
        firestoregetrules_test.go
        firestoregetrules.go
      firestorelistcollections/
        firestorelistcollections_test.go
        firestorelistcollections.go
      firestorequerycollection/
        firestorequerycollection_test.go
        firestorequerycollection.go
      firestorevalidaterules/
        firestorevalidaterules_test.go
        firestorevalidaterules.go
    http/
      http_test.go
      http.go
    mssql/
      mssqlexecutesql/
        mssqlexecutesql_test.go
        mssqlexecutesql.go
      mssqlsql/
        mssqlsql_test.go
        mssqlsql.go
    mysql/
      mysqlexecutesql/
        mysqlexecutesql_test.go
        mysqlexecutesql.go
      mysqlsql/
        mysqlsql_test.go
        mysqlsql.go
    neo4j/
      neo4jcypher/
        neo4jcypher_test.go
        neo4jcypher.go
    postgres/
      postgresexecutesql/
        postgresexecutesql_test.go
        postgresexecutesql.go
      postgressql/
        postgressql_test.go
        postgressql.go
    redis/
      redis_test.go
      redis.go
    spanner/
      spannerexecutesql/
        spannerexecutesql_test.go
        spannerexecutesql.go
      spannersql/
        spanner_test.go
        spannersql.go
    sqlitesql/
      sqlitesql_test.go
      sqlitesql.go
    utility/
      wait/
        wait_test.go
        wait.go
    valkey/
      valkey_test.go
      valkey.go
    common.go
    http_method.go
    parameters_test.go
    parameters.go
    tools.go
    toolsets.go
  util/
    util.go
.gitignore
.gitmodules
.golangci.yaml
DEVELOPER.md
Dockerfile
go.mod
LICENSE
main.go
README.md

================================================================
Files
================================================================

================
File: .ci/continuous.release.cloudbuild.yaml
================
# Copyright 2024 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  - id: "build-docker"
    name: "gcr.io/cloud-builders/docker"
    waitFor: ['-']
    script: |
        #!/usr/bin/env bash
        docker buildx create --name container-builder --driver docker-container --bootstrap --use
        docker buildx build --platform linux/amd64,linux/arm64 --build-arg COMMIT_SHA=$(git rev-parse HEAD) -t ${_DOCKER_URI}:$REF_NAME --push .

  - id: "install-dependencies"
    name: golang:1
    waitFor: ['-']
    env:
      - 'GOPATH=/gopath'
    volumes:
      - name: 'go'
        path: '/gopath'
    script: |
        go get -d ./...

  - id: "build-linux-amd64"
    name: golang:1
    waitFor: 
      - "install-dependencies"
    env:
      - 'GOPATH=/gopath'
    volumes:
      - name: 'go'
        path: '/gopath'
    script: |
        #!/usr/bin/env bash
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
          go build -ldflags "-X github.com/googleapis/genai-toolbox/cmd.commitSha=$(git rev-parse HEAD)" -o toolbox.linux.amd64

  - id: "store-linux-amd64"
    name: "gcr.io/cloud-builders/gcloud:latest"
    waitFor:
      - "build-linux-amd64"
    script: |
        #!/usr/bin/env bash
        gcloud storage cp toolbox.linux.amd64 gs://$_BUCKET_NAME/$REF_NAME/linux/amd64/toolbox

  - id: "build-darwin-arm64"
    name: golang:1
    waitFor: 
      - "install-dependencies"
    env:
      - 'GOPATH=/gopath'
    volumes:
      - name: 'go'
        path: '/gopath'
    script: |
        #!/usr/bin/env bash
        CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 \
          go build -ldflags "-X github.com/googleapis/genai-toolbox/cmd.commitSha=$(git rev-parse HEAD)" -o toolbox.darwin.arm64

  - id: "store-darwin-arm64"
    name: "gcr.io/cloud-builders/gcloud:latest"
    waitFor:
      - "build-darwin-arm64"
    script: |
        #!/usr/bin/env bash
        gcloud storage cp toolbox.darwin.arm64 gs://$_BUCKET_NAME/$REF_NAME/darwin/arm64/toolbox

  - id: "build-darwin-amd64"
    name: golang:1
    waitFor: 
      - "install-dependencies"
    env:
      - 'GOPATH=/gopath'
    volumes:
      - name: 'go'
        path: '/gopath'
    script: |
        #!/usr/bin/env bash
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 \
          go build -ldflags "-X github.com/googleapis/genai-toolbox/cmd.commitSha=$(git rev-parse HEAD)" -o toolbox.darwin.amd64

  - id: "store-darwin-amd64"
    name: "gcr.io/cloud-builders/gcloud:latest"
    waitFor:
      - "build-darwin-amd64"
    script: |
        #!/usr/bin/env bash
        gcloud storage cp toolbox.darwin.amd64 gs://$_BUCKET_NAME/$REF_NAME/darwin/amd64/toolbox

  - id: "build-windows-amd64"
    name: golang:1
    waitFor: 
      - "install-dependencies"
    env:
      - 'GOPATH=/gopath'
    volumes:
      - name: 'go'
        path: '/gopath'
    script: |
        #!/usr/bin/env bash
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 \
          go build -ldflags "-X github.com/googleapis/genai-toolbox/cmd.commitSha=$(git rev-parse HEAD)" -o toolbox.windows.amd64

  - id: "store-windows-amd64"
    name: "gcr.io/cloud-builders/gcloud:latest"
    waitFor:
      - "build-windows-amd64"
    script: |
        #!/usr/bin/env bash
        gcloud storage cp toolbox.windows.amd64 gs://$_BUCKET_NAME/$REF_NAME/windows/amd64/toolbox.exe

options:
  automapSubstitutions: true
  dynamicSubstitutions: true
  logging: CLOUD_LOGGING_ONLY # Necessary for custom service account
  machineType: 'E2_HIGHCPU_32'

substitutions:
  _REGION: us-central1
  _AR_HOSTNAME: ${_REGION}-docker.pkg.dev
  _AR_REPO_NAME: toolbox-dev
  _BUCKET_NAME: genai-toolbox-dev
  _DOCKER_URI: ${_AR_HOSTNAME}/${PROJECT_ID}/${_AR_REPO_NAME}/toolbox

================
File: .ci/generate_release_table.sh
================
#! /bin/bash


# Check if VERSION has been set
if [ -z "${VERSION}" ]; then
  echo "Error: VERSION env var is not set" >&2  # Print to stderr
  exit 1  # Exit with a non-zero status to indicate an error
fi


FILES=("linux.amd64" "darwin.arm64" "darwin.amd64" "windows.amd64")
output_string=""

# Define the descriptions - ensure this array's order matches FILES
DESCRIPTIONS=(
    "For **Linux** systems running on **Intel/AMD 64-bit processors**."
    "For **macOS** systems running on **Apple Silicon** (M1, M2, M3, etc.) processors."
    "For **macOS** systems running on **Intel processors**."
    "For **Windows** systems running on **Intel/AMD 64-bit processors**."
)

# Write the table header
ROW_FMT="| %-105s | %-120s | %-67s |\n"
output_string+=$(printf "$ROW_FMT" "**OS/Architecture**" "**Description**" "**SHA256 Hash**")$'\n'
output_string+=$(printf "$ROW_FMT" "$(printf -- '-%0.s' {1..105})" "$(printf -- '-%0.s' {1..120})" "$(printf -- '-%0.s' {1..67})")$'\n'


# Loop through all files matching the pattern "toolbox.*.*"
for i in "${!FILES[@]}"
do
    file_key="${FILES[$i]}" # e.g., "linux.amd64"
    description_text="${DESCRIPTIONS[$i]}"

    # Extract OS and ARCH from the filename
    OS=$(echo "$file_key" | cut -d '.' -f 1)
    ARCH=$(echo "$file_key" | cut -d '.' -f 2)

    # Get release URL
    if [ "$OS" = 'windows' ];
    then
        URL="https://storage.googleapis.com/genai-toolbox/$VERSION/$OS/$ARCH/toolbox.exe"
    else
        URL="https://storage.googleapis.com/genai-toolbox/$VERSION/$OS/$ARCH/toolbox"
    fi

    curl "$URL" --fail --output toolbox || exit 1

    # Calculate the SHA256 checksum of the file
    SHA256=$(shasum -a 256 toolbox | awk '{print $1}')

    # Write the table row
    output_string+=$(printf "$ROW_FMT" "[$OS/$ARCH]($URL)" "$description_text" "$SHA256")$'\n'

    rm toolbox
done

printf "$output_string\n"

================
File: .ci/integration.cloudbuild.yaml
================
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  - id: "install-dependencies"
    name: golang:1
    waitFor: ["-"]
    env:
      - "GOPATH=/gopath"
    volumes:
      - name: "go"
        path: "/gopath"
    script: |
      go get -d ./...

  - id: "compile-test-binary"
    name: golang:1
    waitFor: ["install-dependencies"]
    env:
      - "GOPATH=/gopath"
    volumes:
      - name: "go"
        path: "/gopath"
    script: |
      go test -c -race -cover \
      -coverpkg=./internal/sources/...,./internal/tools/... ./tests/...
      chmod +x .ci/test_with_coverage.sh

  - id: "cloud-sql-pg"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "CLOUD_SQL_POSTGRES_PROJECT=$PROJECT_ID"
      - "CLOUD_SQL_POSTGRES_INSTANCE=$_CLOUD_SQL_POSTGRES_INSTANCE"
      - "CLOUD_SQL_POSTGRES_DATABASE=$_DATABASE_NAME"
      - "CLOUD_SQL_POSTGRES_REGION=$_REGION"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv:
      ["CLOUD_SQL_POSTGRES_USER", "CLOUD_SQL_POSTGRES_PASS", "CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "Cloud SQL Postgres" \
          cloudsqlpg \
          postgressql \
          postgresexecutesql


  - id: "alloydb-pg"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "ALLOYDB_POSTGRES_PROJECT=$PROJECT_ID"
      - "ALLOYDB_POSTGRES_CLUSTER=$_ALLOYDB_POSTGRES_CLUSTER"
      - "ALLOYDB_POSTGRES_INSTANCE=$_ALLOYDB_POSTGRES_INSTANCE"
      - "ALLOYDB_POSTGRES_DATABASE=$_DATABASE_NAME"
      - "ALLOYDB_POSTGRES_REGION=$_REGION"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv: ["ALLOYDB_POSTGRES_USER", "ALLOYDB_POSTGRES_PASS", "CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "AlloyDB Postgres" \
          alloydbpg \
          postgressql \
          postgresexecutesql

  - id: "alloydb-ai-nl"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "ALLOYDB_AI_NL_PROJECT=$PROJECT_ID"
      - "ALLOYDB_AI_NL_CLUSTER=$_ALLOYDB_AI_NL_CLUSTER"
      - "ALLOYDB_AI_NL_INSTANCE=$_ALLOYDB_AI_NL_INSTANCE"
      - "ALLOYDB_AI_NL_DATABASE=$_DATABASE_NAME"
      - "ALLOYDB_AI_NL_REGION=$_REGION"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv: ["ALLOYDB_AI_NL_USER", "ALLOYDB_AI_NL_PASS", "CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "AlloyDB AI NL" \
          alloydbainl \
          alloydbainl

  - id: "bigtable"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "BIGTABLE_PROJECT=$PROJECT_ID"
      - "BIGTABLE_INSTANCE=$_BIGTABLE_INSTANCE"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv:
      ["CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "Bigtable" \
          bigtable \
          bigtable

  - id: "bigquery"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "BIGQUERY_PROJECT=$PROJECT_ID"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv: ["CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "BigQuery" \
          bigquery \
          bigquery

  - id: "postgres"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "POSTGRES_DATABASE=$_DATABASE_NAME"
      - "POSTGRES_HOST=$_POSTGRES_HOST"
      - "POSTGRES_PORT=$_POSTGRES_PORT"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv: ["POSTGRES_USER", "POSTGRES_PASS", "CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "Postgres" \
          postgres \
          postgressql \
          postgresexecutesql

  - id: "spanner"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "SPANNER_PROJECT=$PROJECT_ID"
      - "SPANNER_DATABASE=$_DATABASE_NAME"
      - "SPANNER_INSTANCE=$_SPANNER_INSTANCE"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv: ["CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "Spanner" \
          spanner \
          spanner

  - id: "neo4j"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "NEO4J_DATABASE=$_NEO4J_DATABASE"
      - "NEO4J_URI=$_NEO4J_URI"
    secretEnv: ["NEO4J_USER", "NEO4J_PASS"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "Neo4j" \
          neo4j \
          neo4j

  - id: "cloud-sql-mssql"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "CLOUD_SQL_MSSQL_PROJECT=$PROJECT_ID"
      - "CLOUD_SQL_MSSQL_INSTANCE=$_CLOUD_SQL_MSSQL_INSTANCE"
      - "CLOUD_SQL_MSSQL_IP=$_CLOUD_SQL_MSSQL_IP"
      - "CLOUD_SQL_MSSQL_DATABASE=$_DATABASE_NAME"
      - "CLOUD_SQL_MSSQL_REGION=$_REGION"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv: ["CLOUD_SQL_MSSQL_USER", "CLOUD_SQL_MSSQL_PASS", "CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "Cloud SQL MSSQL" \
          cloudsqlmssql \
          mssql

  - id: "cloud-sql-mysql"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "CLOUD_SQL_MYSQL_PROJECT=$PROJECT_ID"
      - "CLOUD_SQL_MYSQL_INSTANCE=$_CLOUD_SQL_MYSQL_INSTANCE"
      - "CLOUD_SQL_MYSQL_DATABASE=$_DATABASE_NAME"
      - "CLOUD_SQL_MYSQL_REGION=$_REGION"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv:
      ["CLOUD_SQL_MYSQL_USER", "CLOUD_SQL_MYSQL_PASS", "CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "Cloud SQL MySQL" \
          cloudsqlmysql \
          mysql

  - id: "mysql"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "MYSQL_DATABASE=$_DATABASE_NAME"
      - "MYSQL_HOST=$_MYSQL_HOST"
      - "MYSQL_PORT=$_MYSQL_PORT"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv: ["MYSQL_USER", "MYSQL_PASS", "CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "MySQL" \
          mysql \
          mysql

  - id: "mssql"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "MSSQL_DATABASE=$_DATABASE_NAME"
      - "MSSQL_HOST=$_MSSQL_HOST"
      - "MSSQL_PORT=$_MSSQL_PORT"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv: ["MSSQL_USER", "MSSQL_PASS", "CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "MSSQL" \
          mssql \
          mssql

  - id: "dgraph"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "DGRAPH_URL=$_DGRAPHURL"
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "Dgraph" \
          dgraph \
          dgraph

  - id: "http"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
    secretEnv: ["CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "HTTP" \
          http \
          http

  - id: "sqlite"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    volumes:
      - name: "go"
        path: "/gopath"
    secretEnv: ["CLIENT_ID"]
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "SQLite" \
          sqlite \
          sqlite

  - id: "couchbase"
    name : golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "COUCHBASE_SCOPE=$_COUCHBASE_SCOPE"
      - "COUCHBASE_BUCKET=$_COUCHBASE_BUCKET"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv: ["COUCHBASE_CONNECTION", "COUCHBASE_USER", "COUCHBASE_PASS", "CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "Couchbase" \
          couchbase \
          couchbase

  - id: "redis"
    name : golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv: ["REDIS_ADDRESS", "REDIS_PASS", "CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "Redis" \
          redis \
          redis
        
  - id: "valkey"
    name : golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "VALKEY_DATABASE=$_VALKEY_DATABASE"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv: ["VALKEY_ADDRESS", "CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "Valkey" \
          valkey \
          valkey

  - id: "firestore"
    name: golang:1
    waitFor: ["compile-test-binary"]
    entrypoint: /bin/bash
    env:
      - "GOPATH=/gopath"
      - "FIRESTORE_PROJECT=$PROJECT_ID"
      - "SERVICE_ACCOUNT_EMAIL=$SERVICE_ACCOUNT_EMAIL"
    secretEnv: ["CLIENT_ID"]
    volumes:
      - name: "go"
        path: "/gopath"
    args:
      - -c
      - |
        .ci/test_with_coverage.sh \
          "Firestore" \
          firestore \
          firestore
    

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/cloud_sql_pg_user/versions/latest
      env: CLOUD_SQL_POSTGRES_USER
    - versionName: projects/$PROJECT_ID/secrets/cloud_sql_pg_pass/versions/latest
      env: CLOUD_SQL_POSTGRES_PASS
    - versionName: projects/$PROJECT_ID/secrets/alloydb_pg_user/versions/latest
      env: ALLOYDB_POSTGRES_USER
    - versionName: projects/$PROJECT_ID/secrets/alloydb_pg_pass/versions/latest
      env: ALLOYDB_POSTGRES_PASS
    - versionName: projects/$PROJECT_ID/secrets/alloydb_ai_nl_user/versions/latest
      env: ALLOYDB_AI_NL_USER
    - versionName: projects/$PROJECT_ID/secrets/alloydb_ai_nl_pass/versions/latest
      env: ALLOYDB_AI_NL_PASS
    - versionName: projects/$PROJECT_ID/secrets/postgres_user/versions/latest
      env: POSTGRES_USER
    - versionName: projects/$PROJECT_ID/secrets/postgres_pass/versions/latest
      env: POSTGRES_PASS
    - versionName: projects/$PROJECT_ID/secrets/client_id/versions/latest
      env: CLIENT_ID
    - versionName: projects/$PROJECT_ID/secrets/neo4j_user/versions/latest
      env: NEO4J_USER
    - versionName: projects/$PROJECT_ID/secrets/neo4j_pass/versions/latest
      env: NEO4J_PASS
    - versionName: projects/$PROJECT_ID/secrets/cloud_sql_mssql_user/versions/latest
      env: CLOUD_SQL_MSSQL_USER
    - versionName: projects/$PROJECT_ID/secrets/cloud_sql_mssql_pass/versions/latest
      env: CLOUD_SQL_MSSQL_PASS
    - versionName: projects/$PROJECT_ID/secrets/cloud_sql_mysql_user/versions/latest
      env: CLOUD_SQL_MYSQL_USER
    - versionName: projects/$PROJECT_ID/secrets/cloud_sql_mysql_pass/versions/latest
      env: CLOUD_SQL_MYSQL_PASS
    - versionName: projects/$PROJECT_ID/secrets/mysql_user/versions/latest
      env: MYSQL_USER
    - versionName: projects/$PROJECT_ID/secrets/mysql_pass/versions/latest
      env: MYSQL_PASS
    - versionName: projects/$PROJECT_ID/secrets/mssql_user/versions/latest
      env: MSSQL_USER
    - versionName: projects/$PROJECT_ID/secrets/mssql_pass/versions/latest
      env: MSSQL_PASS
    - versionName: projects/$PROJECT_ID/secrets/couchbase_connection/versions/latest
      env: COUCHBASE_CONNECTION
    - versionName: projects/$PROJECT_ID/secrets/couchbase_user/versions/latest
      env: COUCHBASE_USER
    - versionName: projects/$PROJECT_ID/secrets/couchbase_pass/versions/latest
      env: COUCHBASE_PASS
    - versionName: projects/$PROJECT_ID/secrets/memorystore_redis_address/versions/latest
      env: REDIS_ADDRESS
    - versionName: projects/$PROJECT_ID/secrets/memorystore_redis_pass/versions/latest
      env: REDIS_PASS
    - versionName: projects/$PROJECT_ID/secrets/memorystore_valkey_address/versions/latest
      env: VALKEY_ADDRESS


options:
  logging: CLOUD_LOGGING_ONLY
  automapSubstitutions: true
  substitutionOption: "ALLOW_LOOSE"
  dynamicSubstitutions: true
  pool:
    name: projects/$PROJECT_ID/locations/us-central1/workerPools/integration-testing # Necessary for VPC network connection

substitutions:
  _DATABASE_NAME: test_database
  _REGION: "us-central1"
  _CLOUD_SQL_POSTGRES_INSTANCE: "cloud-sql-pg-testing"
  _ALLOYDB_POSTGRES_CLUSTER: "alloydb-pg-testing"
  _ALLOYDB_POSTGRES_INSTANCE: "alloydb-pg-testing-instance"
  _ALLOYDB_AI_NL_CLUSTER: "alloydb-ai-nl-testing"
  _ALLOYDB_AI_NL_INSTANCE: "alloydb-ai-nl-testing-instance"
  _BIGTABLE_INSTANCE: "bigtable-testing-instance"
  _POSTGRES_HOST: 127.0.0.1
  _POSTGRES_PORT: "5432"
  _SPANNER_INSTANCE: "spanner-testing"
  _NEO4J_DATABASE: "neo4j"
  _CLOUD_SQL_MSSQL_INSTANCE: "cloud-sql-mssql-testing"
  _CLOUD_SQL_MYSQL_INSTANCE: "cloud-sql-mysql-testing"
  _MYSQL_HOST: 127.0.0.1
  _MYSQL_PORT: "3306"
  _MSSQL_HOST: 127.0.0.1
  _MSSQL_PORT: "1433"
  _DGRAPHURL: "https://play.dgraph.io"
  _COUCHBASE_BUCKET: "couchbase-bucket"
  _COUCHBASE_SCOPE: "couchbase-scope"

================
File: .ci/test_with_coverage.sh
================
#!/bin/bash

# Arguments:
# $1: Display name for logs (e.g., "Cloud SQL Postgres")
# $2: Source package name (e.g., cloudsqlpg)
# $3, $4, ...: Tool package names for grep (e.g., postgressql)

DISPLAY_NAME="$1"
SOURCE_PACKAGE_NAME="$2"

# Construct the test binary name
TEST_BINARY="${SOURCE_PACKAGE_NAME}.test"

# Construct the full source path
SOURCE_PATH="sources/${SOURCE_PACKAGE_NAME}/"

# Shift arguments so that $3 and onwards become the list of tool package names
shift 2
TOOL_PACKAGE_NAMES=("$@")

COVERAGE_FILE="${TEST_BINARY%.test}_coverage.out"
FILTERED_COVERAGE_FILE="${TEST_BINARY%.test}_filtered_coverage.out"

export path="github.com/googleapis/genai-toolbox/internal/"

GREP_PATTERN="^mode:|${path}${SOURCE_PATH}"
# Add each tool package path to the grep pattern
for tool_name in "${TOOL_PACKAGE_NAMES[@]}"; do
  if [ -n "$tool_name" ]; then
    full_tool_path="tools/${tool_name}/"
    GREP_PATTERN="${GREP_PATTERN}|${path}${full_tool_path}"
  fi
done

# Run integration test
if ! ./"${TEST_BINARY}" -test.v -test.coverprofile="${COVERAGE_FILE}"; then
  echo "Error: Tests for ${DISPLAY_NAME} failed. Exiting."
  exit 1
fi

# Filter source/tool packages
if ! grep -E "${GREP_PATTERN}" "${COVERAGE_FILE}" > "${FILTERED_COVERAGE_FILE}"; then
  echo "Warning: Could not filter coverage for ${DISPLAY_NAME}. Filtered file might be empty or invalid."
fi

# Calculate coverage
echo "Calculating coverage for ${DISPLAY_NAME}..."
total_coverage=$(go tool cover -func="${FILTERED_COVERAGE_FILE}" 2>/dev/null | grep "total:" | awk '{print $3}')


echo "${DISPLAY_NAME} total coverage: $total_coverage"
coverage_numeric=$(echo "$total_coverage" | sed 's/%//')

# Check coverage threshold
if awk -v coverage="$coverage_numeric" 'BEGIN {exit !(coverage < 50)}'; then
    echo "Coverage failure: ${DISPLAY_NAME} total coverage($total_coverage) is below 50%."
    exit 1
else
    echo "Coverage for ${DISPLAY_NAME} is sufficient."
fi

================
File: .ci/versioned.release.cloudbuild.yaml
================
# Copyright 2024 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  - id: "build-docker"
    name: "gcr.io/cloud-builders/docker"
    waitFor: ['-']
    script: |
        #!/usr/bin/env bash
        export VERSION=$(cat ./cmd/version.txt)
        docker buildx create --name container-builder --driver docker-container --bootstrap --use

        export TAGS="-t ${_DOCKER_URI}:$VERSION"
        if [[ $_PUSH_LATEST == 'true' ]]; then
          export TAGS="$TAGS -t ${_DOCKER_URI}:latest"
        fi
        docker buildx build --platform linux/amd64,linux/arm64 --build-arg BUILD_TYPE=container.release --build-arg COMMIT_SHA=$(git rev-parse HEAD) $TAGS --push .

  - id: "install-dependencies"
    name: golang:1
    waitFor: ['-']
    env: 
      - 'GOPATH=/gopath'
    volumes:
      - name: 'go'
        path: '/gopath'
    script: |
        go get -d ./...

  - id: "build-linux-amd64"
    name: golang:1
    waitFor: 
      - "install-dependencies"
    env: 
      - 'GOPATH=/gopath'
    volumes:
      - name: 'go'
        path: '/gopath'
    script: |
        #!/usr/bin/env bash
        export VERSION=$(cat ./cmd/version.txt)
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
          go build -ldflags "-X github.com/googleapis/genai-toolbox/cmd.buildType=binary -X github.com/googleapis/genai-toolbox/cmd.commitSha=$(git rev-parse HEAD)" -o toolbox.linux.amd64

  - id: "store-linux-amd64"
    name: "gcr.io/cloud-builders/gcloud:latest"
    waitFor:
      - "build-linux-amd64"
    script: |
        #!/usr/bin/env bash
        export VERSION=v$(cat ./cmd/version.txt)
        gcloud storage cp toolbox.linux.amd64 gs://$_BUCKET_NAME/$VERSION/linux/amd64/toolbox

  - id: "build-darwin-arm64"
    name: golang:1
    waitFor: 
      - "install-dependencies"
    env: 
      - 'GOPATH=/gopath'
    volumes:
      - name: 'go'
        path: '/gopath'
    script: |
        #!/usr/bin/env bash
        export VERSION=$(cat ./cmd/version.txt)
        CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 \
          go build -ldflags "-X github.com/googleapis/genai-toolbox/cmd.buildType=binary -X github.com/googleapis/genai-toolbox/cmd.commitSha=$(git rev-parse HEAD)" -o toolbox.darwin.arm64

  - id: "store-darwin-arm64"
    name: "gcr.io/cloud-builders/gcloud:latest"
    waitFor:
      - "build-darwin-arm64"
    script: |
        #!/usr/bin/env bash
        export VERSION=v$(cat ./cmd/version.txt)
        gcloud storage cp toolbox.darwin.arm64 gs://$_BUCKET_NAME/$VERSION/darwin/arm64/toolbox

  - id: "build-darwin-amd64"
    name: golang:1
    waitFor: 
      - "install-dependencies"
    env: 
      - 'GOPATH=/gopath'
    volumes:
      - name: 'go'
        path: '/gopath'
    script: |
        #!/usr/bin/env bash
        export VERSION=$(cat ./cmd/version.txt)
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 \
          go build -ldflags "-X github.com/googleapis/genai-toolbox/cmd.buildType=binary -X github.com/googleapis/genai-toolbox/cmd.commitSha=$(git rev-parse HEAD)" -o toolbox.darwin.amd64

  - id: "store-darwin-amd64"
    name: "gcr.io/cloud-builders/gcloud:latest"
    waitFor:
      - "build-darwin-amd64"
    script: |
        #!/usr/bin/env bash
        export VERSION=v$(cat ./cmd/version.txt)
        gcloud storage cp toolbox.darwin.amd64 gs://$_BUCKET_NAME/$VERSION/darwin/amd64/toolbox

  - id: "build-windows-amd64"
    name: golang:1
    waitFor: 
      - "install-dependencies"
    env: 
      - 'GOPATH=/gopath'
    volumes:
      - name: 'go'
        path: '/gopath'
    script: |
        #!/usr/bin/env bash
        export VERSION=$(cat ./cmd/version.txt)
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 \
          go build -ldflags "-X github.com/googleapis/genai-toolbox/cmd.buildType=binary -X github.com/googleapis/genai-toolbox/cmd.commitSha=$(git rev-parse HEAD)" -o toolbox.windows.amd64

  - id: "store-windows-amd64"
    name: "gcr.io/cloud-builders/gcloud:latest"
    waitFor:
      - "build-windows-amd64"
    script: |
        #!/usr/bin/env bash
        export VERSION=v$(cat ./cmd/version.txt)
        gcloud storage cp toolbox.windows.amd64 gs://$_BUCKET_NAME/$VERSION/windows/amd64/toolbox.exe

options:
  automapSubstitutions: true
  dynamicSubstitutions: true
  logging: CLOUD_LOGGING_ONLY # Necessary for custom service account
  machineType: 'E2_HIGHCPU_32'

substitutions:
  _REGION: us-central1
  _AR_HOSTNAME: ${_REGION}-docker.pkg.dev
  _AR_REPO_NAME: toolbox
  _BUCKET_NAME: genai-toolbox
  _DOCKER_URI: ${_AR_HOSTNAME}/${PROJECT_ID}/${_AR_REPO_NAME}/toolbox
  _PUSH_LATEST: "true"

================
File: .github/ISSUE_TEMPLATE/bug_report.yml
================
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 🐞 Bug Report
description: File a report for unexpected or undesired behavior.
title: "<brief summary of what bug or error was observed>"
labels: ["type: bug"]
type: "bug"

body:
  - type: markdown
    attributes:
      value: |
        Thanks for helping us improve! 🙏 Please answer these questions and provide as much information as possible about your problem.
  
  - id: preamble
    type: checkboxes
    attributes:
      label: Prerequisites
      description: |
        Please run through the following list and make sure you've tried the usual "quick fixes":
        - Search the [current open issues](https://github.com/googleapis/genai-toolbox/issues)
        - Update to the [latest version of Toolbox](https://github.com/googleapis/genai-toolbox/releases)
      options: 
        - label: "I've searched the current open issues"
          required: true
        - label: "I've updated to the latest version of Toolbox"

  - type: input
    id: version
    attributes:
      label: Toolbox version
      description: |
        What version of Toolbox are you using (`toolbox --version`)? e.g.
        - toolbox version 0.3.0 
        - us-central1-docker.pkg.dev/database-toolbox/toolbox/toolbox:0.3.0
      placeholder: ex. toolbox version 0.3.0 
    validations:
      required: true

  - type: textarea
    id: environment
    attributes:
      label: Environment
      description: "Let us know some details about the environment in which you are seeing the bug!"
      value: |
        1. OS type and version: (output of `uname -a`)
        2. How are you running Toolbox: 
          - As a downloaded binary (e.g. from `curl -O https://storage.googleapis.com/genai-toolbox/v$VERSION/linux/amd64/toolbox`)
          - As a container (e.g. from `us-central1-docker.pkg.dev/database-toolbox/toolbox/toolbox:$VERSION`)
          - Compiled from source (include the command used to build)

  - type: textarea
    id: client
    attributes:
      label: Client 
      description: "How are you connecting to Toolbox?"
      value: |
        1. Client: <name and link to the client are you using>
        2. Version: <what exact version of the client are you using> 
        3. Example: If possible, please include your code of configuration:
        
        ```python
        # Code goes here! 
        ```

  - id: expected-behavior
    type: textarea
    attributes:
      label: Expected Behavior
      description: |
        Please enter a detailed description of the behavior you expected, and any information about what behavior you 
        noticed and why it is defective or unintentional.
    validations:
      required: true

  - id: current-behavior
    type: textarea
    attributes:
      label: Current Behavior
      description: "Please enter a detailed description of the behavior you encountered instead."
    validations:
      required: true

  - type: textarea
    id: repro
    attributes:
      label: Steps to reproduce?
      description: |
        How can we reproduce this bug? Please walk us through it step by step,
        with as much relevant detail as possible. A 'minimal' reproduction is
        preferred, which means removing as much of the examples as possible so
        only the minimum required to run and reproduce the bug is left. 
      value: |
        1. ?
        2. ?
        3. ?
        ...
    validations:
      required: true

  - type: textarea
    id: additional-details
    attributes:
      label: Additional Details
      description: |
        Any other information you want us to know? Things such as tools config,
        server logs, etc. can be included here.

================
File: .github/ISSUE_TEMPLATE/config.yml
================
blank_issues_enabled: false
contact_links:
  - name: Google Cloud Support
    url: https://cloud.google.com/support/
    about: If you have a support contract with Google, please both open an issue here and open Google Cloud Support portal with a link to the issue.

================
File: .github/ISSUE_TEMPLATE/feature_request.yml
================
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: ✨ Feature Request
description: Suggest an idea for new or improved behavior.
title: "<brief summary of the proposed feature>"
labels: ["type: feature request"]
type: feature
body:
  - type: markdown
    attributes:
      value: |
        Thanks for helping us improve! 🙏 Please answer these questions and provide as much information as possible about your feature request. 
  
  - id: preamble
    type: checkboxes
    attributes:
      label: Prerequisites
      description: |
        Please run through the following list and make sure you've tried the usual "quick fixes":
      options:
        - label: "Search the [current open issues](https://github.com/googleapis/genai-toolbox/issues)"
          required: true

  - type: textarea
    id: use-case
    attributes:
      label: What are you trying to do that currently feels hard or impossible? 
      description: "A clear and concise description of what the end goal for the feature should be -- avoid generalizing and try to provide a specific use-case."
    validations:
      required: true

  - type: textarea
    id: suggested-solution
    attributes:
      label: Suggested Solution(s)
      description: "If you have a suggestion for how this use-case can be solved, please feel free to include it."

  - type: textarea
    id: alternatives-considered
    attributes:
      label: Alternatives Considered
      description: "Are there any workaround or third party tools to replicate this behavior? Why would adding this feature be preferred over them?"

  - type: textarea
    id: additional-details
    attributes:
      label: Additional Details
      description: "Any additional information we should know? Please reference it here (issues, PRs, descriptions, or screenshots)"

================
File: .github/ISSUE_TEMPLATE/question.yml
================
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 💬 Question
description: Questions on how something works or the best way to do something?
title: "<brief summary of the question>"
labels: ["type: question"]

body:
  - type: markdown
    attributes:
      value: |
        Thanks for helping us improve! 🙏 Please provide as much information as possible about your question. 
  
  - id: preamble
    type: checkboxes
    attributes:
      label: Prerequisites
      description: |
        Please run through the following list and make sure you've tried the usual "quick fixes":
      options:
        - label: "Search the [current open issues](https://github.com/googleapis/genai-toolbox/issues)"
          required: true

  - type: textarea
    id: question
    attributes:
      label: Question
      description: "What's your question? Please provide as much relevant information as possible to reduce turnaround time. Include information like what environment, language, or framework you are using."
      placeholder: "Example: How do I connect using private IP with the AlloyDB source?"
    validations:
      required: true

  - type: textarea
    id: code
    attributes:
      label: Code
      description: "Please paste any useful application code that might be relevant to your question. (if your code is in a public repo, feel free to paste a link!)"
      
  - type: textarea
    id: additional-details
    attributes:
      label: Additional Details
      description: "Any other information you want us to know that might be helpful in answering your question? (link issues, PRs, descriptions, or screenshots)."

================
File: .github/workflows/cloud_build_failure_reporter.yml
================
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Cloud Build Failure Reporter

on:
  workflow_call:
    inputs:
      trigger_names:
          required: true
          type: string
  workflow_dispatch:
    inputs:
      trigger_names:
        description: 'Cloud Build trigger names separated by comma.'
        required: true
        default: ''

jobs:
  report:

    permissions:
      issues: 'write'
      checks: 'read'

    runs-on: 'ubuntu-latest'

    steps:
      - uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea' # v7
        with:
          script: |-
                  // parse test names
                  const testNameSubstring = '${{ inputs.trigger_names }}';
                  const testNameFound = new Map(); //keeps track of whether each test is found
                  testNameSubstring.split(',').forEach(testName => {
                    testNameFound.set(testName, false); 
                  });
                  
                  // label for all issues opened by reporter
                  const periodicLabel = 'periodic-failure';

                  // check if any reporter opened any issues previously
                  const prevIssues = await github.paginate(github.rest.issues.listForRepo, {
                    ...context.repo,
                    state: 'open',
                    creator: 'github-actions[bot]',
                    labels: [periodicLabel]
                  });

                  // createOrCommentIssue creates a new issue or comments on an existing issue.
                  const createOrCommentIssue = async function (title, txt) {
                    if (prevIssues.length < 1) {
                      console.log('no previous issues found, creating one');
                      await github.rest.issues.create({
                        ...context.repo,
                        title: title,
                        body: txt,
                        labels: [periodicLabel]
                      });
                      return;
                    }
                    // only comment on issue related to the current test
                    for (const prevIssue of prevIssues) {
                      if (prevIssue.title.includes(title)){
                          console.log(
                          `found previous issue ${prevIssue.html_url}, adding comment`
                        );

                        await github.rest.issues.createComment({
                          ...context.repo,
                          issue_number: prevIssue.number,
                          body: txt
                        });
                        return;
                      }
                    }
                  };

                  // updateIssues comments on any existing issues. No-op if no issue exists.
                  const updateIssues = async function (checkName, txt) {
                    if (prevIssues.length < 1) {
                      console.log('no previous issues found.');
                      return;
                    }
                    // only comment on issue related to the current test
                    for (const prevIssue of prevIssues) {
                      if (prevIssue.title.includes(checkName)){
                        console.log(`found previous issue ${prevIssue.html_url}, adding comment`);
                        await github.rest.issues.createComment({
                          ...context.repo,
                          issue_number: prevIssue.number,
                          body: txt
                        });
                      }
                    }
                  };

                  // Find status of check runs.
                  // We will find check runs for each commit and then filter for the periodic.
                  // Checks API only allows for ref and if we use main there could be edge cases where
                  // the check run happened on a SHA that is different from head.
                  const commits = await github.paginate(github.rest.repos.listCommits, {
                    ...context.repo
                  });

                  const relevantChecks = new Map();
                  for (const commit of commits) {
                    console.log(
                      `checking runs at ${commit.html_url}: ${commit.commit.message}`
                    );
                    const checks = await github.rest.checks.listForRef({
                      ...context.repo,
                      ref: commit.sha
                    });

                    // Iterate through each check and find matching names
                    for (const check of checks.data.check_runs) {
                      console.log(`Handling test name ${check.name}`);
                      for (const testName of testNameFound.keys()) {
                        if (testNameFound.get(testName) === true){
                          //skip if a check is already found for this name
                          continue; 
                        }
                        if (check.name.includes(testName)) {
                          relevantChecks.set(check, commit);
                          testNameFound.set(testName, true);
                        }
                      }
                    }
                    // Break out of the loop early if all tests are found
                    const allTestsFound = Array.from(testNameFound.values()).every(value => value === true);
                    if (allTestsFound){
                      break;
                    }
                  }

                  // Handle each relevant check
                  relevantChecks.forEach((commit, check) => {
                    if (
                        check.status === 'completed' &&
                        check.conclusion === 'success'
                    ) {
                        updateIssues(
                            check.name,
                            `[Tests are passing](${check.html_url}) for commit [${commit.sha}](${commit.html_url}).`
                        );
                    } else if (check.status === 'in_progress') {
                        console.log(
                            `Check is pending ${check.html_url} for ${commit.html_url}. Retry again later.`
                        );
                    } else {
                        createOrCommentIssue(
                            `Cloud Build Failure Reporter: ${check.name} failed`,
                            `Cloud Build Failure Reporter found test failure for [**${check.name}** ](${check.html_url}) at [${commit.sha}](${commit.html_url}). Please fix the error and then close the issue after the **${check.name}** test passes.`
                        );
                    }
                  });

                  // no periodic checks found across all commits, report it
                  const noTestFound = Array.from(testNameFound.values()).every(value => value === false);
                  if (noTestFound){
                    createOrCommentIssue(
                      'Missing periodic tests: ${{ inputs.trigger_names }}',
                      `No periodic test is found for triggers: ${{ inputs.trigger_names }}. Last checked from ${
                        commits[0].html_url
                      } to ${commits[commits.length - 1].html_url}.`
                    );
                  }

================
File: .github/workflows/docs_deploy.yaml
================
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "docs"

permissions:
  contents: write

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'github/workflows/docs**'
      - '.hugo/**'

  # Allow triggering manually.
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: .hugo
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@75d2e84710de30f6ff7268e08f310b60ef14033f # v3
        with:
          hugo-version: "0.145.0"
          extended: true

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "22"

      - name: Cache dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci
      - run: hugo --minify
        env:
          HUGO_BASEURL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/
          HUGO_RELATIVEURLS: false

      - name: Deploy
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e # v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .hugo/public
          # Do not delete previews on each production deploy.
          # CSS or JS changes will require manual clean-up.
          keep_files: true
          commit_message: "deploy: ${{ github.event.head_commit.message }}"

================
File: .github/workflows/docs_preview_clean.yaml
================
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "docs"

permissions:
  contents: write
  pull-requests: write

# This Workflow depends on 'github.event.number',
# not compatible with branch or manual triggers.
on:
  pull_request:
    types:
      - closed

jobs:
  clean:
    if: ${{ !github.event.pull_request.head.repo.fork }}
    runs-on: ubuntu-24.04
    concurrency:
      # Shared concurrency group wih preview staging.
      group: "preview-${{ github.event.number }}"
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: gh-pages

      - name: Remove Preview
        run: |
          rm -Rf ./previews/PR-${{ github.event.number }}
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add -u previews/PR-${{ github.event.number }}
          git commit --message "cleanup: previews/PR-${{ github.event.number }}"
          git push

      - name: Comment
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.payload.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "🧨 Preview deployments removed."
            })

================
File: .github/workflows/docs_preview_deploy.yaml
================
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "docs"

permissions:
  contents: write
  pull-requests: write
  
# This Workflow depends on 'github.event.number',
# not compatible with branch or manual triggers.
on:
  pull_request:
    # Sync with github_actions_preview_fallback.yml on.pull_request.paths-ignore
    paths:
      - 'docs/**'
      - 'github/workflows/docs**'
      - '.hugo/**'
  pull_request_target:
    types: [labeled]
    paths:
      - 'docs/**'
      - 'github/workflows/docs**'
      - '.hugo/**'

jobs:
  preview:
    # run job on proper workflow event triggers (skip job for pull_request event
    # from forks and only run pull_request_target for "docs: deploy-preview"
    # label)
    if: "${{ (github.event.action != 'labeled' && github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name) || github.event.label.name == 'docs: deploy-preview' }}"
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: .hugo
    concurrency:
      # Shared concurrency group wih preview cleanup.
      group: "preview-${{ github.event.number }}"
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@75d2e84710de30f6ff7268e08f310b60ef14033f # v3
        with:
          hugo-version: "0.145.0"
          extended: true

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "22"

      - name: Cache dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci
      - run: hugo --minify
        env:
          HUGO_BASEURL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/previews/PR-${{ github.event.number }}/
          HUGO_ENVIRONMENT: preview
          HUGO_RELATIVEURLS: false

      - name: Deploy
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e # v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .hugo/public
          destination_dir: ./previews/PR-${{ github.event.number }}
          commit_message: "stage: PR-${{ github.event.number }}: ${{ github.event.head_commit.message }}"

      - name: Comment
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.payload.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "🔎 Preview at https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/previews/PR-${{ github.event.number }}/"
            })

================
File: .github/workflows/lint.yaml
================
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: lint
on:
  pull_request:
  pull_request_target:
    types: [labeled]

# Declare default permissions as read only.
permissions: read-all

jobs:
  lint:
    if: "${{ github.event.action != 'labeled' || github.event.label.name == 'tests: run' }}"
    name: lint
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    permissions:
      contents: 'read'
      issues: 'write'
      pull-requests: 'write'
    steps:
      - name: Remove PR Label
        if: "${{ github.event.action == 'labeled' && github.event.label.name == 'tests: run' }}"
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.removeLabel({
                name: 'tests: run',
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number
              });
            } catch (e) {
              console.log('Failed to remove label. Another job may have already removed it!');
            }
      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: "1.22"
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: >
          Verify go mod tidy. If you're reading this and the check has
          failed, run `goimports -w . && go mod tidy && golangci-lint run`
        run: |
          go mod tidy && git diff --exit-code
      - name: golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          version: latest
          args: --timeout 3m

================
File: .github/workflows/schedule_reporter.yml
================
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Schedule Reporter

on:
  schedule:
    - cron: '0 6 * * *'  # Runs at 6 AM every morning

jobs:
  run_reporter:
    permissions:
        issues: 'write'
        checks: 'read'
        contents: 'read'
    uses: ./.github/workflows/cloud_build_failure_reporter.yml
    with:
      trigger_names: "toolbox-test-nightly,toolbox-test-on-merge"

================
File: .github/workflows/sync-labels.yaml
================
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Sync Labels
on:
  push:
    branches:
      - main

# Declare default permissions as read only.
permissions: read-all

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      issues: 'write'
      pull-requests: 'write'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: micnncim/action-label-syncer@3abd5ab72fda571e69fffd97bd4e0033dd5f495c # v1.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          manifest: .github/labels.yaml

================
File: .github/workflows/tests.yaml
================
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: tests
on:
  push:
    branches:
    - 'main'
  pull_request:
  pull_request_target:
    types: [labeled]

# Declare default permissions as read only.
permissions: read-all

jobs:
  integration:
    # run job on proper workflow event triggers (skip job for pull_request event from forks and only run pull_request_target for "tests: run" label)
    if: "${{ (github.event.action != 'labeled' && github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name) || github.event.label.name == 'tests: run' }}"
    name: unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
      fail-fast: false
    permissions:
      contents: 'read'
      issues: 'write'
      pull-requests: 'write'
    steps:
      - name: Remove PR label
        if: "${{ github.event.action == 'labeled' && github.event.label.name == 'tests: run' }}"
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.removeLabel({
                name: 'tests: run',
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number
              });
            } catch (e) {
              console.log('Failed to remove label. Another job may have already removed it!');
            }

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: "1.22"

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: go get .

      - name: Build
        run: go build -v ./...

      - name: Run tests with coverage
        if: ${{ runner.os == 'Linux' }}
        run: |
          source_dir="./internal/sources/*"
          tool_dir="./internal/tools/*"
          auth_dir="./internal/auth/*"
          int_test_dir="./tests/*"
          included_packages=$(go list ./... | grep -v -e "$source_dir" -e "$tool_dir" -e "$auth_dir" -e "$int_test_dir")
          go test -race -cover -coverprofile=coverage.out -v $included_packages
          go test -race -v ./internal/sources/... ./internal/tools/... ./internal/auth/...

      - name: Run tests without coverage
        if: ${{ runner.os != 'Linux' }}
        run: |
          go test -race -v ./internal/... ./cmd/...

      - name: Check coverage
        if: ${{ runner.os == 'Linux' }}
        run: |
          FILE_TO_EXCLUDE="github.com/googleapis/genai-toolbox/internal/server/config.go"
          ESCAPED_PATH=$(echo "$FILE_TO_EXCLUDE" | sed 's/\//\\\//g; s/\./\\\./g')
          sed -i "/^${ESCAPED_PATH}:/d" coverage.out
          total_coverage=$(go tool cover -func=coverage.out | grep "total:" | awk '{print $3}')
          echo "Total coverage: $total_coverage"
          coverage_numeric=$(echo "$total_coverage" | sed 's/%//')
          if (( $(echo "$coverage_numeric < 40" | bc -l) )); then
              echo "Coverage failure: total coverage($total_coverage) is below 40%."
              exit 1
          fi

================
File: .github/auto-label.yaml
================
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

enabled: false

================
File: .github/blunderbuss.yml
================
assign_issues:
  - Yuan325
  - duwenxin99
  - akitsch
assign_issues_by:
  - labels:
    - 'product: bigquery'
    to:
    - Genesis929
    - shobsi
    - jiaxunwu
assign_prs:
  - Yuan325
  - duwenxin99
  - akitsch

================
File: .github/CODEOWNERS
================
# This file controls who is tagged for review for any given pull request.
#
# For syntax help see:
# https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners#codeowners-syntax

*   @googleapis/senseai-eco

================
File: .github/header-checker-lint.yaml
================
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

allowedCopyrightHolders:
  - 'Google LLC'
allowedLicenses:
  - 'Apache-2.0'
sourceFileExtensions:
  - 'go'
  - 'yaml'
  - 'yml'

================
File: .github/label-sync.yml
================
---
ignored: true

================
File: .github/labels.yaml
================
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: duplicate
  color: ededed
  description: ""

- name: 'type: bug'
  color: db4437
  description: Error or flaw in code with unintended results or allowing sub-optimal
    usage patterns.
- name: 'type: cleanup'
  color: c5def5
  description: An internal cleanup or hygiene concern.
- name: 'type: docs'
  color: 0000A0
  description: Improvement to the documentation for an API.
- name: 'type: feature request'
  color: c5def5
  description: ‘Nice-to-have’ improvement, new feature or different behavior or design.
- name: 'type: process'
  color: c5def5
  description: A process-related concern. May include testing, release, or the like.
- name: 'type: question'
  color: c5def5
  description: Request for information or clarification.

- name: 'priority: p0'
  color: b60205
  description: Highest priority. Critical issue. P0 implies highest priority.
- name: 'priority: p1'
  color: ffa03e
  description: Important issue which blocks shipping the next release. Will be fixed
    prior to next release.
- name: 'priority: p2'
  color: fef2c0
  description: Moderately-important priority. Fix may not be included in next release.
- name: 'priority: p3'
  color: ffffc7
  description: Desirable enhancement or fix. May not be included in next release.

- name: do not merge
  color: d93f0b
  description: Indicates a pull request not ready for merge, due to either quality
    or timing.

- name: 'autorelease: pending'
  color: ededed
  description: Release please needs to do its work on this.
- name: 'autorelease: triggered'
  color: ededed
  description: Release please has triggered a release for this.
- name: 'autorelease: tagged'
  color: ededed
  description: Release please has completed a release for this.

- name: 'tests: run'
  color: 3DED97
  description: Label to trigger Github Action tests.

- name: 'docs: deploy-preview'
  color: BFDADC
  description: Label to trigger Github Action docs preview.

- name: 'status: contribution welcome'
  color: 8befd7
  description: Status - Contributions welcome.

- name: 'status: awaiting response'
  color: 8befd7
  description: Status - Awaiting response from author.

- name: 'status: awaiting codeowners'
  color: 8befd7
  description: Status - Awaiting response from code owners.

# Product Labels
- name: 'product: bigquery'
  color: 5065c7
  description: Product - Assigned to the BigQuery team.

================
File: .github/release-please.yml
================
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

handleGHRelease: true
packageName: genai-toolbox
releaseType: simple
versionFile: "cmd/version.txt"
extraFiles: [
    "README.md",
    "docs/en/getting-started/introduction/_index.md",
    "docs/en/getting-started/local_quickstart.md",
    "docs/en/getting-started/local_quickstart_js.md",
    "docs/en/getting-started/mcp_quickstart/_index.md",
    "docs/en/samples/bigquery/local_quickstart.md",
    "docs/en/samples/bigquery/mcp_quickstart/_index.md",
    "docs/en/getting-started/colab_quickstart.ipynb",
    "docs/en/samples/bigquery/colab_quickstart_bigquery.ipynb",
    "docs/en/how-to/connect-ide/bigquery_mcp.md",
    "docs/en/how-to/connect-ide/spanner_mcp.md",
    "docs/en/how-to/connect-ide/alloydb_pg_mcp.md",
    "docs/en/how-to/connect-ide/cloud_sql_mysql_mcp.md",
    "docs/en/how-to/connect-ide/cloud_sql_pg_mcp.md",
    "docs/en/how-to/connect-ide/postgres_mcp.md",
    "docs/en/how-to/connect-ide/cloud_sql_mssql_mcp.md",
]

================
File: .github/renovate.json5
================
{
  extends: [
    'config:recommended',
    ':semanticCommitTypeAll(chore)',
    ':ignoreUnstable',
    ':separateMajorReleases',
    ':prConcurrentLimitNone',
    ':prHourlyLimitNone',
    ':preserveSemverRanges',
  ],
  minimumReleaseAge: '3',
  rebaseWhen: 'conflicted',
  dependencyDashboardLabels: [
    'type: process',
  ],
  "postUpdateOptions": [
    "gomodTidy"
  ],
  packageRules: [
    {
      groupName: 'GitHub Actions',
      matchManagers: [
        'github-actions',
      ],
      pinDigests: true,
    },
  ],
}

================
File: .github/sync-repo-settings.yaml
================
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Synchronize repository settings from a centralized config
# https://github.com/googleapis/repo-automation-bots/tree/main/packages/sync-repo-settings
# Install: https://github.com/apps/sync-repo-settings

# Disable merge commits
rebaseMergeAllowed: true
squashMergeAllowed: true
mergeCommitAllowed: false
# Enable branch protection
branchProtectionRules:
  - pattern: main
    isAdminEnforced: true
    requiredStatusCheckContexts:
      - "cla/google"
      - "lint"
      - "conventionalcommits.org"
      - "header-check"
    # - Add required status checks like presubmit tests
      - "unit tests (ubuntu-latest)"
      - "unit tests (windows-latest)"
      - "unit tests (macos-latest)"
      - "integration-test-pr (toolbox-testing-438616)"
    requiredApprovingReviewCount: 1
    requiresCodeOwnerReviews: true
    requiresStrictStatusChecks: true

# Set team access
permissionRules:
  - team: senseai-eco
    permission: admin

================
File: internal/auth/google/google.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//	http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package google
⋮----
import (
	"context"
	"fmt"
	"net/http"

	"github.com/googleapis/genai-toolbox/internal/auth"
	"google.golang.org/api/idtoken"
)
⋮----
"context"
"fmt"
"net/http"
⋮----
"github.com/googleapis/genai-toolbox/internal/auth"
"google.golang.org/api/idtoken"
⋮----
const AuthServiceKind string = "google"
⋮----
// validate interface
var _ auth.AuthServiceConfig = Config{}
⋮----
// Auth service configuration
type Config struct {
	Name     string `yaml:"name" validate:"required"`
	Kind     string `yaml:"kind" validate:"required"`
	ClientID string `yaml:"clientId" validate:"required"`
}
⋮----
// Returns the auth service kind
func (cfg Config) AuthServiceConfigKind() string
⋮----
// Initialize a Google auth service
func (cfg Config) Initialize() (auth.AuthService, error)
⋮----
var _ auth.AuthService = AuthService{}
⋮----
// struct used to store auth service info
type AuthService struct {
	Name     string `yaml:"name"`
	Kind     string `yaml:"kind"`
	ClientID string `yaml:"clientId"`
}
⋮----
func (a AuthService) AuthServiceKind() string
⋮----
// Returns the name of the auth service
func (a AuthService) GetName() string
⋮----
// Verifies Google ID token and return claims
func (a AuthService) GetClaimsFromHeader(ctx context.Context, h http.Header) (map[string]any, error)
⋮----
return nil, fmt.Errorf("Google ID token verification failure: %w", err) //nolint:staticcheck

================
File: internal/auth/auth.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package auth
⋮----
import (
	"context"
	"net/http"
)
⋮----
"context"
"net/http"
⋮----
// AuthServiceConfig is the interface for configuring authentication services.
type AuthServiceConfig interface {
	AuthServiceConfigKind() string
	Initialize() (AuthService, error)
}
⋮----
// AuthService is the interface for authentication services.
type AuthService interface {
	AuthServiceKind() string
	GetName() string
	GetClaimsFromHeader(context.Context, http.Header) (map[string]any, error)
}

================
File: internal/log/handler.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package log
⋮----
import (
	"context"
	"fmt"
	"io"
	"log/slog"
	"sync"
	"time"

	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"fmt"
"io"
"log/slog"
"sync"
"time"
⋮----
"go.opentelemetry.io/otel/trace"
⋮----
// ValueTextHandler is a [Handler] that writes Records to an [io.Writer] with values separated by spaces.
type ValueTextHandler struct {
	h   slog.Handler
	mu  *sync.Mutex
	out io.Writer
}
⋮----
// NewValueTextHandler creates a [ValueTextHandler] that writes to out, using the given options.
func NewValueTextHandler(out io.Writer, opts *slog.HandlerOptions) *ValueTextHandler
⋮----
func (h *ValueTextHandler) Enabled(ctx context.Context, level slog.Level) bool
⋮----
func (h *ValueTextHandler) WithAttrs(attrs []slog.Attr) slog.Handler
⋮----
func (h *ValueTextHandler) WithGroup(name string) slog.Handler
⋮----
// Handle formats its argument [Record] as a single line of space-separated values.
// Example output format: 2024-11-12T15:08:11.451377-08:00 INFO "Initialized 0 sources.\n"
func (h *ValueTextHandler) Handle(ctx context.Context, r slog.Record) error
⋮----
// time
⋮----
// level
⋮----
// message
⋮----
// appendAttr is responsible for formatting a single attribute
func (h *ValueTextHandler) appendAttr(buf []byte, a slog.Attr) []byte
⋮----
// Resolve the Attr's value before doing anything else.
⋮----
// Ignore empty Attrs.
⋮----
// Quote string values, to make them easy to parse.
⋮----
// Write times in a standard way, without the monotonic time.
⋮----
// Ignore empty groups.
⋮----
// spanContextLogHandler is an slog.Handler which adds attributes from the span
// context.
type spanContextLogHandler struct {
	slog.Handler
}
⋮----
// handlerWithSpanContext adds attributes from the span context.
func handlerWithSpanContext(handler slog.Handler) *spanContextLogHandler
⋮----
// Handle overrides slog.Handler's Handle method. This adds attributes from the
// span context to the slog.Record.
⋮----
// Get the SpanContext from the golang Context.
⋮----
// Add trace context attributes following Cloud Logging structured log format described
// in https://cloud.google.com/logging/docs/structured-logging#special-payload-fields

================
File: internal/log/log_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package log
⋮----
import (
	"bytes"
	"context"
	"encoding/json"
	"log/slog"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
)
⋮----
"bytes"
"context"
"encoding/json"
"log/slog"
"strings"
"testing"
⋮----
"github.com/google/go-cmp/cmp"
⋮----
func TestSeverityToLevel(t *testing.T)
⋮----
func TestSeverityToLevelError(t *testing.T)
⋮----
func TestLevelToSeverity(t *testing.T)
⋮----
func TestLevelToSeverityError(t *testing.T)
⋮----
func runLogger(logger Logger, logMsg string)
⋮----
func TestStdLogger(t *testing.T)
⋮----
func TestStructuredLoggerDebugLog(t *testing.T)

================
File: internal/log/log.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package log
⋮----
import (
	"context"
	"fmt"
	"io"
	"log/slog"
	"strings"
)
⋮----
"context"
"fmt"
"io"
"log/slog"
"strings"
⋮----
// StdLogger is the standard logger
type StdLogger struct {
	outLogger *slog.Logger
	errLogger *slog.Logger
}
⋮----
// NewStdLogger create a Logger that uses out and err for informational and error messages.
func NewStdLogger(outW, errW io.Writer, logLevel string) (Logger, error)
⋮----
//Set log level
var programLevel = new(slog.LevelVar)
⋮----
// DebugContext logs debug messages
func (sl *StdLogger) DebugContext(ctx context.Context, msg string, keysAndValues ...interface
⋮----
// InfoContext logs debug messages
func (sl *StdLogger) InfoContext(ctx context.Context, msg string, keysAndValues ...interface
⋮----
// WarnContext logs warning messages
func (sl *StdLogger) WarnContext(ctx context.Context, msg string, keysAndValues ...interface
⋮----
// ErrorContext logs error messages
func (sl *StdLogger) ErrorContext(ctx context.Context, msg string, keysAndValues ...interface
⋮----
const (
	Debug = "DEBUG"
	Info  = "INFO"
	Warn  = "WARN"
	Error = "ERROR"
)
⋮----
// Returns severity level based on string.
func SeverityToLevel(s string) (slog.Level, error)
⋮----
// Returns severity string based on level.
func levelToSeverity(s string) (string, error)
⋮----
type StructuredLogger struct {
	outLogger *slog.Logger
	errLogger *slog.Logger
}
⋮----
// NewStructuredLogger create a Logger that logs messages using JSON.
func NewStructuredLogger(outW, errW io.Writer, logLevel string) (Logger, error)
⋮----
// Configure structured logs to adhere to Cloud LogEntry format
// https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry
⋮----
// InfoContext logs info messages

================
File: internal/log/logger.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package log
⋮----
import (
	"context"
)
⋮----
"context"
⋮----
// Logger is the interface used throughout the project for logging.
type Logger interface {
	// DebugContext is for reporting additional information about internal operations.
	DebugContext(ctx context.Context, format string, args ...interface{})
⋮----
// DebugContext is for reporting additional information about internal operations.
⋮----
// InfoContext is for reporting informational messages.
⋮----
// WarnContext is for reporting warning messages.
⋮----
// ErrorContext is for reporting errors.

================
File: internal/prebuiltconfigs/tools/alloydb-postgres.yaml
================
sources:
    alloydb-pg-source:
        kind: "alloydb-postgres"
        project: ${ALLOYDB_POSTGRES_PROJECT}
        region: ${ALLOYDB_POSTGRES_REGION}
        cluster: ${ALLOYDB_POSTGRES_CLUSTER}
        instance: ${ALLOYDB_POSTGRES_INSTANCE}
        database: ${ALLOYDB_POSTGRES_DATABASE}
        user: ${ALLOYDB_POSTGRES_USER}
        password: ${ALLOYDB_POSTGRES_PASSWORD}

tools:
    execute_sql:
        kind: postgres-execute-sql
        source: alloydb-pg-source
        description: Use this tool to execute sql.

    list_tables:
        kind: postgres-sql
        source: alloydb-pg-source
        description: "Lists detailed schema information (object type, columns, constraints, indexes, triggers, owner, comment) as JSON for user-created tables (ordinary or partitioned). Filters by a comma-separated list of names. If names are omitted, lists all tables in user schemas."
        statement: |
            WITH desired_relkinds AS (
                SELECT ARRAY['r', 'p']::char[] AS kinds -- Always consider both 'TABLE' and 'PARTITIONED TABLE'
            ),
            table_info AS (
                SELECT
                    t.oid AS table_oid,
                    ns.nspname AS schema_name,
                    t.relname AS table_name,
                    pg_get_userbyid(t.relowner) AS table_owner,
                    obj_description(t.oid, 'pg_class') AS table_comment,
                    t.relkind AS object_kind
                FROM
                    pg_class t
                JOIN
                    pg_namespace ns ON ns.oid = t.relnamespace
                CROSS JOIN desired_relkinds dk
                WHERE
                    t.relkind = ANY(dk.kinds) -- Filter by selected table relkinds ('r', 'p')
                    AND (NULLIF(TRIM($1), '') IS NULL OR t.relname = ANY(string_to_array($1,','))) -- $1 is object_names
                    AND ns.nspname NOT IN ('pg_catalog', 'information_schema', 'pg_toast')
                    AND ns.nspname NOT LIKE 'pg_temp_%' AND ns.nspname NOT LIKE 'pg_toast_temp_%'
            ),
            columns_info AS (
                SELECT
                    att.attrelid AS table_oid, att.attname AS column_name, format_type(att.atttypid, att.atttypmod) AS data_type,
                    att.attnum AS column_ordinal_position, att.attnotnull AS is_not_nullable,
                    pg_get_expr(ad.adbin, ad.adrelid) AS column_default, col_description(att.attrelid, att.attnum) AS column_comment
                FROM pg_attribute att LEFT JOIN pg_attrdef ad ON att.attrelid = ad.adrelid AND att.attnum = ad.adnum
                JOIN table_info ti ON att.attrelid = ti.table_oid WHERE att.attnum > 0 AND NOT att.attisdropped
            ),
            constraints_info AS (
                SELECT
                    con.conrelid AS table_oid, con.conname AS constraint_name, pg_get_constraintdef(con.oid) AS constraint_definition,
                    CASE con.contype WHEN 'p' THEN 'PRIMARY KEY' WHEN 'f' THEN 'FOREIGN KEY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' ELSE con.contype::text END AS constraint_type,
                    (SELECT array_agg(att.attname ORDER BY u.attposition) FROM unnest(con.conkey) WITH ORDINALITY AS u(attnum, attposition) JOIN pg_attribute att ON att.attrelid = con.conrelid AND att.attnum = u.attnum) AS constraint_columns,
                    NULLIF(con.confrelid, 0)::regclass AS foreign_key_referenced_table,
                    (SELECT array_agg(att.attname ORDER BY u.attposition) FROM unnest(con.confkey) WITH ORDINALITY AS u(attnum, attposition) JOIN pg_attribute att ON att.attrelid = con.confrelid AND att.attnum = u.attnum WHERE con.contype = 'f') AS foreign_key_referenced_columns
                FROM pg_constraint con JOIN table_info ti ON con.conrelid = ti.table_oid
            ),
            indexes_info AS (
                SELECT
                    idx.indrelid AS table_oid, ic.relname AS index_name, pg_get_indexdef(idx.indexrelid) AS index_definition,
                    idx.indisunique AS is_unique, idx.indisprimary AS is_primary, am.amname AS index_method,
                    (SELECT array_agg(att.attname ORDER BY u.ord) FROM unnest(idx.indkey::int[]) WITH ORDINALITY AS u(colidx, ord) LEFT JOIN pg_attribute att ON att.attrelid = idx.indrelid AND att.attnum = u.colidx WHERE u.colidx <> 0) AS index_columns
                FROM pg_index idx JOIN pg_class ic ON ic.oid = idx.indexrelid JOIN pg_am am ON am.oid = ic.relam JOIN table_info ti ON idx.indrelid = ti.table_oid
            ),
            triggers_info AS (
                SELECT tg.tgrelid AS table_oid, tg.tgname AS trigger_name, pg_get_triggerdef(tg.oid) AS trigger_definition, tg.tgenabled AS trigger_enabled_state
                FROM pg_trigger tg JOIN table_info ti ON tg.tgrelid = ti.table_oid WHERE NOT tg.tgisinternal
            )
            SELECT
                ti.schema_name,
                ti.table_name AS object_name,
                json_build_object(
                    'schema_name', ti.schema_name,
                    'object_name', ti.table_name,
                    'object_type', CASE ti.object_kind
                                     WHEN 'r' THEN 'TABLE'
                                     WHEN 'p' THEN 'PARTITIONED TABLE'
                                     ELSE ti.object_kind::text -- Should not happen due to WHERE clause
                                   END,
                    'owner', ti.table_owner,
                    'comment', ti.table_comment,
                    'columns', COALESCE((SELECT json_agg(json_build_object('column_name',ci.column_name,'data_type',ci.data_type,'ordinal_position',ci.column_ordinal_position,'is_not_nullable',ci.is_not_nullable,'column_default',ci.column_default,'column_comment',ci.column_comment) ORDER BY ci.column_ordinal_position) FROM columns_info ci WHERE ci.table_oid = ti.table_oid), '[]'::json),
                    'constraints', COALESCE((SELECT json_agg(json_build_object('constraint_name',cons.constraint_name,'constraint_type',cons.constraint_type,'constraint_definition',cons.constraint_definition,'constraint_columns',cons.constraint_columns,'foreign_key_referenced_table',cons.foreign_key_referenced_table,'foreign_key_referenced_columns',cons.foreign_key_referenced_columns)) FROM constraints_info cons WHERE cons.table_oid = ti.table_oid), '[]'::json),
                    'indexes', COALESCE((SELECT json_agg(json_build_object('index_name',ii.index_name,'index_definition',ii.index_definition,'is_unique',ii.is_unique,'is_primary',ii.is_primary,'index_method',ii.index_method,'index_columns',ii.index_columns)) FROM indexes_info ii WHERE ii.table_oid = ti.table_oid), '[]'::json),
                    'triggers', COALESCE((SELECT json_agg(json_build_object('trigger_name',tri.trigger_name,'trigger_definition',tri.trigger_definition,'trigger_enabled_state',tri.trigger_enabled_state)) FROM triggers_info tri WHERE tri.table_oid = ti.table_oid), '[]'::json)
                ) AS object_details
            FROM table_info ti ORDER BY ti.schema_name, ti.table_name;
        parameters:
            - name: table_names
              type: string
              description: "Optional: A comma-separated list of table names. If empty, details for all tables in user-accessible schemas will be listed."

toolsets:
    alloydb-postgres-database-tools:
        - execute_sql
        - list_tables

================
File: internal/prebuiltconfigs/tools/bigquery.yaml
================
sources:
  bigquery-source:
    kind: "bigquery"
    project: ${BIGQUERY_PROJECT}

tools:
  execute_sql:
    kind: bigquery-execute-sql
    source: bigquery-source
    description: Use this tool to execute sql statement.

  get_dataset_info:
    kind: bigquery-get-dataset-info
    source: bigquery-source
    description: Use this tool to get dataset metadata.

  get_table_info:
    kind: bigquery-get-table-info
    source: bigquery-source
    description: Use this tool to get table metadata.

  list_dataset_ids:
    kind: bigquery-list-dataset-ids
    source: bigquery-source
    description: Use this tool to list datasets.

  list_table_ids:
    kind: bigquery-list-table-ids
    source: bigquery-source
    description: Use this tool to list tables.

toolsets:
  bigquery-database-tools:
    - execute_sql
    - get_dataset_info
    - get_table_info
    - list_dataset_ids
    - list_table_ids

================
File: internal/prebuiltconfigs/tools/cloud-sql-mssql.yaml
================
sources:
    cloudsql-mssql-source:
        kind: cloud-sql-mssql
        project: ${CLOUD_SQL_MSSQL_PROJECT}
        region: ${CLOUD_SQL_MSSQL_REGION}
        instance: ${CLOUD_SQL_MSSQL_INSTANCE}
        database: ${CLOUD_SQL_MSSQL_DATABASE}
        ipAddress: ${CLOUD_SQL_MSSQL_IP_ADDRESS}
        user: ${CLOUD_SQL_MSSQL_USER}
        password: ${CLOUD_SQL_MSSQL_PASSWORD}
tools:
    execute_sql:
        kind: mssql-execute-sql
        source: cloud-sql-mssql-source
        description: Use this tool to execute SQL.

    list_tables:
        kind: mssql-sql
        source: cloudsql-mssql-source
        description: "Lists detailed schema information (object type, columns, constraints, indexes, triggers, comment) as JSON for user-created tables (ordinary or partitioned). Filters by a comma-separated list of names. If names are omitted, lists all tables in user schemas."
        statement: |
            WITH table_info AS (
                SELECT
                    t.object_id AS table_oid,
                    s.name AS schema_name,
                    t.name AS table_name,
                    dp.name AS table_owner, -- Schema's owner principal name
                    CAST(ep.value AS NVARCHAR(MAX)) AS table_comment, -- Cast for JSON compatibility
                    CASE
                        WHEN EXISTS ( -- Check if the table has more than one partition for any of its indexes or heap
                            SELECT 1 FROM sys.partitions p
                            WHERE p.object_id = t.object_id AND p.partition_number > 1
                        ) THEN 'PARTITIONED TABLE'
                        ELSE 'TABLE'
                    END AS object_type_detail
                FROM
                    sys.tables t
                INNER JOIN
                    sys.schemas s ON t.schema_id = s.schema_id
                LEFT JOIN
                    sys.database_principals dp ON s.principal_id = dp.principal_id
                LEFT JOIN
                    sys.extended_properties ep ON ep.major_id = t.object_id AND ep.minor_id = 0 AND ep.class = 1 AND ep.name = 'MS_Description'
                WHERE
                    t.type = 'U' -- User tables
                    AND s.name NOT IN ('sys', 'INFORMATION_SCHEMA', 'guest', 'db_owner', 'db_accessadmin', 'db_backupoperator', 'db_datareader', 'db_datawriter', 'db_ddladmin', 'db_denydatareader', 'db_denydatawriter', 'db_securityadmin')
                    AND (@table_names IS NULL OR LTRIM(RTRIM(@table_names)) = '' OR t.name IN (SELECT LTRIM(RTRIM(value)) FROM STRING_SPLIT(@table_names, ',')))
            ),
            columns_info AS (
                SELECT
                    c.object_id AS table_oid,
                    c.name AS column_name,
                    CONCAT(
                        UPPER(TY.name), -- Base type name
                        CASE
                            WHEN TY.name IN ('char', 'varchar', 'nchar', 'nvarchar', 'binary', 'varbinary') THEN
                                CONCAT('(', IIF(c.max_length = -1, 'MAX', CAST(c.max_length / CASE WHEN TY.name IN ('nchar', 'nvarchar') THEN 2 ELSE 1 END AS VARCHAR(10))), ')')
                            WHEN TY.name IN ('decimal', 'numeric') THEN
                                CONCAT('(', c.precision, ',', c.scale, ')')
                            WHEN TY.name IN ('datetime2', 'datetimeoffset', 'time') THEN
                                CONCAT('(', c.scale, ')')
                            ELSE ''
                        END
                    ) AS data_type,
                    c.column_id AS column_ordinal_position,
                    IIF(c.is_nullable = 0, CAST(1 AS BIT), CAST(0 AS BIT)) AS is_not_nullable,
                    dc.definition AS column_default,
                    CAST(epc.value AS NVARCHAR(MAX)) AS column_comment
                FROM
                    sys.columns c
                JOIN
                    table_info ti ON c.object_id = ti.table_oid
                JOIN
                    sys.types TY ON c.user_type_id = TY.user_type_id AND TY.is_user_defined = 0 -- Ensure we get base types
                LEFT JOIN
                    sys.default_constraints dc ON c.object_id = dc.parent_object_id AND c.column_id = dc.parent_column_id
                LEFT JOIN
                    sys.extended_properties epc ON epc.major_id = c.object_id AND epc.minor_id = c.column_id AND epc.class = 1 AND epc.name = 'MS_Description'
            ),
            constraints_info AS (
                -- Primary Keys & Unique Constraints
                SELECT
                    kc.parent_object_id AS table_oid,
                    kc.name AS constraint_name,
                    REPLACE(kc.type_desc, '_CONSTRAINT', '') AS constraint_type, -- 'PRIMARY_KEY', 'UNIQUE'
                    STUFF((SELECT ', ' + col.name
                        FROM sys.index_columns ic
                        JOIN sys.columns col ON ic.object_id = col.object_id AND ic.column_id = col.column_id
                        WHERE ic.object_id = kc.parent_object_id AND ic.index_id = kc.unique_index_id
                        ORDER BY ic.key_ordinal
                        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '') AS constraint_columns,
                    NULL AS foreign_key_referenced_table,
                    NULL AS foreign_key_referenced_columns,
                    CASE kc.type
                        WHEN 'PK' THEN 'PRIMARY KEY (' + STUFF((SELECT ', ' + col.name FROM sys.index_columns ic JOIN sys.columns col ON ic.object_id = col.object_id AND ic.column_id = col.column_id WHERE ic.object_id = kc.parent_object_id AND ic.index_id = kc.unique_index_id ORDER BY ic.key_ordinal FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '') + ')'
                        WHEN 'UQ' THEN 'UNIQUE (' + STUFF((SELECT ', ' + col.name FROM sys.index_columns ic JOIN sys.columns col ON ic.object_id = col.object_id AND ic.column_id = col.column_id WHERE ic.object_id = kc.parent_object_id AND ic.index_id = kc.unique_index_id ORDER BY ic.key_ordinal FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '') + ')'
                    END AS constraint_definition
                FROM sys.key_constraints kc
                JOIN table_info ti ON kc.parent_object_id = ti.table_oid
                UNION ALL
                -- Foreign Keys
                SELECT
                    fk.parent_object_id AS table_oid,
                    fk.name AS constraint_name,
                    'FOREIGN KEY' AS constraint_type,
                    STUFF((SELECT ', ' + pc.name
                        FROM sys.foreign_key_columns fkc
                        JOIN sys.columns pc ON fkc.parent_object_id = pc.object_id AND fkc.parent_column_id = pc.column_id
                        WHERE fkc.constraint_object_id = fk.object_id
                        ORDER BY fkc.constraint_column_id
                        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '') AS constraint_columns,
                    SCHEMA_NAME(rt.schema_id) + '.' + OBJECT_NAME(fk.referenced_object_id) AS foreign_key_referenced_table,
                    STUFF((SELECT ', ' + rc.name
                        FROM sys.foreign_key_columns fkc
                        JOIN sys.columns rc ON fkc.referenced_object_id = rc.object_id AND fkc.referenced_column_id = rc.column_id
                        WHERE fkc.constraint_object_id = fk.object_id
                        ORDER BY fkc.constraint_column_id
                        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '') AS foreign_key_referenced_columns,
                    OBJECT_DEFINITION(fk.object_id) AS constraint_definition
                FROM sys.foreign_keys fk
                JOIN sys.tables rt ON fk.referenced_object_id = rt.object_id
                JOIN table_info ti ON fk.parent_object_id = ti.table_oid
                UNION ALL
                -- Check Constraints
                SELECT
                    cc.parent_object_id AS table_oid,
                    cc.name AS constraint_name,
                    'CHECK' AS constraint_type,
                    NULL AS constraint_columns, -- Definition includes column context
                    NULL AS foreign_key_referenced_table,
                    NULL AS foreign_key_referenced_columns,
                    cc.definition AS constraint_definition
                FROM sys.check_constraints cc
                JOIN table_info ti ON cc.parent_object_id = ti.table_oid
            ),
            indexes_info AS (
                SELECT
                    i.object_id AS table_oid,
                    i.name AS index_name,
                    i.type_desc AS index_method, -- CLUSTERED, NONCLUSTERED, XML, etc.
                    i.is_unique,
                    i.is_primary_key AS is_primary,
                    STUFF((SELECT ', ' + c.name
                        FROM sys.index_columns ic
                        JOIN sys.columns c ON i.object_id = c.object_id AND ic.column_id = c.column_id
                        WHERE ic.object_id = i.object_id AND ic.index_id = i.index_id AND ic.is_included_column = 0
                        ORDER BY ic.key_ordinal
                        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '') AS index_columns,
                    (
                        'COLUMNS: (' + ISNULL(STUFF((SELECT ', ' + c.name + CASE WHEN ic.is_descending_key = 1 THEN ' DESC' ELSE '' END
                                                FROM sys.index_columns ic
                                                JOIN sys.columns c ON i.object_id = c.object_id AND ic.column_id = c.column_id
                                                WHERE ic.object_id = i.object_id AND ic.index_id = i.index_id AND ic.is_included_column = 0
                                                ORDER BY ic.key_ordinal FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, ''), 'N/A') + ')' +
                        ISNULL(CHAR(13)+CHAR(10) + 'INCLUDE: (' + STUFF((SELECT ', ' + c.name
                                                FROM sys.index_columns ic
                                                JOIN sys.columns c ON i.object_id = c.object_id AND ic.column_id = c.column_id
                                                WHERE ic.object_id = i.object_id AND ic.index_id = i.index_id AND ic.is_included_column = 1
                                                ORDER BY ic.index_column_id FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '') + ')', '') +
                        ISNULL(CHAR(13)+CHAR(10) + 'FILTER: (' + i.filter_definition + ')', '')
                    ) AS index_definition_details
                FROM
                    sys.indexes i
                JOIN
                    table_info ti ON i.object_id = ti.table_oid
                WHERE i.type <> 0 -- Exclude Heaps
                AND i.name IS NOT NULL -- Exclude unnamed heap indexes; named indexes (PKs are often named) are preferred.
            ),
            triggers_info AS (
                SELECT
                    tr.parent_id AS table_oid,
                    tr.name AS trigger_name,
                    OBJECT_DEFINITION(tr.object_id) AS trigger_definition,
                    CASE tr.is_disabled WHEN 0 THEN 'ENABLED' ELSE 'DISABLED' END AS trigger_enabled_state
                FROM
                    sys.triggers tr
                JOIN
                    table_info ti ON tr.parent_id = ti.table_oid
                WHERE
                    tr.is_ms_shipped = 0
                    AND tr.parent_class_desc = 'OBJECT_OR_COLUMN' -- DML Triggers on tables/views
            )
            SELECT
                ti.schema_name,
                ti.table_name AS object_name,
                (
                    SELECT
                        ti.schema_name AS schema_name,
                        ti.table_name AS object_name,
                        ti.object_type_detail AS object_type,
                        ti.table_owner AS owner,
                        ti.table_comment AS comment,
                        JSON_QUERY(ISNULL((
                            SELECT
                                ci.column_name,
                                ci.data_type,
                                ci.column_ordinal_position,
                                ci.is_not_nullable,
                                ci.column_default,
                                ci.column_comment
                            FROM columns_info ci
                            WHERE ci.table_oid = ti.table_oid
                            ORDER BY ci.column_ordinal_position
                            FOR JSON PATH
                        ), '[]')) AS columns,
                        JSON_QUERY(ISNULL((
                            SELECT
                                cons.constraint_name,
                                cons.constraint_type,
                                cons.constraint_definition,
                                JSON_QUERY(
                                    CASE
                                        WHEN cons.constraint_columns IS NOT NULL AND LTRIM(RTRIM(cons.constraint_columns)) <> ''
                                        THEN '[' + (SELECT STRING_AGG('"' + LTRIM(RTRIM(value)) + '"', ',') FROM STRING_SPLIT(cons.constraint_columns, ',')) + ']'
                                        ELSE '[]'
                                    END
                                ) AS constraint_columns,
                                cons.foreign_key_referenced_table,
                                JSON_QUERY(
                                    CASE
                                        WHEN cons.foreign_key_referenced_columns IS NOT NULL AND LTRIM(RTRIM(cons.foreign_key_referenced_columns)) <> ''
                                        THEN '[' + (SELECT STRING_AGG('"' + LTRIM(RTRIM(value)) + '"', ',') FROM STRING_SPLIT(cons.foreign_key_referenced_columns, ',')) + ']'
                                        ELSE '[]'
                                    END
                                ) AS foreign_key_referenced_columns
                            FROM constraints_info cons
                            WHERE cons.table_oid = ti.table_oid
                            FOR JSON PATH
                        ), '[]')) AS constraints,
                        JSON_QUERY(ISNULL((
                            SELECT
                                ii.index_name,
                                ii.index_definition_details AS index_definition,
                                ii.is_unique,
                                ii.is_primary,
                                ii.index_method,
                                JSON_QUERY(
                                    CASE
                                        WHEN ii.index_columns IS NOT NULL AND LTRIM(RTRIM(ii.index_columns)) <> ''
                                        THEN '[' + (SELECT STRING_AGG('"' + LTRIM(RTRIM(value)) + '"', ',') FROM STRING_SPLIT(ii.index_columns, ',')) + ']'
                                        ELSE '[]'
                                    END
                                ) AS index_columns
                            FROM indexes_info ii
                            WHERE ii.table_oid = ti.table_oid
                            FOR JSON PATH
                        ), '[]')) AS indexes,
                        JSON_QUERY(ISNULL((
                            SELECT
                                tri.trigger_name,
                                tri.trigger_definition,
                                tri.trigger_enabled_state
                            FROM triggers_info tri
                            WHERE tri.table_oid = ti.table_oid
                            FOR JSON PATH
                        ), '[]')) AS triggers
                    FOR JSON PATH, WITHOUT_ARRAY_WRAPPER -- Creates a single JSON object for this table's details
                ) AS object_details
            FROM
                table_info ti
            ORDER BY
                ti.schema_name, ti.table_name;
        parameters:
            - name: table_names
              type: string
              description: "Optional: A comma-separated list of table names. If empty, details for all tables in user-accessible schemas will be listed."

toolsets:
    cloud-sql-mssql-database-tools:
        - execute_sql
        - list_tables

================
File: internal/prebuiltconfigs/tools/cloud-sql-mysql.yaml
================
sources:
  cloud-sql-mysql-source:
    kind: cloud-sql-mysql
    project: ${CLOUD_SQL_MYSQL_PROJECT}
    region: ${CLOUD_SQL_MYSQL_REGION}
    instance: ${CLOUD_SQL_MYSQL_INSTANCE}
    database: ${CLOUD_SQL_MYSQL_DATABASE}
    user: ${CLOUD_SQL_MYSQL_USER}
    password: ${CLOUD_SQL_MYSQL_PASSWORD}
tools:
  execute_sql:
    kind: mysql-execute-sql
    source: cloud-sql-mysql-source
    description: Use this tool to execute SQL.
  list_tables:
    kind: mysql-sql
    source: cloud-sql-mysql-source
    description: "Lists detailed schema information (object type, columns, constraints, indexes, triggers, comment) as JSON for user-created tables (ordinary or partitioned). Filters by a comma-separated list of names. If names are omitted, lists all tables in user schemas."
    statement: |
      SELECT
          T.TABLE_SCHEMA AS schema_name,
          T.TABLE_NAME AS object_name,
          CONVERT( JSON_OBJECT(
              'schema_name', T.TABLE_SCHEMA,
              'object_name', T.TABLE_NAME,
              'object_type', 'TABLE',
              'owner', (
                  SELECT
                      IFNULL(U.GRANTEE, 'N/A')
                  FROM
                      INFORMATION_SCHEMA.SCHEMA_PRIVILEGES U
                  WHERE
                      U.TABLE_SCHEMA = T.TABLE_SCHEMA
                  LIMIT 1
              ),
              'comment', IFNULL(T.TABLE_COMMENT, ''),
              'columns', (
                  SELECT
                      IFNULL(
                          JSON_ARRAYAGG(
                              JSON_OBJECT(
                                  'column_name', C.COLUMN_NAME,
                                  'data_type', C.COLUMN_TYPE,
                                  'ordinal_position', C.ORDINAL_POSITION,
                                  'is_not_nullable', IF(C.IS_NULLABLE = 'NO', TRUE, FALSE),
                                  'column_default', C.COLUMN_DEFAULT,
                                  'column_comment', IFNULL(C.COLUMN_COMMENT, '')
                              )
                          ),
                          JSON_ARRAY()
                      )
                  FROM
                      INFORMATION_SCHEMA.COLUMNS C
                  WHERE
                      C.TABLE_SCHEMA = T.TABLE_SCHEMA AND C.TABLE_NAME = T.TABLE_NAME
                  ORDER BY C.ORDINAL_POSITION
              ),
              'constraints', (
                  SELECT
                      IFNULL(
                          JSON_ARRAYAGG(
                              JSON_OBJECT(
                                  'constraint_name', TC.CONSTRAINT_NAME,
                                  'constraint_type',
                                      CASE TC.CONSTRAINT_TYPE
                                          WHEN 'PRIMARY KEY' THEN 'PRIMARY KEY'
                                          WHEN 'FOREIGN KEY' THEN 'FOREIGN KEY'
                                          WHEN 'UNIQUE' THEN 'UNIQUE'
                                          ELSE TC.CONSTRAINT_TYPE
                                      END,
                                  'constraint_definition', '',
                                  'constraint_columns', (
                                      SELECT
                                          IFNULL(JSON_ARRAYAGG(KCU.COLUMN_NAME), JSON_ARRAY())
                                      FROM
                                          INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU
                                      WHERE
                                          KCU.CONSTRAINT_SCHEMA = TC.CONSTRAINT_SCHEMA
                                          AND KCU.CONSTRAINT_NAME = TC.CONSTRAINT_NAME
                                          AND KCU.TABLE_NAME = TC.TABLE_NAME
                                      ORDER BY KCU.ORDINAL_POSITION
                                  ),
                                  'foreign_key_referenced_table', IF(TC.CONSTRAINT_TYPE = 'FOREIGN KEY', RC.REFERENCED_TABLE_NAME, NULL),
                                  'foreign_key_referenced_columns', IF(TC.CONSTRAINT_TYPE = 'FOREIGN KEY',
                                      (SELECT IFNULL(JSON_ARRAYAGG(FKCU.REFERENCED_COLUMN_NAME), JSON_ARRAY())
                                      FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE FKCU
                                      WHERE FKCU.CONSTRAINT_SCHEMA = TC.CONSTRAINT_SCHEMA
                                        AND FKCU.CONSTRAINT_NAME = TC.CONSTRAINT_NAME
                                        AND FKCU.TABLE_NAME = TC.TABLE_NAME
                                        AND FKCU.REFERENCED_TABLE_NAME IS NOT NULL
                                      ORDER BY FKCU.ORDINAL_POSITION),
                                      NULL
                                  )
                              )
                          ),
                          JSON_ARRAY()
                      )
                  FROM
                      INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
                  LEFT JOIN
                      INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC
                      ON TC.CONSTRAINT_SCHEMA = RC.CONSTRAINT_SCHEMA
                      AND TC.CONSTRAINT_NAME = RC.CONSTRAINT_NAME
                      AND TC.TABLE_NAME = RC.TABLE_NAME
                  WHERE
                      TC.TABLE_SCHEMA = T.TABLE_SCHEMA AND TC.TABLE_NAME = T.TABLE_NAME
              ),
              'indexes', (
                  SELECT
                      IFNULL(
                          JSON_ARRAYAGG(
                              JSON_OBJECT(
                                  'index_name', IndexData.INDEX_NAME,
                                  'is_unique', IF(IndexData.NON_UNIQUE = 0, TRUE, FALSE),
                                  'is_primary', IF(IndexData.INDEX_NAME = 'PRIMARY', TRUE, FALSE),
                                  'index_columns', IFNULL(IndexData.INDEX_COLUMNS_ARRAY, JSON_ARRAY())
                              )
                          ),
                          JSON_ARRAY()
                      )
                  FROM (
                      SELECT
                          S.TABLE_SCHEMA,
                          S.TABLE_NAME,
                          S.INDEX_NAME,
                          MIN(S.NON_UNIQUE) AS NON_UNIQUE, -- Aggregate NON_UNIQUE here to get unique status for the index
                          JSON_ARRAYAGG(S.COLUMN_NAME) AS INDEX_COLUMNS_ARRAY -- Aggregate columns into an array for this index
                      FROM
                          INFORMATION_SCHEMA.STATISTICS S
                      WHERE
                          S.TABLE_SCHEMA = T.TABLE_SCHEMA AND S.TABLE_NAME = T.TABLE_NAME
                      GROUP BY
                          S.TABLE_SCHEMA, S.TABLE_NAME, S.INDEX_NAME
                  ) AS IndexData
                  ORDER BY IndexData.INDEX_NAME
              ),
              'triggers', (
                  SELECT
                      IFNULL(
                          JSON_ARRAYAGG(
                              JSON_OBJECT(
                                  'trigger_name', TR.TRIGGER_NAME,
                                  'trigger_definition', TR.ACTION_STATEMENT
                              )
                          ),
                          JSON_ARRAY()
                      )
                  FROM
                      INFORMATION_SCHEMA.TRIGGERS TR
                  WHERE
                      TR.EVENT_OBJECT_SCHEMA = T.TABLE_SCHEMA AND TR.EVENT_OBJECT_TABLE = T.TABLE_NAME
                  ORDER BY TR.TRIGGER_NAME
              )
          ) USING utf8mb4) AS object_details
      FROM
          INFORMATION_SCHEMA.TABLES T
      CROSS JOIN (SELECT @table_names := ?) AS variables
      WHERE
          T.TABLE_SCHEMA NOT IN ('mysql', 'information_schema', 'performance_schema', 'sys')
          AND (NULLIF(TRIM(@table_names), '') IS NULL OR FIND_IN_SET(T.TABLE_NAME, @table_names))
          AND T.TABLE_TYPE = 'BASE TABLE'
      ORDER BY
          T.TABLE_SCHEMA, T.TABLE_NAME;
    parameters:
      - name: table_names
        type: string
        description: "Optional: A comma-separated list of table names. If empty, details for all tables in user-accessible schemas will be listed."
        default: ""
toolsets:
  cloud-sql-mysql-database-tools:
    - execute_sql
    - list_tables

================
File: internal/prebuiltconfigs/tools/cloud-sql-postgres.yaml
================
sources:
    cloudsql-pg-source:
        kind: cloud-sql-postgres
        project: ${CLOUD_SQL_POSTGRES_PROJECT}
        region: ${CLOUD_SQL_POSTGRES_REGION}
        instance: ${CLOUD_SQL_POSTGRES_INSTANCE}
        database: ${CLOUD_SQL_POSTGRES_DATABASE}
        user: ${CLOUD_SQL_POSTGRES_USER}
        password: ${CLOUD_SQL_POSTGRES_PASSWORD}

tools:
    execute_sql:
        kind: postgres-execute-sql
        source: cloudsql-pg-source
        description: Use this tool to execute sql.

    list_tables:
        kind: postgres-sql
        source: cloudsql-pg-source
        description: "Lists detailed schema information (object type, columns, constraints, indexes, triggers, owner, comment) as JSON for user-created tables (ordinary or partitioned). Filters by a comma-separated list of names. If names are omitted, lists all tables in user schemas."
        statement: |
            WITH desired_relkinds AS (
                SELECT ARRAY['r', 'p']::char[] AS kinds -- Always consider both 'TABLE' and 'PARTITIONED TABLE'
            ),
            table_info AS (
                SELECT
                    t.oid AS table_oid,
                    ns.nspname AS schema_name,
                    t.relname AS table_name,
                    pg_get_userbyid(t.relowner) AS table_owner,
                    obj_description(t.oid, 'pg_class') AS table_comment,
                    t.relkind AS object_kind
                FROM
                    pg_class t
                JOIN
                    pg_namespace ns ON ns.oid = t.relnamespace
                CROSS JOIN desired_relkinds dk
                WHERE
                    t.relkind = ANY(dk.kinds) -- Filter by selected table relkinds ('r', 'p')
                    AND (NULLIF(TRIM($1), '') IS NULL OR t.relname = ANY(string_to_array($1,','))) -- $1 is object_names
                    AND ns.nspname NOT IN ('pg_catalog', 'information_schema', 'pg_toast')
                    AND ns.nspname NOT LIKE 'pg_temp_%' AND ns.nspname NOT LIKE 'pg_toast_temp_%'
            ),
            columns_info AS (
                SELECT
                    att.attrelid AS table_oid, att.attname AS column_name, format_type(att.atttypid, att.atttypmod) AS data_type,
                    att.attnum AS column_ordinal_position, att.attnotnull AS is_not_nullable,
                    pg_get_expr(ad.adbin, ad.adrelid) AS column_default, col_description(att.attrelid, att.attnum) AS column_comment
                FROM pg_attribute att LEFT JOIN pg_attrdef ad ON att.attrelid = ad.adrelid AND att.attnum = ad.adnum
                JOIN table_info ti ON att.attrelid = ti.table_oid WHERE att.attnum > 0 AND NOT att.attisdropped
            ),
            constraints_info AS (
                SELECT
                    con.conrelid AS table_oid, con.conname AS constraint_name, pg_get_constraintdef(con.oid) AS constraint_definition,
                    CASE con.contype WHEN 'p' THEN 'PRIMARY KEY' WHEN 'f' THEN 'FOREIGN KEY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' ELSE con.contype::text END AS constraint_type,
                    (SELECT array_agg(att.attname ORDER BY u.attposition) FROM unnest(con.conkey) WITH ORDINALITY AS u(attnum, attposition) JOIN pg_attribute att ON att.attrelid = con.conrelid AND att.attnum = u.attnum) AS constraint_columns,
                    NULLIF(con.confrelid, 0)::regclass AS foreign_key_referenced_table,
                    (SELECT array_agg(att.attname ORDER BY u.attposition) FROM unnest(con.confkey) WITH ORDINALITY AS u(attnum, attposition) JOIN pg_attribute att ON att.attrelid = con.confrelid AND att.attnum = u.attnum WHERE con.contype = 'f') AS foreign_key_referenced_columns
                FROM pg_constraint con JOIN table_info ti ON con.conrelid = ti.table_oid
            ),
            indexes_info AS (
                SELECT
                    idx.indrelid AS table_oid, ic.relname AS index_name, pg_get_indexdef(idx.indexrelid) AS index_definition,
                    idx.indisunique AS is_unique, idx.indisprimary AS is_primary, am.amname AS index_method,
                    (SELECT array_agg(att.attname ORDER BY u.ord) FROM unnest(idx.indkey::int[]) WITH ORDINALITY AS u(colidx, ord) LEFT JOIN pg_attribute att ON att.attrelid = idx.indrelid AND att.attnum = u.colidx WHERE u.colidx <> 0) AS index_columns
                FROM pg_index idx JOIN pg_class ic ON ic.oid = idx.indexrelid JOIN pg_am am ON am.oid = ic.relam JOIN table_info ti ON idx.indrelid = ti.table_oid
            ),
            triggers_info AS (
                SELECT tg.tgrelid AS table_oid, tg.tgname AS trigger_name, pg_get_triggerdef(tg.oid) AS trigger_definition, tg.tgenabled AS trigger_enabled_state
                FROM pg_trigger tg JOIN table_info ti ON tg.tgrelid = ti.table_oid WHERE NOT tg.tgisinternal
            )
            SELECT
                ti.schema_name,
                ti.table_name AS object_name,
                json_build_object(
                    'schema_name', ti.schema_name,
                    'object_name', ti.table_name,
                    'object_type', CASE ti.object_kind
                                     WHEN 'r' THEN 'TABLE'
                                     WHEN 'p' THEN 'PARTITIONED TABLE'
                                     ELSE ti.object_kind::text -- Should not happen due to WHERE clause
                                   END,
                    'owner', ti.table_owner,
                    'comment', ti.table_comment,
                    'columns', COALESCE((SELECT json_agg(json_build_object('column_name',ci.column_name,'data_type',ci.data_type,'ordinal_position',ci.column_ordinal_position,'is_not_nullable',ci.is_not_nullable,'column_default',ci.column_default,'column_comment',ci.column_comment) ORDER BY ci.column_ordinal_position) FROM columns_info ci WHERE ci.table_oid = ti.table_oid), '[]'::json),
                    'constraints', COALESCE((SELECT json_agg(json_build_object('constraint_name',cons.constraint_name,'constraint_type',cons.constraint_type,'constraint_definition',cons.constraint_definition,'constraint_columns',cons.constraint_columns,'foreign_key_referenced_table',cons.foreign_key_referenced_table,'foreign_key_referenced_columns',cons.foreign_key_referenced_columns)) FROM constraints_info cons WHERE cons.table_oid = ti.table_oid), '[]'::json),
                    'indexes', COALESCE((SELECT json_agg(json_build_object('index_name',ii.index_name,'index_definition',ii.index_definition,'is_unique',ii.is_unique,'is_primary',ii.is_primary,'index_method',ii.index_method,'index_columns',ii.index_columns)) FROM indexes_info ii WHERE ii.table_oid = ti.table_oid), '[]'::json),
                    'triggers', COALESCE((SELECT json_agg(json_build_object('trigger_name',tri.trigger_name,'trigger_definition',tri.trigger_definition,'trigger_enabled_state',tri.trigger_enabled_state)) FROM triggers_info tri WHERE tri.table_oid = ti.table_oid), '[]'::json)
                ) AS object_details
            FROM table_info ti ORDER BY ti.schema_name, ti.table_name;
        parameters:
            - name: table_names
              type: string
              description: "Optional: A comma-separated list of table names. If empty, details for all tables in user-accessible schemas will be listed."

toolsets:
    cloud-sql-postgres-database-tools:
        - execute_sql
        - list_tables

================
File: internal/prebuiltconfigs/tools/firestore.yaml
================
sources:
  firestore-source:
    kind: firestore
    project: ${FIRESTORE_PROJECT}
    database: ${FIRESTORE_DATABASE}  # Optional, defaults to "(default)" if not specified

tools:
  firestore-get-documents:
    kind: firestore-get-documents
    source: firestore-source
    description: Gets multiple documents from Firestore by their paths
  firestore-list-collections:
    kind: firestore-list-collections
    source: firestore-source
    description: List Firestore collections for a given parent path
  firestore-delete-documents:
    kind: firestore-delete-documents
    source: firestore-source
    description: Delete multiple documents from Firestore
  firestore-query-collection:
    kind: firestore-query-collection
    source: firestore-source
    description: | 
      Retrieves one or more Firestore documents from a collection in a database in the current project by a collection with a full document path. 
      Use this if you know the exact path of a collection and the filtering clause you would like for the document.
  firestore-get-rules:
    kind: firestore-get-rules
    source: firestore-source
    description: Retrieves the active Firestore security rules for the current project
  firestore-validate-rules:
    kind: firestore-validate-rules
    source: firestore-source
    description: Checks the provided Firestore Rules source for syntax and validation errors. Provide the source code to validate.

toolsets:
  firestore-database-tools:
    - firestore-get-documents
    - firestore-list-collections
    - firestore-delete-documents
    - firestore-query-collection
    - firestore-get-rules
    - firestore-validate-rules

================
File: internal/prebuiltconfigs/tools/postgres.yaml
================
sources:
    postgresql-source:
        kind: postgres
        host: ${POSTGRES_HOST}
        port: ${POSTGRES_PORT}
        database: ${POSTGRES_DATABASE}
        user: ${POSTGRES_USER}
        password: ${POSTGRES_PASSWORD}

tools:
    execute_sql:
        kind: postgres-execute-sql
        source: postgresql-source
        description: Use this tool to execute SQL.

    list_tables:
        kind: postgres-sql
        source: postgresql-source
        description: "Lists detailed schema information (object type, columns, constraints, indexes, triggers, owner, comment) as JSON for user-created tables (ordinary or partitioned). Filters by a comma-separated list of names. If names are omitted, lists all tables in user schemas."
        statement: |
            WITH desired_relkinds AS (
                SELECT ARRAY['r', 'p']::char[] AS kinds -- Always consider both 'TABLE' and 'PARTITIONED TABLE'
            ),
            table_info AS (
                SELECT
                    t.oid AS table_oid,
                    ns.nspname AS schema_name,
                    t.relname AS table_name,
                    pg_get_userbyid(t.relowner) AS table_owner,
                    obj_description(t.oid, 'pg_class') AS table_comment,
                    t.relkind AS object_kind
                FROM
                    pg_class t
                JOIN
                    pg_namespace ns ON ns.oid = t.relnamespace
                CROSS JOIN desired_relkinds dk
                WHERE
                    t.relkind = ANY(dk.kinds) -- Filter by selected table relkinds ('r', 'p')
                    AND (NULLIF(TRIM($1), '') IS NULL OR t.relname = ANY(string_to_array($1,','))) -- $1 is object_names
                    AND ns.nspname NOT IN ('pg_catalog', 'information_schema', 'pg_toast')
                    AND ns.nspname NOT LIKE 'pg_temp_%' AND ns.nspname NOT LIKE 'pg_toast_temp_%'
            ),
            columns_info AS (
                SELECT
                    att.attrelid AS table_oid, att.attname AS column_name, format_type(att.atttypid, att.atttypmod) AS data_type,
                    att.attnum AS column_ordinal_position, att.attnotnull AS is_not_nullable,
                    pg_get_expr(ad.adbin, ad.adrelid) AS column_default, col_description(att.attrelid, att.attnum) AS column_comment
                FROM pg_attribute att LEFT JOIN pg_attrdef ad ON att.attrelid = ad.adrelid AND att.attnum = ad.adnum
                JOIN table_info ti ON att.attrelid = ti.table_oid WHERE att.attnum > 0 AND NOT att.attisdropped
            ),
            constraints_info AS (
                SELECT
                    con.conrelid AS table_oid, con.conname AS constraint_name, pg_get_constraintdef(con.oid) AS constraint_definition,
                    CASE con.contype WHEN 'p' THEN 'PRIMARY KEY' WHEN 'f' THEN 'FOREIGN KEY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' ELSE con.contype::text END AS constraint_type,
                    (SELECT array_agg(att.attname ORDER BY u.attposition) FROM unnest(con.conkey) WITH ORDINALITY AS u(attnum, attposition) JOIN pg_attribute att ON att.attrelid = con.conrelid AND att.attnum = u.attnum) AS constraint_columns,
                    NULLIF(con.confrelid, 0)::regclass AS foreign_key_referenced_table,
                    (SELECT array_agg(att.attname ORDER BY u.attposition) FROM unnest(con.confkey) WITH ORDINALITY AS u(attnum, attposition) JOIN pg_attribute att ON att.attrelid = con.confrelid AND att.attnum = u.attnum WHERE con.contype = 'f') AS foreign_key_referenced_columns
                FROM pg_constraint con JOIN table_info ti ON con.conrelid = ti.table_oid
            ),
            indexes_info AS (
                SELECT
                    idx.indrelid AS table_oid, ic.relname AS index_name, pg_get_indexdef(idx.indexrelid) AS index_definition,
                    idx.indisunique AS is_unique, idx.indisprimary AS is_primary, am.amname AS index_method,
                    (SELECT array_agg(att.attname ORDER BY u.ord) FROM unnest(idx.indkey::int[]) WITH ORDINALITY AS u(colidx, ord) LEFT JOIN pg_attribute att ON att.attrelid = idx.indrelid AND att.attnum = u.colidx WHERE u.colidx <> 0) AS index_columns
                FROM pg_index idx JOIN pg_class ic ON ic.oid = idx.indexrelid JOIN pg_am am ON am.oid = ic.relam JOIN table_info ti ON idx.indrelid = ti.table_oid
            ),
            triggers_info AS (
                SELECT tg.tgrelid AS table_oid, tg.tgname AS trigger_name, pg_get_triggerdef(tg.oid) AS trigger_definition, tg.tgenabled AS trigger_enabled_state
                FROM pg_trigger tg JOIN table_info ti ON tg.tgrelid = ti.table_oid WHERE NOT tg.tgisinternal
            )
            SELECT
                ti.schema_name,
                ti.table_name AS object_name,
                json_build_object(
                    'schema_name', ti.schema_name,
                    'object_name', ti.table_name,
                    'object_type', CASE ti.object_kind
                                     WHEN 'r' THEN 'TABLE'
                                     WHEN 'p' THEN 'PARTITIONED TABLE'
                                     ELSE ti.object_kind::text -- Should not happen due to WHERE clause
                                   END,
                    'owner', ti.table_owner,
                    'comment', ti.table_comment,
                    'columns', COALESCE((SELECT json_agg(json_build_object('column_name',ci.column_name,'data_type',ci.data_type,'ordinal_position',ci.column_ordinal_position,'is_not_nullable',ci.is_not_nullable,'column_default',ci.column_default,'column_comment',ci.column_comment) ORDER BY ci.column_ordinal_position) FROM columns_info ci WHERE ci.table_oid = ti.table_oid), '[]'::json),
                    'constraints', COALESCE((SELECT json_agg(json_build_object('constraint_name',cons.constraint_name,'constraint_type',cons.constraint_type,'constraint_definition',cons.constraint_definition,'constraint_columns',cons.constraint_columns,'foreign_key_referenced_table',cons.foreign_key_referenced_table,'foreign_key_referenced_columns',cons.foreign_key_referenced_columns)) FROM constraints_info cons WHERE cons.table_oid = ti.table_oid), '[]'::json),
                    'indexes', COALESCE((SELECT json_agg(json_build_object('index_name',ii.index_name,'index_definition',ii.index_definition,'is_unique',ii.is_unique,'is_primary',ii.is_primary,'index_method',ii.index_method,'index_columns',ii.index_columns)) FROM indexes_info ii WHERE ii.table_oid = ti.table_oid), '[]'::json),
                    'triggers', COALESCE((SELECT json_agg(json_build_object('trigger_name',tri.trigger_name,'trigger_definition',tri.trigger_definition,'trigger_enabled_state',tri.trigger_enabled_state)) FROM triggers_info tri WHERE tri.table_oid = ti.table_oid), '[]'::json)
                ) AS object_details
            FROM table_info ti ORDER BY ti.schema_name, ti.table_name;
        parameters:
            - name: table_names
              type: string
              description: "Optional: A comma-separated list of table names. If empty, details for all tables in user-accessible schemas will be listed."

toolsets:
    postgres-database-tools:
        - execute_sql
        - list_tables

================
File: internal/prebuiltconfigs/tools/spanner-postgres.yaml
================
sources:
  spanner-source:
    kind: "spanner"
    project: ${SPANNER_PROJECT}
    instance: ${SPANNER_INSTANCE}
    database: ${SPANNER_DATABASE}
    dialect: "postgresql"

tools:
  execute_sql:
    kind: spanner-execute-sql
    source: spanner-source
    description: Use this tool to execute DML SQL. Please use the PostgreSQL interface for Spanner.

  execute_sql_dql:
    kind: spanner-execute-sql
    source: spanner-source
    description: Use this tool to execute DQL SQL. Please use the PostgreSQL interface for Spanner.
    readOnly: true

  list_tables:
    kind: spanner-sql
    source: spanner-source
    readOnly: true
    description: "Lists detailed schema information (object type, columns, constraints, indexes, triggers, owner, comment) as JSON for user-created tables (ordinary or partitioned). Filters by a comma-separated list of names. If names are omitted, lists all tables in user schemas."
    statement: |
      WITH table_info_cte AS (
          SELECT
            T.TABLE_SCHEMA,
            T.TABLE_NAME,
            T.TABLE_TYPE,
            T.PARENT_TABLE_NAME,
            T.ON_DELETE_ACTION
          FROM INFORMATION_SCHEMA.TABLES AS T
          WHERE
            T.TABLE_SCHEMA = 'public'
            AND T.TABLE_TYPE = 'BASE TABLE'
            AND (
            NULLIF(TRIM($1), '') IS NULL OR
            T.TABLE_NAME IN (
              SELECT table_name
              FROM UNNEST(regexp_split_to_array($1, '\s*,\s*')) AS table_name)
            )
        ),

        columns_info_cte AS (
          SELECT
            C.TABLE_SCHEMA,
            C.TABLE_NAME,
            ARRAY_AGG(
              CONCAT(
                '{',
                '"column_name":"', COALESCE(REPLACE(C.COLUMN_NAME, '"', '\"'), ''), '",',
                '"data_type":"', COALESCE(REPLACE(C.SPANNER_TYPE, '"', '\"'), ''), '",',
                '"ordinal_position":', C.ORDINAL_POSITION::TEXT, ',',
                '"is_not_nullable":', CASE WHEN C.IS_NULLABLE = 'NO' THEN 'true' ELSE 'false' END, ',',
                '"column_default":', CASE WHEN C.COLUMN_DEFAULT IS NULL THEN 'null' ELSE CONCAT('"', REPLACE(C.COLUMN_DEFAULT::text, '"', '\"'), '"') END,
                '}'
              ) ORDER BY C.ORDINAL_POSITION
            ) AS columns_json_array_elements
          FROM INFORMATION_SCHEMA.COLUMNS AS C
          WHERE C.TABLE_SCHEMA = 'public'
            AND EXISTS (SELECT 1 FROM table_info_cte TI WHERE C.TABLE_SCHEMA = TI.TABLE_SCHEMA AND C.TABLE_NAME = TI.TABLE_NAME)
          GROUP BY C.TABLE_SCHEMA, C.TABLE_NAME
        ),

        constraint_columns_agg_cte AS (
          SELECT
            CONSTRAINT_CATALOG,
            CONSTRAINT_SCHEMA,
            CONSTRAINT_NAME,
            ARRAY_AGG('"' || REPLACE(COLUMN_NAME, '"', '\"') || '"' ORDER BY ORDINAL_POSITION) AS column_names_json_list
          FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
          WHERE CONSTRAINT_SCHEMA = 'public'
          GROUP BY CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA, CONSTRAINT_NAME
        ),

        constraints_info_cte AS (
          SELECT
            TC.TABLE_SCHEMA,
            TC.TABLE_NAME,
            ARRAY_AGG(
              CONCAT(
                '{',
                '"constraint_name":"', COALESCE(REPLACE(TC.CONSTRAINT_NAME, '"', '\"'), ''), '",',
                '"constraint_type":"', COALESCE(REPLACE(TC.CONSTRAINT_TYPE, '"', '\"'), ''), '",',
                '"constraint_definition":',
                  CASE TC.CONSTRAINT_TYPE
                    WHEN 'CHECK' THEN CASE WHEN CC.CHECK_CLAUSE IS NULL THEN 'null' ELSE CONCAT('"', REPLACE(CC.CHECK_CLAUSE, '"', '\"'), '"') END
                    WHEN 'PRIMARY KEY' THEN CONCAT('"', 'PRIMARY KEY (', array_to_string(COALESCE(KeyCols.column_names_json_list, ARRAY[]::text[]), ', '), ')', '"')
                    WHEN 'UNIQUE' THEN CONCAT('"', 'UNIQUE (', array_to_string(COALESCE(KeyCols.column_names_json_list, ARRAY[]::text[]), ', '), ')', '"')
                    WHEN 'FOREIGN KEY' THEN CONCAT('"', 'FOREIGN KEY (', array_to_string(COALESCE(KeyCols.column_names_json_list, ARRAY[]::text[]), ', '), ') REFERENCES ',
                                            COALESCE(REPLACE(RefKeyTable.TABLE_NAME, '"', '\"'), ''),
                                            ' (', array_to_string(COALESCE(RefKeyCols.column_names_json_list, ARRAY[]::text[]), ', '), ')', '"')
                    ELSE 'null'
                  END, ',',
                '"constraint_columns":[', array_to_string(COALESCE(KeyCols.column_names_json_list, ARRAY[]::text[]), ','), '],',
                '"foreign_key_referenced_table":', CASE WHEN RefKeyTable.TABLE_NAME IS NULL THEN 'null' ELSE CONCAT('"', REPLACE(RefKeyTable.TABLE_NAME, '"', '\"'), '"') END, ',',
                '"foreign_key_referenced_columns":[', array_to_string(COALESCE(RefKeyCols.column_names_json_list, ARRAY[]::text[]), ','), ']',
                '}'
              ) ORDER BY TC.CONSTRAINT_NAME
            ) AS constraints_json_array_elements
          FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC
          LEFT JOIN INFORMATION_SCHEMA.CHECK_CONSTRAINTS AS CC
            ON TC.CONSTRAINT_CATALOG = CC.CONSTRAINT_CATALOG AND TC.CONSTRAINT_SCHEMA = CC.CONSTRAINT_SCHEMA AND TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
          LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RC
            ON TC.CONSTRAINT_CATALOG = RC.CONSTRAINT_CATALOG AND TC.CONSTRAINT_SCHEMA = RC.CONSTRAINT_SCHEMA AND TC.CONSTRAINT_NAME = RC.CONSTRAINT_NAME
          LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS RefConstraint
            ON RC.UNIQUE_CONSTRAINT_CATALOG = RefConstraint.CONSTRAINT_CATALOG AND RC.UNIQUE_CONSTRAINT_SCHEMA = RefConstraint.CONSTRAINT_SCHEMA AND RC.UNIQUE_CONSTRAINT_NAME = RefConstraint.CONSTRAINT_NAME
          LEFT JOIN INFORMATION_SCHEMA.TABLES AS RefKeyTable
            ON RefConstraint.TABLE_CATALOG = RefKeyTable.TABLE_CATALOG AND RefConstraint.TABLE_SCHEMA = RefKeyTable.TABLE_SCHEMA AND RefConstraint.TABLE_NAME = RefKeyTable.TABLE_NAME
          LEFT JOIN constraint_columns_agg_cte AS KeyCols
            ON TC.CONSTRAINT_CATALOG = KeyCols.CONSTRAINT_CATALOG AND TC.CONSTRAINT_SCHEMA = KeyCols.CONSTRAINT_SCHEMA AND TC.CONSTRAINT_NAME = KeyCols.CONSTRAINT_NAME
          LEFT JOIN constraint_columns_agg_cte AS RefKeyCols
            ON RC.UNIQUE_CONSTRAINT_CATALOG = RefKeyCols.CONSTRAINT_CATALOG AND RC.UNIQUE_CONSTRAINT_SCHEMA = RefKeyCols.CONSTRAINT_SCHEMA AND RC.UNIQUE_CONSTRAINT_NAME = RefKeyCols.CONSTRAINT_NAME AND TC.CONSTRAINT_TYPE = 'FOREIGN KEY'
          WHERE TC.TABLE_SCHEMA = 'public'
            AND EXISTS (SELECT 1 FROM table_info_cte TI WHERE TC.TABLE_SCHEMA = TI.TABLE_SCHEMA AND TC.TABLE_NAME = TI.TABLE_NAME)
          GROUP BY TC.TABLE_SCHEMA, TC.TABLE_NAME
        ),

        index_key_columns_agg_cte AS (
          SELECT
            TABLE_CATALOG,
            TABLE_SCHEMA,
            TABLE_NAME,
            INDEX_NAME,
            ARRAY_AGG(
              CONCAT(
                '{"column_name":"', COALESCE(REPLACE(COLUMN_NAME, '"', '\"'), ''), '",',
                '"ordering":"', COALESCE(REPLACE(COLUMN_ORDERING, '"', '\"'), ''), '"}'
              ) ORDER BY ORDINAL_POSITION
            ) AS key_column_json_details
          FROM INFORMATION_SCHEMA.INDEX_COLUMNS
          WHERE ORDINAL_POSITION IS NOT NULL
            AND TABLE_SCHEMA = 'public'
          GROUP BY TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, INDEX_NAME
        ),

        index_storing_columns_agg_cte AS (
          SELECT
            TABLE_CATALOG,
            TABLE_SCHEMA,
            TABLE_NAME,
            INDEX_NAME,
            ARRAY_AGG(CONCAT('"', REPLACE(COLUMN_NAME, '"', '\"'), '"') ORDER BY COLUMN_NAME) AS storing_column_json_names
          FROM INFORMATION_SCHEMA.INDEX_COLUMNS
          WHERE ORDINAL_POSITION IS NULL
            AND TABLE_SCHEMA = 'public'
          GROUP BY TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, INDEX_NAME
        ),

        indexes_info_cte AS (
          SELECT
            I.TABLE_SCHEMA,
            I.TABLE_NAME,
            ARRAY_AGG(
              CONCAT(
                '{',
                '"index_name":"', COALESCE(REPLACE(I.INDEX_NAME, '"', '\"'), ''), '",',
                '"index_type":"', COALESCE(REPLACE(I.INDEX_TYPE, '"', '\"'), ''), '",',
                '"is_unique":', CASE WHEN I.IS_UNIQUE = 'YES' THEN 'true' ELSE 'false' END, ',',
                '"is_null_filtered":', CASE WHEN I.IS_NULL_FILTERED = 'YES' THEN 'true' ELSE 'false' END, ',',
                '"interleaved_in_table":', CASE WHEN I.PARENT_TABLE_NAME IS NULL OR I.PARENT_TABLE_NAME = '' THEN 'null' ELSE CONCAT('"', REPLACE(I.PARENT_TABLE_NAME, '"', '\"'), '"') END, ',',
                '"index_key_columns":[', COALESCE(array_to_string(KeyIndexCols.key_column_json_details, ','), ''), '],',
                '"storing_columns":[', COALESCE(array_to_string(StoringIndexCols.storing_column_json_names, ','), ''), ']',
                '}'
              ) ORDER BY I.INDEX_NAME
            ) AS indexes_json_array_elements
          FROM INFORMATION_SCHEMA.INDEXES AS I
          LEFT JOIN index_key_columns_agg_cte AS KeyIndexCols
            ON I.TABLE_CATALOG = KeyIndexCols.TABLE_CATALOG AND I.TABLE_SCHEMA = KeyIndexCols.TABLE_SCHEMA AND I.TABLE_NAME = KeyIndexCols.TABLE_NAME AND I.INDEX_NAME = KeyIndexCols.INDEX_NAME
          LEFT JOIN index_storing_columns_agg_cte AS StoringIndexCols
            ON I.TABLE_CATALOG = StoringIndexCols.TABLE_CATALOG AND I.TABLE_SCHEMA = StoringIndexCols.TABLE_SCHEMA AND I.TABLE_NAME = StoringIndexCols.TABLE_NAME AND I.INDEX_NAME = StoringIndexCols.INDEX_NAME
          AND I.INDEX_TYPE IN ('LOCAL', 'GLOBAL')
          WHERE I.TABLE_SCHEMA = 'public'
            AND EXISTS (SELECT 1 FROM table_info_cte TI WHERE I.TABLE_SCHEMA = TI.TABLE_SCHEMA AND I.TABLE_NAME = TI.TABLE_NAME)
          GROUP BY I.TABLE_SCHEMA, I.TABLE_NAME
        )

      SELECT
        TI.TABLE_SCHEMA AS schema_name,
        TI.TABLE_NAME AS object_name,
        CONCAT(
          '{',
          '"schema_name":"', COALESCE(REPLACE(TI.TABLE_SCHEMA, '"', '\"'), ''), '",',
          '"object_name":"', COALESCE(REPLACE(TI.TABLE_NAME, '"', '\"'), ''), '",',
          '"object_type":"', COALESCE(REPLACE(TI.TABLE_TYPE, '"', '\"'), ''), '",',
          '"columns":[', COALESCE(array_to_string(CI.columns_json_array_elements, ','), ''), '],',
          '"constraints":[', COALESCE(array_to_string(CONSI.constraints_json_array_elements, ','), ''), '],',
          '"indexes":[', COALESCE(array_to_string(II.indexes_json_array_elements, ','), ''), ']',
          '}'
        ) AS object_details
      FROM table_info_cte AS TI
      LEFT JOIN columns_info_cte AS CI
        ON TI.TABLE_SCHEMA = CI.TABLE_SCHEMA AND TI.TABLE_NAME = CI.TABLE_NAME
      LEFT JOIN constraints_info_cte AS CONSI
        ON TI.TABLE_SCHEMA = CONSI.TABLE_SCHEMA AND TI.TABLE_NAME = CONSI.TABLE_NAME
      LEFT JOIN indexes_info_cte AS II
        ON TI.TABLE_SCHEMA = II.TABLE_SCHEMA AND TI.TABLE_NAME = II.TABLE_NAME
      ORDER BY TI.TABLE_SCHEMA, TI.TABLE_NAME;

    parameters:
      - name: table_names
        type: string
        description: "Optional: A comma-separated list of table names. If empty, details for all tables in user-accessible schemas will be listed."
toolsets:
  spanner-postgres-database-tools:
    - execute_sql
    - execute_sql_dql
    - list_tables

================
File: internal/prebuiltconfigs/tools/spanner.yaml
================
sources:
  spanner-source:
    kind: spanner
    project: ${SPANNER_PROJECT}
    instance: ${SPANNER_INSTANCE}
    database: ${SPANNER_DATABASE}

tools:
  execute_sql:
    kind: spanner-execute-sql
    source: spanner-source
    description: Use this tool to execute DML SQL

  execute_sql_dql:
    kind: spanner-execute-sql
    source: spanner-source
    description: Use this tool to execute DQL SQL
    readOnly: true

  list_tables:
    kind: spanner-sql
    source: spanner-source
    readOnly: true
    description: "Lists detailed schema information (object type, columns, constraints, indexes) as JSON for user-created tables (ordinary or partitioned). Filters by a comma-separated list of names. If names are omitted, lists all tables in user schemas."
    statement: |
      WITH FilterTableNames AS (
        SELECT DISTINCT TRIM(name) AS TABLE_NAME
        FROM UNNEST(IF(@table_names = '' OR @table_names IS NULL, ['%'], SPLIT(@table_names, ','))) AS name
      ),

      -- 1. Table Information
      table_info_cte AS (
        SELECT
          T.TABLE_SCHEMA,
          T.TABLE_NAME,
          T.TABLE_TYPE,
          T.PARENT_TABLE_NAME, -- For interleaved tables
          T.ON_DELETE_ACTION -- For interleaved tables
        FROM INFORMATION_SCHEMA.TABLES AS T
        WHERE
          T.TABLE_SCHEMA = ''
          AND T.TABLE_TYPE = 'BASE TABLE'
          AND (EXISTS (SELECT 1 FROM FilterTableNames WHERE FilterTableNames.TABLE_NAME = '%') OR T.TABLE_NAME IN (SELECT TABLE_NAME FROM FilterTableNames))
      ),

      -- 2. Column Information (with JSON string for each column)
      columns_info_cte AS (
        SELECT
          C.TABLE_SCHEMA,
          C.TABLE_NAME,
          ARRAY_AGG(
            CONCAT(
              '{',
              '"column_name":"', IFNULL(C.COLUMN_NAME, ''), '",',
              '"data_type":"', IFNULL(C.SPANNER_TYPE, ''), '",',
              '"ordinal_position":', CAST(C.ORDINAL_POSITION AS STRING), ',',
              '"is_not_nullable":', IF(C.IS_NULLABLE = 'NO', 'true', 'false'), ',',
              '"column_default":', IF(C.COLUMN_DEFAULT IS NULL, 'null', CONCAT('"', C.COLUMN_DEFAULT, '"')),
              '}'
            ) ORDER BY C.ORDINAL_POSITION
          ) AS columns_json_array_elements
        FROM INFORMATION_SCHEMA.COLUMNS AS C
        WHERE EXISTS (SELECT 1 FROM table_info_cte TI WHERE C.TABLE_SCHEMA = TI.TABLE_SCHEMA AND C.TABLE_NAME = TI.TABLE_NAME)
        GROUP BY C.TABLE_SCHEMA, C.TABLE_NAME
      ),

      -- Helper CTE for aggregating constraint columns
      constraint_columns_agg_cte AS (
        SELECT
          CONSTRAINT_CATALOG,
          CONSTRAINT_SCHEMA,
          CONSTRAINT_NAME,
          ARRAY_AGG(CONCAT('"', COLUMN_NAME, '"') ORDER BY ORDINAL_POSITION) AS column_names_json_list
        FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
        GROUP BY CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA, CONSTRAINT_NAME
      ),

      -- 3. Constraint Information (with JSON string for each constraint)
      constraints_info_cte AS (
        SELECT
          TC.TABLE_SCHEMA,
          TC.TABLE_NAME,
          ARRAY_AGG(
            CONCAT(
              '{',
              '"constraint_name":"', IFNULL(TC.CONSTRAINT_NAME, ''), '",',
              '"constraint_type":"', IFNULL(TC.CONSTRAINT_TYPE, ''), '",',
              '"constraint_definition":',
                CASE TC.CONSTRAINT_TYPE
                  WHEN 'CHECK' THEN IF(CC.CHECK_CLAUSE IS NULL, 'null', CONCAT('"', CC.CHECK_CLAUSE, '"'))
                  WHEN 'PRIMARY KEY' THEN CONCAT('"', 'PRIMARY KEY (', ARRAY_TO_STRING(COALESCE(KeyCols.column_names_json_list, []), ', '), ')', '"')
                  WHEN 'UNIQUE' THEN CONCAT('"', 'UNIQUE (', ARRAY_TO_STRING(COALESCE(KeyCols.column_names_json_list, []), ', '), ')', '"')
                  WHEN 'FOREIGN KEY' THEN CONCAT('"', 'FOREIGN KEY (', ARRAY_TO_STRING(COALESCE(KeyCols.column_names_json_list, []), ', '), ') REFERENCES ',
                                          IFNULL(RefKeyTable.TABLE_NAME, ''),
                                          ' (', ARRAY_TO_STRING(COALESCE(RefKeyCols.column_names_json_list, []), ', '), ')', '"')
                  ELSE 'null'
                END, ',',
              '"constraint_columns":[', ARRAY_TO_STRING(COALESCE(KeyCols.column_names_json_list, []), ','), '],',
              '"foreign_key_referenced_table":', IF(RefKeyTable.TABLE_NAME IS NULL, 'null', CONCAT('"', RefKeyTable.TABLE_NAME, '"')), ',',
              '"foreign_key_referenced_columns":[', ARRAY_TO_STRING(COALESCE(RefKeyCols.column_names_json_list, []), ','), ']',
              '}'
            ) ORDER BY TC.CONSTRAINT_NAME
          ) AS constraints_json_array_elements
        FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC
        LEFT JOIN INFORMATION_SCHEMA.CHECK_CONSTRAINTS AS CC
          ON TC.CONSTRAINT_CATALOG = CC.CONSTRAINT_CATALOG AND TC.CONSTRAINT_SCHEMA = CC.CONSTRAINT_SCHEMA AND TC.CONSTRAINT_NAME = CC.CONSTRAINT_NAME
        LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RC
          ON TC.CONSTRAINT_CATALOG = RC.CONSTRAINT_CATALOG AND TC.CONSTRAINT_SCHEMA = RC.CONSTRAINT_SCHEMA AND TC.CONSTRAINT_NAME = RC.CONSTRAINT_NAME
        LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS RefConstraint
          ON RC.UNIQUE_CONSTRAINT_CATALOG = RefConstraint.CONSTRAINT_CATALOG AND RC.UNIQUE_CONSTRAINT_SCHEMA = RefConstraint.CONSTRAINT_SCHEMA AND RC.UNIQUE_CONSTRAINT_NAME = RefConstraint.CONSTRAINT_NAME
        LEFT JOIN INFORMATION_SCHEMA.TABLES AS RefKeyTable
          ON RefConstraint.TABLE_CATALOG = RefKeyTable.TABLE_CATALOG AND RefConstraint.TABLE_SCHEMA = RefKeyTable.TABLE_SCHEMA AND RefConstraint.TABLE_NAME = RefKeyTable.TABLE_NAME
        LEFT JOIN constraint_columns_agg_cte AS KeyCols
          ON TC.CONSTRAINT_CATALOG = KeyCols.CONSTRAINT_CATALOG AND TC.CONSTRAINT_SCHEMA = KeyCols.CONSTRAINT_SCHEMA AND TC.CONSTRAINT_NAME = KeyCols.CONSTRAINT_NAME
        LEFT JOIN constraint_columns_agg_cte AS RefKeyCols
          ON RC.UNIQUE_CONSTRAINT_CATALOG = RefKeyCols.CONSTRAINT_CATALOG AND RC.UNIQUE_CONSTRAINT_SCHEMA = RefKeyCols.CONSTRAINT_SCHEMA AND RC.UNIQUE_CONSTRAINT_NAME = RefKeyCols.CONSTRAINT_NAME AND TC.CONSTRAINT_TYPE = 'FOREIGN KEY'
        WHERE EXISTS (SELECT 1 FROM table_info_cte TI WHERE TC.TABLE_SCHEMA = TI.TABLE_SCHEMA AND TC.TABLE_NAME = TI.TABLE_NAME)
        GROUP BY TC.TABLE_SCHEMA, TC.TABLE_NAME
      ),

      -- Helper CTE for aggregating index key columns (as JSON strings)
      index_key_columns_agg_cte AS (
        SELECT
          TABLE_CATALOG,
          TABLE_SCHEMA,
          TABLE_NAME,
          INDEX_NAME,
          ARRAY_AGG(
            CONCAT(
              '{"column_name":"', IFNULL(COLUMN_NAME, ''), '",',
              '"ordering":"', IFNULL(COLUMN_ORDERING, ''), '"}'
            ) ORDER BY ORDINAL_POSITION
          ) AS key_column_json_details
        FROM INFORMATION_SCHEMA.INDEX_COLUMNS
        WHERE ORDINAL_POSITION IS NOT NULL -- Key columns
        GROUP BY TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, INDEX_NAME
      ),

      -- Helper CTE for aggregating index storing columns (as JSON strings)
      index_storing_columns_agg_cte AS (
        SELECT
          TABLE_CATALOG,
          TABLE_SCHEMA,
          TABLE_NAME,
          INDEX_NAME,
          ARRAY_AGG(CONCAT('"', COLUMN_NAME, '"') ORDER BY COLUMN_NAME) AS storing_column_json_names
        FROM INFORMATION_SCHEMA.INDEX_COLUMNS
        WHERE ORDINAL_POSITION IS NULL -- Storing columns
        GROUP BY TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, INDEX_NAME
      ),

      -- 4. Index Information (with JSON string for each index)
      indexes_info_cte AS (
        SELECT
          I.TABLE_SCHEMA,
          I.TABLE_NAME,
          ARRAY_AGG(
            CONCAT(
              '{',
              '"index_name":"', IFNULL(I.INDEX_NAME, ''), '",',
              '"index_type":"', IFNULL(I.INDEX_TYPE, ''), '",',
              '"is_unique":', IF(I.IS_UNIQUE, 'true', 'false'), ',',
              '"is_null_filtered":', IF(I.IS_NULL_FILTERED, 'true', 'false'), ',',
              '"interleaved_in_table":', IF(I.PARENT_TABLE_NAME IS NULL, 'null', CONCAT('"', I.PARENT_TABLE_NAME, '"')), ',',
              '"index_key_columns":[', ARRAY_TO_STRING(COALESCE(KeyIndexCols.key_column_json_details, []), ','), '],',
              '"storing_columns":[', ARRAY_TO_STRING(COALESCE(StoringIndexCols.storing_column_json_names, []), ','), ']',
              '}'
            ) ORDER BY I.INDEX_NAME
          ) AS indexes_json_array_elements
        FROM INFORMATION_SCHEMA.INDEXES AS I
        LEFT JOIN index_key_columns_agg_cte AS KeyIndexCols
          ON I.TABLE_CATALOG = KeyIndexCols.TABLE_CATALOG AND I.TABLE_SCHEMA = KeyIndexCols.TABLE_SCHEMA AND I.TABLE_NAME = KeyIndexCols.TABLE_NAME AND I.INDEX_NAME = KeyIndexCols.INDEX_NAME
        LEFT JOIN index_storing_columns_agg_cte AS StoringIndexCols
          ON I.TABLE_CATALOG = StoringIndexCols.TABLE_CATALOG AND I.TABLE_SCHEMA = StoringIndexCols.TABLE_SCHEMA AND I.TABLE_NAME = StoringIndexCols.TABLE_NAME AND I.INDEX_NAME = StoringIndexCols.INDEX_NAME AND I.INDEX_TYPE = 'INDEX'
        WHERE EXISTS (SELECT 1 FROM table_info_cte TI WHERE I.TABLE_SCHEMA = TI.TABLE_SCHEMA AND I.TABLE_NAME = TI.TABLE_NAME)
        GROUP BY I.TABLE_SCHEMA, I.TABLE_NAME
      )

      -- Final SELECT to build the JSON output
      SELECT
        TI.TABLE_SCHEMA AS schema_name,
        TI.TABLE_NAME AS object_name,
        CONCAT(
          '{',
          '"schema_name":"', IFNULL(TI.TABLE_SCHEMA, ''), '",',
          '"object_name":"', IFNULL(TI.TABLE_NAME, ''), '",',
          '"object_type":"', IFNULL(TI.TABLE_TYPE, ''), '",',
          '"columns":[', ARRAY_TO_STRING(COALESCE(CI.columns_json_array_elements, []), ','), '],',
          '"constraints":[', ARRAY_TO_STRING(COALESCE(CONSI.constraints_json_array_elements, []), ','), '],',
          '"indexes":[', ARRAY_TO_STRING(COALESCE(II.indexes_json_array_elements, []), ','), '],',
          '}'
        ) AS object_details
      FROM table_info_cte AS TI
      LEFT JOIN columns_info_cte AS CI
        ON TI.TABLE_SCHEMA = CI.TABLE_SCHEMA AND TI.TABLE_NAME = CI.TABLE_NAME
      LEFT JOIN constraints_info_cte AS CONSI
        ON TI.TABLE_SCHEMA = CONSI.TABLE_SCHEMA AND TI.TABLE_NAME = CONSI.TABLE_NAME
      LEFT JOIN indexes_info_cte AS II
        ON TI.TABLE_SCHEMA = II.TABLE_SCHEMA AND TI.TABLE_NAME = II.TABLE_NAME
      ORDER BY TI.TABLE_SCHEMA, TI.TABLE_NAME;

    parameters:
      - name: table_names
        type: string
        description: "Optional: A comma-separated list of table names. If empty, details for all tables in user-accessible schemas will be listed."

toolsets:
  spanner-database-tools:
    - execute_sql
    - execute_sql_dql
    - list_tables

================
File: internal/prebuiltconfigs/prebuiltconfigs_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package prebuiltconfigs
⋮----
import (
	"testing"

	"github.com/google/go-cmp/cmp"
)
⋮----
"testing"
⋮----
"github.com/google/go-cmp/cmp"
⋮----
func TestLoadPrebuiltToolYAMLs(t *testing.T)
⋮----
foundExpectedKeys[expectedKey] = true // Mark as found
⋮----
func TestGetPrebuiltTool(t *testing.T)
⋮----
func TestFailGetPrebuiltTool(t *testing.T)

================
File: internal/prebuiltconfigs/prebuiltconfigs.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package prebuiltconfigs
⋮----
import (
	"embed"
	"fmt"
	"path"
	"strings"
)
⋮----
"embed"
"fmt"
"path"
"strings"
⋮----
var (
	//go:embed tools/*.yaml
	prebuiltConfigsFS embed.FS

	// Map of sources to their prebuilt tools
	prebuiltToolYAMLs map[string][]byte
	// List of sources with prebuilt tools
	prebuiltToolsSources []string
)
⋮----
//go:embed tools/*.yaml
⋮----
// Map of sources to their prebuilt tools
⋮----
// List of sources with prebuilt tools
⋮----
func init()
⋮----
var err error
⋮----
// Get prebuilt tools for a source
func Get(prebuiltSourceConfig string) ([]byte, error)
⋮----
// Load all available pre built tools
func loadPrebuiltToolYAMLs() (map[string][]byte, []string, error)
⋮----
var sourceTypes []string

================
File: internal/server/mcp/jsonrpc/jsonrpc.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package jsonrpc
⋮----
// JSONRPC_VERSION is the version of JSON-RPC used by MCP.
const JSONRPC_VERSION = "2.0"
⋮----
// Standard JSON-RPC error codes
const (
	PARSE_ERROR      = -32700
	INVALID_REQUEST  = -32600
	METHOD_NOT_FOUND = -32601
	INVALID_PARAMS   = -32602
	INTERNAL_ERROR   = -32603
)
⋮----
// ProgressToken is used to associate progress notifications with the original request.
type ProgressToken interface{}
⋮----
// RequestId is a uniquely identifying ID for a request in JSON-RPC.
// It can be any JSON-serializable value, typically a number or string.
type RequestId interface{}
⋮----
// Request represents a bidirectional message with method and parameters expecting a response.
type Request struct {
	Method string `json:"method"`
	Params struct {
		Meta struct {
			// If specified, the caller is requesting out-of-band progress
			// notifications for this request (as represented by
			// notifications/progress). The value of this parameter is an
			// opaque token that will be attached to any subsequent
			// notifications. The receiver is not obligated to provide these
			// notifications.
			ProgressToken ProgressToken `json:"progressToken,omitempty"`
		} `json:"_meta,omitempty"`
⋮----
// If specified, the caller is requesting out-of-band progress
// notifications for this request (as represented by
// notifications/progress). The value of this parameter is an
// opaque token that will be attached to any subsequent
// notifications. The receiver is not obligated to provide these
// notifications.
⋮----
// JSONRPCRequest represents a request that expects a response.
type JSONRPCRequest struct {
	Jsonrpc string    `json:"jsonrpc"`
	Id      RequestId `json:"id"`
	Request
	Params any `json:"params,omitempty"`
}
⋮----
// Notification is a one-way message requiring no response.
type Notification struct {
	Method string `json:"method"`
	Params struct {
		Meta map[string]interface{} `json:"_meta,omitempty"`
⋮----
// JSONRPCNotification represents a notification which does not expect a response.
type JSONRPCNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Notification
}
⋮----
// Result represents a response for the request query.
type Result struct {
	// This result property is reserved by the protocol to allow clients and
	// servers to attach additional metadata to their responses.
	Meta map[string]interface{} `json:"_meta,omitempty"`
⋮----
// This result property is reserved by the protocol to allow clients and
// servers to attach additional metadata to their responses.
⋮----
// JSONRPCResponse represents a successful (non-error) response to a request.
type JSONRPCResponse struct {
	Jsonrpc string      `json:"jsonrpc"`
	Id      RequestId   `json:"id"`
	Result  interface{} `json:"result"`
⋮----
// Error represents the error content.
type Error struct {
	// The error type that occurred.
	Code int `json:"code"`
	// A short description of the error. The message SHOULD be limited
	// to a concise single sentence.
	Message string `json:"message"`
	// Additional information about the error. The value of this member
	// is defined by the sender (e.g. detailed error information, nested errors etc.).
	Data interface{} `json:"data,omitempty"`
⋮----
// The error type that occurred.
⋮----
// A short description of the error. The message SHOULD be limited
// to a concise single sentence.
⋮----
// Additional information about the error. The value of this member
// is defined by the sender (e.g. detailed error information, nested errors etc.).
⋮----
// JSONRPCError represents a non-successful (error) response to a request.
type JSONRPCError struct {
	Jsonrpc string    `json:"jsonrpc"`
	Id      RequestId `json:"id"`
	Error   Error     `json:"error"`
}
⋮----
// Generic baseMessage could either be a JSONRPCNotification or JSONRPCRequest
type BaseMessage struct {
	Jsonrpc string    `json:"jsonrpc"`
	Method  string    `json:"method"`
	Id      RequestId `json:"id,omitempty"`
}
⋮----
// NewError is the standard JSONRPC response sent back when an error has been encountered.
func NewError(id RequestId, code int, message string, data any) JSONRPCError

================
File: internal/server/mcp/util/lifecycle.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package util
⋮----
import "github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
⋮----
const (
	// SERVER_NAME is the server name used in Implementation.
	SERVER_NAME = "Toolbox"
	// methods that are supported
	INITIALIZE = "initialize"
)
⋮----
// SERVER_NAME is the server name used in Implementation.
⋮----
// methods that are supported
⋮----
/* Initialization */
⋮----
// Params to define MCP Client during initialize request.
type InitializeParams struct {
	// The latest version of the Model Context Protocol that the client supports.
	// The client MAY decide to support older versions as well.
	ProtocolVersion string             `json:"protocolVersion"`
	Capabilities    ClientCapabilities `json:"capabilities"`
	ClientInfo      Implementation     `json:"clientInfo"`
}
⋮----
// The latest version of the Model Context Protocol that the client supports.
// The client MAY decide to support older versions as well.
⋮----
// InitializeRequest is sent from the client to the server when it first
// connects, asking it to begin initialization.
type InitializeRequest struct {
	jsonrpc.Request
	Params InitializeParams `json:"params"`
}
⋮----
// InitializeResult is sent after receiving an initialize request from the
// client.
type InitializeResult struct {
	jsonrpc.Result
	// The version of the Model Context Protocol that the server wants to use.
	// This may not match the version that the client requested. If the client cannot
	// support this version, it MUST disconnect.
	ProtocolVersion string             `json:"protocolVersion"`
	Capabilities    ServerCapabilities `json:"capabilities"`
	ServerInfo      Implementation     `json:"serverInfo"`
	// Instructions describing how to use the server and its features.
	//
	// This can be used by clients to improve the LLM's understanding of
	// available tools, resources, etc. It can be thought of like a "hint" to the model.
	// For example, this information MAY be added to the system prompt.
	Instructions string `json:"instructions,omitempty"`
}
⋮----
// The version of the Model Context Protocol that the server wants to use.
// This may not match the version that the client requested. If the client cannot
// support this version, it MUST disconnect.
⋮----
// Instructions describing how to use the server and its features.
//
// This can be used by clients to improve the LLM's understanding of
// available tools, resources, etc. It can be thought of like a "hint" to the model.
// For example, this information MAY be added to the system prompt.
⋮----
// InitializedNotification is sent from the client to the server after
// initialization has finished.
type InitializedNotification struct {
	jsonrpc.Notification
}
⋮----
// ListChange represents whether the server supports notification for changes to the capabilities.
type ListChanged struct {
	ListChanged *bool `json:"listChanged,omitempty"`
}
⋮----
// ClientCapabilities represents capabilities a client may support. Known
// capabilities are defined here, in this schema, but this is not a closed set: any
// client can define its own, additional capabilities.
type ClientCapabilities struct {
	// Experimental, non-standard capabilities that the client supports.
	Experimental map[string]interface{} `json:"experimental,omitempty"`
⋮----
// Experimental, non-standard capabilities that the client supports.
⋮----
// Present if the client supports listing roots.
⋮----
// Present if the client supports sampling from an LLM.
⋮----
// ServerCapabilities represents capabilities that a server may support. Known
⋮----
// server can define its own, additional capabilities.
type ServerCapabilities struct {
	Tools *ListChanged `json:"tools,omitempty"`
}
⋮----
// Base interface for metadata with name (identifier) and title (display name) properties.
type BaseMetadata struct {
	// Intended for programmatic or logical use, but used as a display name in past specs
	// or fallback (if title isn't present).
	Name string `json:"name"`
	// Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
	//even by those unfamiliar with domain-specific terminology.
	//
	// If not provided, the name should be used for display (except for Tool,
	// where `annotations.title` should be given precedence over using `name`,
	// if present).
	Title string `json:"title,omitempty"`
}
⋮----
// Intended for programmatic or logical use, but used as a display name in past specs
// or fallback (if title isn't present).
⋮----
// Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
//even by those unfamiliar with domain-specific terminology.
⋮----
// If not provided, the name should be used for display (except for Tool,
// where `annotations.title` should be given precedence over using `name`,
// if present).
⋮----
// Implementation describes the name and version of an MCP implementation.
type Implementation struct {
	BaseMetadata
	Version string `json:"version"`
}

================
File: internal/server/mcp/v20241105/method.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package v20241105
⋮----
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"

	"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/util"
)
⋮----
"bytes"
"context"
"encoding/json"
"fmt"
⋮----
"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/util"
⋮----
// ProcessMethod returns a response for the request.
func ProcessMethod(ctx context.Context, id jsonrpc.RequestId, method string, toolset tools.Toolset, tools map[string]tools.Tool, body []byte) (any, error)
⋮----
func toolsListHandler(id jsonrpc.RequestId, toolset tools.Toolset, body []byte) (any, error)
⋮----
var req ListToolsRequest
⋮----
// toolsCallHandler generate a response for tools call.
func toolsCallHandler(ctx context.Context, id jsonrpc.RequestId, tools map[string]tools.Tool, body []byte) (any, error)
⋮----
// retrieve logger from context
⋮----
var req CallToolRequest
⋮----
// marshal arguments and decode it using decodeJSON instead to prevent loss between floats/int.
⋮----
var data map[string]any
⋮----
// claimsFromAuth maps the name of the authservice to the claims retrieved from it.
// Since MCP doesn't support auth, an empty map will be use every time.
⋮----
// run tool invocation and generate response.

================
File: internal/server/mcp/v20241105/types.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package v20241105
⋮----
import (
	"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
// SERVER_NAME is the server name used in Implementation.
const SERVER_NAME = "Toolbox"
⋮----
// PROTOCOL_VERSION is the version of the MCP protocol in this package.
const PROTOCOL_VERSION = "2024-11-05"
⋮----
// methods that are supported.
const (
	TOOLS_LIST = "tools/list"
	TOOLS_CALL = "tools/call"
)
⋮----
/* Empty result */
⋮----
// EmptyResult represents a response that indicates success but carries no data.
type EmptyResult jsonrpc.Result
⋮----
/* Pagination */
⋮----
// Cursor is an opaque token used to represent a cursor for pagination.
type Cursor string
⋮----
type PaginatedRequest struct {
	jsonrpc.Request
	Params struct {
		// An opaque token representing the current pagination position.
		// If provided, the server should return results starting after this cursor.
		Cursor Cursor `json:"cursor,omitempty"`
	} `json:"params,omitempty"`
⋮----
// An opaque token representing the current pagination position.
// If provided, the server should return results starting after this cursor.
⋮----
type PaginatedResult struct {
	jsonrpc.Result
	// An opaque token representing the pagination position after the last returned result.
	// If present, there may be more results available.
	NextCursor Cursor `json:"nextCursor,omitempty"`
}
⋮----
// An opaque token representing the pagination position after the last returned result.
// If present, there may be more results available.
⋮----
/* Tools */
⋮----
// Sent from the client to request a list of tools the server has.
type ListToolsRequest struct {
	PaginatedRequest
}
⋮----
// The server's response to a tools/list request from the client.
type ListToolsResult struct {
	PaginatedResult
	Tools []tools.McpManifest `json:"tools"`
}
⋮----
// Used by the client to invoke a tool provided by the server.
type CallToolRequest struct {
	jsonrpc.Request
	Params struct {
		Name      string         `json:"name"`
		Arguments map[string]any `json:"arguments,omitempty"`
	} `json:"params,omitempty"`
⋮----
// The sender or recipient of messages and data in a conversation.
type Role string
⋮----
const (
	RoleUser      Role = "user"
	RoleAssistant Role = "assistant"
)
⋮----
// Base for objects that include optional annotations for the client.
// The client can use annotations to inform how objects are used or displayed
type Annotated struct {
	Annotations *struct {
		// Describes who the intended customer of this object or data is.
		// It can include multiple entries to indicate content useful for multiple
		// audiences (e.g., `["user", "assistant"]`).
		Audience []Role `json:"audience,omitempty"`
		// Describes how important this data is for operating the server.
		//
		// A value of 1 means "most important," and indicates that the data is
		// effectively required, while 0 means "least important," and indicates that
		// the data is entirely optional.
		//
		// @TJS-type number
		// @minimum 0
		// @maximum 1
		Priority float64 `json:"priority,omitempty"`
	} `json:"annotations,omitempty"`
⋮----
// Describes who the intended customer of this object or data is.
// It can include multiple entries to indicate content useful for multiple
// audiences (e.g., `["user", "assistant"]`).
⋮----
// Describes how important this data is for operating the server.
//
// A value of 1 means "most important," and indicates that the data is
// effectively required, while 0 means "least important," and indicates that
// the data is entirely optional.
⋮----
// @TJS-type number
// @minimum 0
// @maximum 1
⋮----
// TextContent represents text provided to or from an LLM.
type TextContent struct {
	Annotated
	Type string `json:"type"`
	// The text content of the message.
	Text string `json:"text"`
}
⋮----
// The text content of the message.
⋮----
// The server's response to a tool call.
⋮----
// Any errors that originate from the tool SHOULD be reported inside the result
// object, with `isError` set to true, _not_ as an MCP protocol-level error
// response. Otherwise, the LLM would not be able to see that an error occurred
// and self-correct.
⋮----
// However, any errors in _finding_ the tool, an error indicating that the
// server does not support tool calls, or any other exceptional conditions,
// should be reported as an MCP error response.
type CallToolResult struct {
	jsonrpc.Result
	// Could be either a TextContent, ImageContent, or EmbeddedResources
	// For Toolbox, we will only be sending TextContent
	Content []TextContent `json:"content"`
	// Whether the tool call ended in an error.
	// If not set, this is assumed to be false (the call was successful).
	IsError bool `json:"isError,omitempty"`
}
⋮----
// Could be either a TextContent, ImageContent, or EmbeddedResources
// For Toolbox, we will only be sending TextContent
⋮----
// Whether the tool call ended in an error.
// If not set, this is assumed to be false (the call was successful).

================
File: internal/server/mcp/v20250326/method.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package v20250326
⋮----
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"

	"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/util"
)
⋮----
"bytes"
"context"
"encoding/json"
"fmt"
⋮----
"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/util"
⋮----
// ProcessMethod returns a response for the request.
func ProcessMethod(ctx context.Context, id jsonrpc.RequestId, method string, toolset tools.Toolset, tools map[string]tools.Tool, body []byte) (any, error)
⋮----
func toolsListHandler(id jsonrpc.RequestId, toolset tools.Toolset, body []byte) (any, error)
⋮----
var req ListToolsRequest
⋮----
// toolsCallHandler generate a response for tools call.
func toolsCallHandler(ctx context.Context, id jsonrpc.RequestId, tools map[string]tools.Tool, body []byte) (any, error)
⋮----
// retrieve logger from context
⋮----
var req CallToolRequest
⋮----
// marshal arguments and decode it using decodeJSON instead to prevent loss between floats/int.
⋮----
var data map[string]any
⋮----
// claimsFromAuth maps the name of the authservice to the claims retrieved from it.
// Since MCP doesn't support auth, an empty map will be use every time.
⋮----
// run tool invocation and generate response.

================
File: internal/server/mcp/v20250326/types.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package v20250326
⋮----
import (
	"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
// SERVER_NAME is the server name used in Implementation.
const SERVER_NAME = "Toolbox"
⋮----
// PROTOCOL_VERSION is the version of the MCP protocol in this package.
const PROTOCOL_VERSION = "2025-03-26"
⋮----
// methods that are supported.
const (
	TOOLS_LIST = "tools/list"
	TOOLS_CALL = "tools/call"
)
⋮----
/* Empty result */
⋮----
// EmptyResult represents a response that indicates success but carries no data.
type EmptyResult jsonrpc.Result
⋮----
/* Pagination */
⋮----
// Cursor is an opaque token used to represent a cursor for pagination.
type Cursor string
⋮----
type PaginatedRequest struct {
	jsonrpc.Request
	Params struct {
		// An opaque token representing the current pagination position.
		// If provided, the server should return results starting after this cursor.
		Cursor Cursor `json:"cursor,omitempty"`
	} `json:"params,omitempty"`
⋮----
// An opaque token representing the current pagination position.
// If provided, the server should return results starting after this cursor.
⋮----
type PaginatedResult struct {
	jsonrpc.Result
	// An opaque token representing the pagination position after the last returned result.
	// If present, there may be more results available.
	NextCursor Cursor `json:"nextCursor,omitempty"`
}
⋮----
// An opaque token representing the pagination position after the last returned result.
// If present, there may be more results available.
⋮----
/* Tools */
⋮----
// Sent from the client to request a list of tools the server has.
type ListToolsRequest struct {
	PaginatedRequest
}
⋮----
// The server's response to a tools/list request from the client.
type ListToolsResult struct {
	PaginatedResult
	Tools []tools.McpManifest `json:"tools"`
}
⋮----
// Used by the client to invoke a tool provided by the server.
type CallToolRequest struct {
	jsonrpc.Request
	Params struct {
		Name      string         `json:"name"`
		Arguments map[string]any `json:"arguments,omitempty"`
	} `json:"params,omitempty"`
⋮----
// The sender or recipient of messages and data in a conversation.
type Role string
⋮----
const (
	RoleUser      Role = "user"
	RoleAssistant Role = "assistant"
)
⋮----
// Base for objects that include optional annotations for the client.
// The client can use annotations to inform how objects are used or displayed
type Annotated struct {
	Annotations *struct {
		// Describes who the intended customer of this object or data is.
		// It can include multiple entries to indicate content useful for multiple
		// audiences (e.g., `["user", "assistant"]`).
		Audience []Role `json:"audience,omitempty"`
		// Describes how important this data is for operating the server.
		//
		// A value of 1 means "most important," and indicates that the data is
		// effectively required, while 0 means "least important," and indicates that
		// the data is entirely optional.
		//
		// @TJS-type number
		// @minimum 0
		// @maximum 1
		Priority float64 `json:"priority,omitempty"`
	} `json:"annotations,omitempty"`
⋮----
// Describes who the intended customer of this object or data is.
// It can include multiple entries to indicate content useful for multiple
// audiences (e.g., `["user", "assistant"]`).
⋮----
// Describes how important this data is for operating the server.
//
// A value of 1 means "most important," and indicates that the data is
// effectively required, while 0 means "least important," and indicates that
// the data is entirely optional.
⋮----
// @TJS-type number
// @minimum 0
// @maximum 1
⋮----
// TextContent represents text provided to or from an LLM.
type TextContent struct {
	Annotated
	Type string `json:"type"`
	// The text content of the message.
	Text string `json:"text"`
}
⋮----
// The text content of the message.
⋮----
// The server's response to a tool call.
⋮----
// Any errors that originate from the tool SHOULD be reported inside the result
// object, with `isError` set to true, _not_ as an MCP protocol-level error
// response. Otherwise, the LLM would not be able to see that an error occurred
// and self-correct.
⋮----
// However, any errors in _finding_ the tool, an error indicating that the
// server does not support tool calls, or any other exceptional conditions,
// should be reported as an MCP error response.
type CallToolResult struct {
	jsonrpc.Result
	// Could be either a TextContent, ImageContent, or EmbeddedResources
	// For Toolbox, we will only be sending TextContent
	Content []TextContent `json:"content"`
	// Whether the tool call ended in an error.
	// If not set, this is assumed to be false (the call was successful).
	IsError bool `json:"isError,omitempty"`
}
⋮----
// Could be either a TextContent, ImageContent, or EmbeddedResources
// For Toolbox, we will only be sending TextContent
⋮----
// Whether the tool call ended in an error.
// If not set, this is assumed to be false (the call was successful).
⋮----
// Additional properties describing a Tool to clients.
⋮----
// NOTE: all properties in ToolAnnotations are **hints**.
// They are not guaranteed to provide a faithful description of
// tool behavior (including descriptive properties like `title`).
⋮----
// Clients should never make tool use decisions based on ToolAnnotations
// received from untrusted servers.
type ToolAnnotations struct {
	// A human-readable title for the tool.
	Title string `json:"title,omitempty"`
	// If true, the tool does not modify its environment.
	// Default: false
	ReadOnlyHint bool `json:"readOnlyHint,omitempty"`
	// If true, the tool may perform destructive updates to its environment.
	// If false, the tool performs only additive updates.
	// (This property is meaningful only when `readOnlyHint == false`)
	// Default: true
	DestructiveHint bool `json:"destructiveHint,omitempty"`
	// If true, calling the tool repeatedly with the same arguments
	// will have no additional effect on the its environment.
	// (This property is meaningful only when `readOnlyHint == false`)
	// Default: false
	IdempotentHint bool `json:"idempotentHint,omitempty"`
	// If true, this tool may interact with an "open world" of external
	// entities. If false, the tool's domain of interaction is closed.
	// For example, the world of a web search tool is open, whereas that
	// of a memory tool is not.
	// Default: true
	OpenWorldHint bool `json:"openWorldHint,omitempty"`
}
⋮----
// A human-readable title for the tool.
⋮----
// If true, the tool does not modify its environment.
// Default: false
⋮----
// If true, the tool may perform destructive updates to its environment.
// If false, the tool performs only additive updates.
// (This property is meaningful only when `readOnlyHint == false`)
// Default: true
⋮----
// If true, calling the tool repeatedly with the same arguments
// will have no additional effect on the its environment.
⋮----
// If true, this tool may interact with an "open world" of external
// entities. If false, the tool's domain of interaction is closed.
// For example, the world of a web search tool is open, whereas that
// of a memory tool is not.

================
File: internal/server/mcp/v20250618/method.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package v20250618
⋮----
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"

	"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/util"
)
⋮----
"bytes"
"context"
"encoding/json"
"fmt"
⋮----
"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/util"
⋮----
// ProcessMethod returns a response for the request.
func ProcessMethod(ctx context.Context, id jsonrpc.RequestId, method string, toolset tools.Toolset, tools map[string]tools.Tool, body []byte) (any, error)
⋮----
func toolsListHandler(id jsonrpc.RequestId, toolset tools.Toolset, body []byte) (any, error)
⋮----
var req ListToolsRequest
⋮----
// toolsCallHandler generate a response for tools call.
func toolsCallHandler(ctx context.Context, id jsonrpc.RequestId, tools map[string]tools.Tool, body []byte) (any, error)
⋮----
// retrieve logger from context
⋮----
var req CallToolRequest
⋮----
// marshal arguments and decode it using decodeJSON instead to prevent loss between floats/int.
⋮----
var data map[string]any
⋮----
// claimsFromAuth maps the name of the authservice to the claims retrieved from it.
// Since MCP doesn't support auth, an empty map will be use every time.
⋮----
// run tool invocation and generate response.

================
File: internal/server/mcp/v20250618/types.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package v20250618
⋮----
import (
	"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
// SERVER_NAME is the server name used in Implementation.
const SERVER_NAME = "Toolbox"
⋮----
// PROTOCOL_VERSION is the version of the MCP protocol in this package.
const PROTOCOL_VERSION = "2025-06-18"
⋮----
// methods that are supported.
const (
	TOOLS_LIST = "tools/list"
	TOOLS_CALL = "tools/call"
)
⋮----
/* Empty result */
⋮----
// EmptyResult represents a response that indicates success but carries no data.
type EmptyResult jsonrpc.Result
⋮----
/* Pagination */
⋮----
// Cursor is an opaque token used to represent a cursor for pagination.
type Cursor string
⋮----
type PaginatedRequest struct {
	jsonrpc.Request
	Params struct {
		// An opaque token representing the current pagination position.
		// If provided, the server should return results starting after this cursor.
		Cursor Cursor `json:"cursor,omitempty"`
	} `json:"params,omitempty"`
⋮----
// An opaque token representing the current pagination position.
// If provided, the server should return results starting after this cursor.
⋮----
type PaginatedResult struct {
	jsonrpc.Result
	// An opaque token representing the pagination position after the last returned result.
	// If present, there may be more results available.
	NextCursor Cursor `json:"nextCursor,omitempty"`
}
⋮----
// An opaque token representing the pagination position after the last returned result.
// If present, there may be more results available.
⋮----
/* Tools */
⋮----
// Sent from the client to request a list of tools the server has.
type ListToolsRequest struct {
	PaginatedRequest
}
⋮----
// The server's response to a tools/list request from the client.
type ListToolsResult struct {
	PaginatedResult
	Tools []tools.McpManifest `json:"tools"`
}
⋮----
// Used by the client to invoke a tool provided by the server.
type CallToolRequest struct {
	jsonrpc.Request
	Params struct {
		Name      string         `json:"name"`
		Arguments map[string]any `json:"arguments,omitempty"`
	} `json:"params,omitempty"`
⋮----
// The sender or recipient of messages and data in a conversation.
type Role string
⋮----
const (
	RoleUser      Role = "user"
	RoleAssistant Role = "assistant"
)
⋮----
// Base for objects that include optional annotations for the client.
// The client can use annotations to inform how objects are used or displayed
type Annotated struct {
	Annotations *struct {
		// Describes who the intended customer of this object or data is.
		// It can include multiple entries to indicate content useful for multiple
		// audiences (e.g., `["user", "assistant"]`).
		Audience []Role `json:"audience,omitempty"`
		// Describes how important this data is for operating the server.
		//
		// A value of 1 means "most important," and indicates that the data is
		// effectively required, while 0 means "least important," and indicates that
		// the data is entirely optional.
		//
		// @TJS-type number
		// @minimum 0
		// @maximum 1
		Priority float64 `json:"priority,omitempty"`
	} `json:"annotations,omitempty"`
⋮----
// Describes who the intended customer of this object or data is.
// It can include multiple entries to indicate content useful for multiple
// audiences (e.g., `["user", "assistant"]`).
⋮----
// Describes how important this data is for operating the server.
//
// A value of 1 means "most important," and indicates that the data is
// effectively required, while 0 means "least important," and indicates that
// the data is entirely optional.
⋮----
// @TJS-type number
// @minimum 0
// @maximum 1
⋮----
// TextContent represents text provided to or from an LLM.
type TextContent struct {
	Annotated
	Type string `json:"type"`
	// The text content of the message.
	Text string `json:"text"`
}
⋮----
// The text content of the message.
⋮----
// The server's response to a tool call.
⋮----
// Any errors that originate from the tool SHOULD be reported inside the result
// object, with `isError` set to true, _not_ as an MCP protocol-level error
// response. Otherwise, the LLM would not be able to see that an error occurred
// and self-correct.
⋮----
// However, any errors in _finding_ the tool, an error indicating that the
// server does not support tool calls, or any other exceptional conditions,
// should be reported as an MCP error response.
type CallToolResult struct {
	jsonrpc.Result
	// Could be either a TextContent, ImageContent, or EmbeddedResources
	// For Toolbox, we will only be sending TextContent
	Content []TextContent `json:"content"`
	// Whether the tool call ended in an error.
	// If not set, this is assumed to be false (the call was successful).
	//
	// Any errors that originate from the tool SHOULD be reported inside the result
	// object, with `isError` set to true, _not_ as an MCP protocol-level error
	// response. Otherwise, the LLM would not be able to see that an error occurred
	// and self-correct.
	//
	// However, any errors in _finding_ the tool, an error indicating that the
	// server does not support tool calls, or any other exceptional conditions,
	// should be reported as an MCP error response.
	IsError bool `json:"isError,omitempty"`
	// An optional JSON object that represents the structured result of the tool call.
	StructuredContent map[string]any `json:"structuredContent,omitempty"`
}
⋮----
// Could be either a TextContent, ImageContent, or EmbeddedResources
// For Toolbox, we will only be sending TextContent
⋮----
// Whether the tool call ended in an error.
// If not set, this is assumed to be false (the call was successful).
//
// Any errors that originate from the tool SHOULD be reported inside the result
// object, with `isError` set to true, _not_ as an MCP protocol-level error
// response. Otherwise, the LLM would not be able to see that an error occurred
// and self-correct.
⋮----
// However, any errors in _finding_ the tool, an error indicating that the
// server does not support tool calls, or any other exceptional conditions,
// should be reported as an MCP error response.
⋮----
// An optional JSON object that represents the structured result of the tool call.
⋮----
// Additional properties describing a Tool to clients.
⋮----
// NOTE: all properties in ToolAnnotations are **hints**.
// They are not guaranteed to provide a faithful description of
// tool behavior (including descriptive properties like `title`).
⋮----
// Clients should never make tool use decisions based on ToolAnnotations
// received from untrusted servers.
type ToolAnnotations struct {
	// A human-readable title for the tool.
	Title string `json:"title,omitempty"`
	// If true, the tool does not modify its environment.
	// Default: false
	ReadOnlyHint bool `json:"readOnlyHint,omitempty"`
	// If true, the tool may perform destructive updates to its environment.
	// If false, the tool performs only additive updates.
	// (This property is meaningful only when `readOnlyHint == false`)
	// Default: true
	DestructiveHint bool `json:"destructiveHint,omitempty"`
	// If true, calling the tool repeatedly with the same arguments
	// will have no additional effect on the its environment.
	// (This property is meaningful only when `readOnlyHint == false`)
	// Default: false
	IdempotentHint bool `json:"idempotentHint,omitempty"`
	// If true, this tool may interact with an "open world" of external
	// entities. If false, the tool's domain of interaction is closed.
	// For example, the world of a web search tool is open, whereas that
	// of a memory tool is not.
	// Default: true
	OpenWorldHint bool `json:"openWorldHint,omitempty"`
}
⋮----
// A human-readable title for the tool.
⋮----
// If true, the tool does not modify its environment.
// Default: false
⋮----
// If true, the tool may perform destructive updates to its environment.
// If false, the tool performs only additive updates.
// (This property is meaningful only when `readOnlyHint == false`)
// Default: true
⋮----
// If true, calling the tool repeatedly with the same arguments
// will have no additional effect on the its environment.
⋮----
// If true, this tool may interact with an "open world" of external
// entities. If false, the tool's domain of interaction is closed.
// For example, the world of a web search tool is open, whereas that
// of a memory tool is not.

================
File: internal/server/mcp/mcp.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package mcp
⋮----
import (
	"context"
	"encoding/json"
	"fmt"
	"slices"

	"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
	mcputil "github.com/googleapis/genai-toolbox/internal/server/mcp/util"
	v20241105 "github.com/googleapis/genai-toolbox/internal/server/mcp/v20241105"
	v20250326 "github.com/googleapis/genai-toolbox/internal/server/mcp/v20250326"
	v20250618 "github.com/googleapis/genai-toolbox/internal/server/mcp/v20250618"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"encoding/json"
"fmt"
"slices"
⋮----
"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
mcputil "github.com/googleapis/genai-toolbox/internal/server/mcp/util"
v20241105 "github.com/googleapis/genai-toolbox/internal/server/mcp/v20241105"
v20250326 "github.com/googleapis/genai-toolbox/internal/server/mcp/v20250326"
v20250618 "github.com/googleapis/genai-toolbox/internal/server/mcp/v20250618"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
// LATEST_PROTOCOL_VERSION is the latest version of the MCP protocol supported.
// Update the version used in InitializeResponse when this value is updated.
const LATEST_PROTOCOL_VERSION = v20250618.PROTOCOL_VERSION
⋮----
// SUPPORTED_PROTOCOL_VERSIONS is the MCP protocol versions that are supported.
var SUPPORTED_PROTOCOL_VERSIONS = []string{
	v20241105.PROTOCOL_VERSION,
	v20250326.PROTOCOL_VERSION,
	v20250618.PROTOCOL_VERSION,
}
⋮----
// InitializeResponse runs capability negotiation and protocol version agreement.
// This is the Initialization phase of the lifecycle for MCP client-server connections.
// Always start with the latest protocol version supported.
func InitializeResponse(ctx context.Context, id jsonrpc.RequestId, body []byte, toolboxVersion string) (any, string, error)
⋮----
var req mcputil.InitializeRequest
⋮----
var protocolVersion string
⋮----
// NotificationHandler process notifications request. It MUST NOT send a response.
// Currently Toolbox does not process any notifications.
func NotificationHandler(ctx context.Context, body []byte) error
⋮----
var notification jsonrpc.JSONRPCNotification
⋮----
// ProcessMethod returns a response for the request.
// This is the Operation phase of the lifecycle for MCP client-server connections.
func ProcessMethod(ctx context.Context, mcpVersion string, id jsonrpc.RequestId, method string, toolset tools.Toolset, tools map[string]tools.Tool, body []byte) (any, error)
⋮----
// VerifyProtocolVersion verifies if the version string is valid.
func VerifyProtocolVersion(version string) bool

================
File: internal/server/api_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package server
⋮----
import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
	"testing"

	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"bytes"
"encoding/json"
"fmt"
"io"
"net/http"
"strings"
"testing"
⋮----
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
func TestToolsetEndpoint(t *testing.T)
⋮----
// wantResponse is a struct for checks against test cases
type wantResponse struct {
		statusCode int
		isErr      bool
		version    string
		tools      []string
	}
⋮----
// skip the rest of the checks if this is an error case
⋮----
var m tools.ToolsetManifest
⋮----
// Check the version is correct
⋮----
// validate that the tools in the toolset are correct
⋮----
func TestToolGetEndpoint(t *testing.T)
⋮----
func TestToolInvokeEndpoint(t *testing.T)
⋮----
// Remove `\` and `"` for string comparison

================
File: internal/server/api.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package server
⋮----
import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/render"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/util"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
)
⋮----
"encoding/json"
"fmt"
"net/http"
⋮----
"github.com/go-chi/chi/v5"
"github.com/go-chi/chi/v5/middleware"
"github.com/go-chi/render"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/util"
"go.opentelemetry.io/otel/attribute"
"go.opentelemetry.io/otel/codes"
"go.opentelemetry.io/otel/metric"
⋮----
// apiRouter creates a router that represents the routes under /api
func apiRouter(s *Server) (chi.Router, error)
⋮----
// toolsetHandler handles the request for information about a Toolset.
func toolsetHandler(s *Server, w http.ResponseWriter, r *http.Request)
⋮----
var err error
⋮----
// toolGetHandler handles requests for a single Tool.
func toolGetHandler(s *Server, w http.ResponseWriter, r *http.Request)
⋮----
// TODO: this can be optimized later with some caching
⋮----
// toolInvokeHandler handles the API request to invoke a specific Tool.
func toolInvokeHandler(s *Server, w http.ResponseWriter, r *http.Request)
⋮----
// Tool authentication
// claimsFromAuth maps the name of the authservice to the claims retrieved from it.
⋮----
// authService not present in header
⋮----
// Tool authorization check
⋮----
// Check if any of the specified auth services is verified
⋮----
var data map[string]any
⋮----
var _ render.Renderer = &resultResponse{} // Renderer interface for managing response payloads.
⋮----
// resultResponse is the response sent back when the tool was invocated successfully.
type resultResponse struct {
	Result string `json:"result"` // result of tool invocation
}
⋮----
Result string `json:"result"` // result of tool invocation
⋮----
// Render renders a single payload and respond to the client request.
func (rr resultResponse) Render(w http.ResponseWriter, r *http.Request) error
⋮----
var _ render.Renderer = &errResponse{} // Renderer interface for managing response payloads.
⋮----
// newErrResponse is a helper function initializing an ErrResponse
func newErrResponse(err error, code int) *errResponse
⋮----
// errResponse is the response sent back when an error has been encountered.
type errResponse struct {
	Err            error `json:"-"` // low-level runtime error
	HTTPStatusCode int   `json:"-"` // http response status code

	StatusText string `json:"status"`          // user-level status message
	ErrorText  string `json:"error,omitempty"` // application-level error message, for debugging
}
⋮----
Err            error `json:"-"` // low-level runtime error
HTTPStatusCode int   `json:"-"` // http response status code
⋮----
StatusText string `json:"status"`          // user-level status message
ErrorText  string `json:"error,omitempty"` // application-level error message, for debugging

================
File: internal/server/common_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package server
⋮----
import (
	"context"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"

	"github.com/go-chi/chi/v5"
	"github.com/googleapis/genai-toolbox/internal/log"
	"github.com/googleapis/genai-toolbox/internal/telemetry"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"fmt"
"io"
"net/http"
"net/http/httptest"
"os"
"testing"
⋮----
"github.com/go-chi/chi/v5"
"github.com/googleapis/genai-toolbox/internal/log"
"github.com/googleapis/genai-toolbox/internal/telemetry"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
// fakeVersionString is used as a temporary version string in tests
const fakeVersionString = "0.0.0"
⋮----
var _ tools.Tool = &MockTool{}
⋮----
// MockTool is used to mock tools in tests
type MockTool struct {
	Name        string
	Description string
	Params      []tools.Parameter
	manifest    tools.Manifest
}
⋮----
func (t MockTool) Invoke(context.Context, tools.ParamValues) (any, error)
⋮----
// claims is a map of user info decoded from an auth token
func (t MockTool) ParseParams(data map[string]any, claimsMap map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t MockTool) Manifest() tools.Manifest
func (t MockTool) Authorized(verifiedAuthServices []string) bool
⋮----
func (t MockTool) McpManifest() tools.McpManifest
⋮----
var tool1 = MockTool{
	Name:   "no_params",
	Params: []tools.Parameter{},
}
⋮----
var tool2 = MockTool{
	Name: "some_params",
	Params: tools.Parameters{
		tools.NewIntParameter("param1", "This is the first parameter."),
		tools.NewIntParameter("param2", "This is the second parameter."),
	},
}
⋮----
var tool3 = MockTool{
	Name:        "array_param",
	Description: "some description",
	Params: tools.Parameters{
		tools.NewArrayParameter("my_array", "this param is an array of strings", tools.NewStringParameter("my_string", "string item")),
	},
}
⋮----
// setUpResources setups resources to test against
func setUpResources(t *testing.T, mockTools []MockTool) (map[string]tools.Tool, map[string]tools.Toolset)
⋮----
var allTools []string
⋮----
// setUpServer create a new server with tools and toolsets that are given
func setUpServer(t *testing.T, router string, tools map[string]tools.Tool, toolsets map[string]tools.Toolset) (chi.Router, func())
⋮----
var r chi.Router
⋮----
// cancel context
⋮----
// shutdown otel
⋮----
func runServer(r chi.Router, tls bool) *httptest.Server
⋮----
var ts *httptest.Server
⋮----
func runRequest(ts *httptest.Server, method, path string, body io.Reader, header map[string]string) (*http.Response, []byte, error)

================
File: internal/server/config.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//	http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package server
⋮----
import (
	"context"
	"fmt"
	"strings"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/auth"
	"github.com/googleapis/genai-toolbox/internal/auth/google"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/util"
)
⋮----
"context"
"fmt"
"strings"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/auth"
"github.com/googleapis/genai-toolbox/internal/auth/google"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/util"
⋮----
type ServerConfig struct {
	// Server version
	Version string
	// Address is the address of the interface the server will listen on.
	Address string
	// Port is the port the server will listen on.
	Port int
	// SourceConfigs defines what sources of data are available for tools.
	SourceConfigs SourceConfigs
	// AuthServiceConfigs defines what sources of authentication are available for tools.
	AuthServiceConfigs AuthServiceConfigs
	// ToolConfigs defines what tools are available.
	ToolConfigs ToolConfigs
	// ToolsetConfigs defines what tools are available.
	ToolsetConfigs ToolsetConfigs
	// LoggingFormat defines whether structured loggings are used.
	LoggingFormat logFormat
	// LogLevel defines the levels to log.
	LogLevel StringLevel
	// TelemetryGCP defines whether GCP exporter is used.
	TelemetryGCP bool
	// TelemetryOTLP defines OTLP collector url for telemetry exports.
	TelemetryOTLP string
	// TelemetryServiceName defines the value of service.name resource attribute.
	TelemetryServiceName string
	// Stdio indicates if Toolbox is listening via MCP stdio.
	Stdio bool
	// DisableReload indicates if the user has disabled dynamic reloading for Toolbox.
	DisableReload bool
}
⋮----
// Server version
⋮----
// Address is the address of the interface the server will listen on.
⋮----
// Port is the port the server will listen on.
⋮----
// SourceConfigs defines what sources of data are available for tools.
⋮----
// AuthServiceConfigs defines what sources of authentication are available for tools.
⋮----
// ToolConfigs defines what tools are available.
⋮----
// ToolsetConfigs defines what tools are available.
⋮----
// LoggingFormat defines whether structured loggings are used.
⋮----
// LogLevel defines the levels to log.
⋮----
// TelemetryGCP defines whether GCP exporter is used.
⋮----
// TelemetryOTLP defines OTLP collector url for telemetry exports.
⋮----
// TelemetryServiceName defines the value of service.name resource attribute.
⋮----
// Stdio indicates if Toolbox is listening via MCP stdio.
⋮----
// DisableReload indicates if the user has disabled dynamic reloading for Toolbox.
⋮----
type logFormat string
⋮----
// String is used by both fmt.Print and by Cobra in help text
func (f *logFormat) String() string
⋮----
// validate logging format flag
func (f *logFormat) Set(v string) error
⋮----
// Type is used in Cobra help text
func (f *logFormat) Type() string
⋮----
type StringLevel string
⋮----
// validate log level flag
⋮----
// SourceConfigs is a type used to allow unmarshal of the data source config map
type SourceConfigs map[string]sources.SourceConfig
⋮----
// validate interface
var _ yaml.InterfaceUnmarshalerContext = &SourceConfigs{}
⋮----
func (c *SourceConfigs) UnmarshalYAML(ctx context.Context, unmarshal func(interface
⋮----
// Parse the 'kind' fields for each source
var raw map[string]util.DelayedUnmarshaler
⋮----
// Unmarshal to a general type that ensure it capture all fields
var v map[string]any
⋮----
// AuthServiceConfigs is a type used to allow unmarshal of the data authService config map
type AuthServiceConfigs map[string]auth.AuthServiceConfig
⋮----
var _ yaml.InterfaceUnmarshalerContext = &AuthServiceConfigs{}
⋮----
// Parse the 'kind' fields for each authService
⋮----
// ToolConfigs is a type used to allow unmarshal of the tool configs
type ToolConfigs map[string]tools.ToolConfig
⋮----
var _ yaml.InterfaceUnmarshalerContext = &ToolConfigs{}
⋮----
// Make `authRequired` an empty list instead of nil for Tool manifest
⋮----
// ToolConfigs is a type used to allow unmarshal of the toolset configs
type ToolsetConfigs map[string]tools.ToolsetConfig
⋮----
var _ yaml.InterfaceUnmarshalerContext = &ToolsetConfigs{}
⋮----
var raw map[string][]string

================
File: internal/server/mcp_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package server
⋮----
import (
	"bufio"
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"os"
	"reflect"
	"strings"
	"testing"

	"github.com/googleapis/genai-toolbox/internal/log"
	"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
	"github.com/googleapis/genai-toolbox/internal/telemetry"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"bufio"
"bytes"
"context"
"encoding/json"
"fmt"
"net/http"
"net/http/httptest"
"os"
"reflect"
"strings"
"testing"
⋮----
"github.com/googleapis/genai-toolbox/internal/log"
"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
"github.com/googleapis/genai-toolbox/internal/telemetry"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const jsonrpcVersion = "2.0"
const protocolVersion20241105 = "2024-11-05"
const protocolVersion20250326 = "2025-03-26"
const protocolVersion20250618 = "2025-06-18"
const serverName = "Toolbox"
⋮----
var tool1InputSchema = map[string]any{
	"type":       "object",
	"properties": map[string]any{},
	"required":   []any{},
}
⋮----
var tool2InputSchema = map[string]any{
	"type": "object",
	"properties": map[string]any{
		"param1": map[string]any{"type": "integer", "description": "This is the first parameter."},
		"param2": map[string]any{"type": "integer", "description": "This is the second parameter."},
	},
	"required": []any{"param1", "param2"},
}
⋮----
var tool3InputSchema = map[string]any{
	"type": "object",
	"properties": map[string]any{
		"my_array": map[string]any{
			"type":        "array",
			"description": "this param is an array of strings",
			"items":       map[string]any{"type": "string", "description": "string item"},
		},
	},
	"required": []any{"my_array"},
}
⋮----
func TestMcpEndpointWithoutInitialized(t *testing.T)
⋮----
// Notifications don't expect a response.
⋮----
var got map[string]any
⋮----
func runInitializeLifecycle(t *testing.T, ts *httptest.Server, protocolVersion string, initializeWant map[string]any, idHeader bool) string
⋮----
var got map[string]any
⋮----
func TestMcpEndpoint(t *testing.T)
⋮----
// Notifications don't expect a response.
⋮----
var got map[string]any
⋮----
// for decode failure, a random uuid is generated in server
⋮----
func TestInvalidProtocolVersionHeader(t *testing.T)
⋮----
func TestDeleteEndpoint(t *testing.T)
⋮----
func TestGetEndpoint(t *testing.T)
⋮----
func TestSseEndpoint(t *testing.T)
⋮----
func runSseRequest(ts *httptest.Server, path string, proto string) (*http.Response, error)
⋮----
func TestStdioSession(t *testing.T)
⋮----
// test stdioSession.readLine()
⋮----
// test stdioSession.write()

================
File: internal/server/mcp.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package server
⋮----
import (
	"bufio"
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"sync"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/render"
	"github.com/google/uuid"
	"github.com/googleapis/genai-toolbox/internal/server/mcp"
	"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
	mcputil "github.com/googleapis/genai-toolbox/internal/server/mcp/util"
	v20241105 "github.com/googleapis/genai-toolbox/internal/server/mcp/v20241105"
	v20250326 "github.com/googleapis/genai-toolbox/internal/server/mcp/v20250326"
	"github.com/googleapis/genai-toolbox/internal/util"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
)
⋮----
"bufio"
"bytes"
"context"
"encoding/json"
"fmt"
"io"
"net/http"
"sync"
"time"
⋮----
"github.com/go-chi/chi/v5"
"github.com/go-chi/chi/v5/middleware"
"github.com/go-chi/render"
"github.com/google/uuid"
"github.com/googleapis/genai-toolbox/internal/server/mcp"
"github.com/googleapis/genai-toolbox/internal/server/mcp/jsonrpc"
mcputil "github.com/googleapis/genai-toolbox/internal/server/mcp/util"
v20241105 "github.com/googleapis/genai-toolbox/internal/server/mcp/v20241105"
v20250326 "github.com/googleapis/genai-toolbox/internal/server/mcp/v20250326"
"github.com/googleapis/genai-toolbox/internal/util"
"go.opentelemetry.io/otel/attribute"
"go.opentelemetry.io/otel/codes"
"go.opentelemetry.io/otel/metric"
⋮----
type sseSession struct {
	writer     http.ResponseWriter
	flusher    http.Flusher
	done       chan struct{}
⋮----
// sseManager manages and control access to sse sessions
type sseManager struct {
	mu          sync.Mutex
	sseSessions map[string]*sseSession
}
⋮----
func (m *sseManager) get(id string) (*sseSession, bool)
⋮----
func newSseManager(ctx context.Context) *sseManager
⋮----
func (m *sseManager) add(id string, session *sseSession)
⋮----
func (m *sseManager) remove(id string)
⋮----
func (m *sseManager) cleanupRoutine(ctx context.Context)
⋮----
type stdioSession struct {
	protocol string
	server   *Server
	reader   *bufio.Reader
	writer   io.Writer
}
⋮----
func NewStdioSession(s *Server, stdin io.Reader, stdout io.Writer) *stdioSession
⋮----
func (s *stdioSession) Start(ctx context.Context) error
⋮----
// readInputStream reads requests/notifications from MCP clients through stdin
func (s *stdioSession) readInputStream(ctx context.Context) error
⋮----
// errors during the processing of message will generate a valid MCP Error response.
// server can continue to run.
⋮----
// no responses for notifications
⋮----
// readLine process each line within the input stream.
func (s *stdioSession) readLine(ctx context.Context) (string, error)
⋮----
// if context is cancelled, return an empty string
⋮----
// return error if error is found
⋮----
// return line if successful
⋮----
// write writes to stdout with response to client
func (s *stdioSession) write(ctx context.Context, response any) error
⋮----
// mcpRouter creates a router that represents the routes under /mcp
func mcpRouter(s *Server) (chi.Router, error)
⋮----
// sseHandler handles sse initialization and message.
func sseHandler(s *Server, w http.ResponseWriter, r *http.Request)
⋮----
var err error
⋮----
// https scheme formatting if (forwarded) request is a TLS request
⋮----
// send initial endpoint event
⋮----
// Ensure that only a single responses are written at once
⋮----
// channel for client disconnection
⋮----
// methodNotAllowed handles all mcp messages.
func methodNotAllowed(s *Server, w http.ResponseWriter, r *http.Request)
⋮----
// httpHandler handles all mcp messages.
func httpHandler(s *Server, w http.ResponseWriter, r *http.Request)
⋮----
var sessionId, protocolVersion string
var session *sseSession
⋮----
// check if client connects via sse
// v2024-11-05 supports http with sse
⋮----
var ok bool
⋮----
// check if client have `Mcp-Session-Id` header
// if `Mcp-Session-Id` header is set, we are using v2025-03-26 since
// previous version doesn't use this header.
⋮----
// check if client have `MCP-Protocol-Version` header
⋮----
// Read and returns a body from io.Reader
⋮----
// Generate a new uuid if unable to decode
⋮----
// notifications will return empty string
⋮----
// Notifications do not expect a response
// Toolbox doesn't do anything with notifications yet
⋮----
// for v20250326, add the `Mcp-Session-Id` header
⋮----
// queue sse event
⋮----
// send HTTP response
⋮----
// processMcpMessage process the messages received from clients
func processMcpMessage(ctx context.Context, body []byte, s *Server, protocolVersion string, toolsetName string) (string, any, error)
⋮----
// Generic baseMessage could either be a JSONRPCNotification or JSONRPCRequest
var baseMessage jsonrpc.BaseMessage
⋮----
// check if user is sending a batch request
var a []any
⋮----
// Check if method is present
⋮----
// Check for JSON-RPC 2.0
⋮----
// Check if message is a notification

================
File: internal/server/server_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package server_test
⋮----
import (
	"context"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/auth"
	"github.com/googleapis/genai-toolbox/internal/log"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/alloydbpg"
	"github.com/googleapis/genai-toolbox/internal/telemetry"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/util"
)
⋮----
"context"
"fmt"
"io"
"net/http"
"os"
"strings"
"testing"
⋮----
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/auth"
"github.com/googleapis/genai-toolbox/internal/log"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/alloydbpg"
"github.com/googleapis/genai-toolbox/internal/telemetry"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/util"
⋮----
func TestServe(t *testing.T)
⋮----
// start server in background
⋮----
func TestUpdateServer(t *testing.T)

================
File: internal/server/server.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package server
⋮----
import (
	"context"
	"fmt"
	"io"
	"net"
	"net/http"
	"strconv"
	"sync"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/httplog/v2"
	"github.com/googleapis/genai-toolbox/internal/auth"
	"github.com/googleapis/genai-toolbox/internal/log"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/telemetry"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/util"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"fmt"
"io"
"net"
"net/http"
"strconv"
"sync"
"time"
⋮----
"github.com/go-chi/chi/v5"
"github.com/go-chi/chi/v5/middleware"
"github.com/go-chi/httplog/v2"
"github.com/googleapis/genai-toolbox/internal/auth"
"github.com/googleapis/genai-toolbox/internal/log"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/telemetry"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/util"
"go.opentelemetry.io/otel/attribute"
"go.opentelemetry.io/otel/trace"
⋮----
// Server contains info for running an instance of Toolbox. Should be instantiated with NewServer().
type Server struct {
	version         string
	srv             *http.Server
	listener        net.Listener
	root            chi.Router
	logger          log.Logger
	instrumentation *telemetry.Instrumentation
	sseManager      *sseManager
	ResourceMgr     *ResourceManager
}
⋮----
// ResourceManager contains available resources for the server. Should be initialized with NewResourceManager().
type ResourceManager struct {
	mu           sync.RWMutex
	sources      map[string]sources.Source
	authServices map[string]auth.AuthService
	tools        map[string]tools.Tool
	toolsets     map[string]tools.Toolset
}
⋮----
func NewResourceManager(
	sourcesMap map[string]sources.Source,
	authServicesMap map[string]auth.AuthService,
	toolsMap map[string]tools.Tool, toolsetsMap map[string]tools.Toolset,
) *ResourceManager
⋮----
func (r *ResourceManager) GetSource(sourceName string) (sources.Source, bool)
⋮----
func (r *ResourceManager) GetAuthService(authServiceName string) (auth.AuthService, bool)
⋮----
func (r *ResourceManager) GetTool(toolName string) (tools.Tool, bool)
⋮----
func (r *ResourceManager) GetToolset(toolsetName string) (tools.Toolset, bool)
⋮----
func (r *ResourceManager) SetResources(sourcesMap map[string]sources.Source, authServicesMap map[string]auth.AuthService, toolsMap map[string]tools.Tool, toolsetsMap map[string]tools.Toolset)
⋮----
func (r *ResourceManager) GetAuthServiceMap() map[string]auth.AuthService
⋮----
func (r *ResourceManager) GetToolsMap() map[string]tools.Tool
⋮----
func InitializeConfigs(ctx context.Context, cfg ServerConfig) (
	map[string]sources.Source,
	map[string]auth.AuthService,
	map[string]tools.Tool,
	map[string]tools.Toolset,
	error,
)
⋮----
// initialize and validate the sources from configs
⋮----
// initialize and validate the auth services from configs
⋮----
// initialize and validate the tools from configs
⋮----
// create a default toolset that contains all tools
⋮----
// initialize and validate the toolsets from configs
⋮----
// NewServer returns a Server object based on provided Config.
func NewServer(ctx context.Context, cfg ServerConfig) (*Server, error)
⋮----
// set up http serving
⋮----
// logging
⋮----
var httpOpts httplog.Options
⋮----
// control plane
⋮----
// default endpoint for validating server is running
⋮----
// Listen starts a listener for the given Server instance.
func (s *Server) Listen(ctx context.Context) error
⋮----
var err error
⋮----
// Serve starts an HTTP server for the given Server instance.
func (s *Server) Serve(ctx context.Context) error
⋮----
// ServeStdio starts a new stdio session for mcp.
func (s *Server) ServeStdio(ctx context.Context, stdin io.Reader, stdout io.Writer) error
⋮----
// Shutdown gracefully shuts down the server without interrupting any active
// connections. It uses http.Server.Shutdown() and has the same functionality.
func (s *Server) Shutdown(ctx context.Context) error

================
File: internal/sources/alloydbpg/alloydb_pg_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package alloydbpg_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/alloydbpg"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/alloydbpg"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlAlloyDBPg(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/alloydbpg/alloydb_pg.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package alloydbpg
⋮----
import (
	"context"
	"fmt"
	"net"
	"strings"

	"cloud.google.com/go/alloydbconn"
	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/util"
	"github.com/jackc/pgx/v5/pgxpool"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"fmt"
"net"
"strings"
⋮----
"cloud.google.com/go/alloydbconn"
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/util"
"github.com/jackc/pgx/v5/pgxpool"
"go.opentelemetry.io/otel/trace"
⋮----
const SourceKind string = "alloydb-postgres"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
actual := Config{Name: name, IPType: "public"} // Default IPType
⋮----
type Config struct {
	Name     string         `yaml:"name" validate:"required"`
	Kind     string         `yaml:"kind" validate:"required"`
	Project  string         `yaml:"project" validate:"required"`
	Region   string         `yaml:"region" validate:"required"`
	Cluster  string         `yaml:"cluster" validate:"required"`
	Instance string         `yaml:"instance" validate:"required"`
	IPType   sources.IPType `yaml:"ipType" validate:"required"`
	User     string         `yaml:"user"`
	Password string         `yaml:"password"`
	Database string         `yaml:"database" validate:"required"`
}
⋮----
func (r Config) SourceConfigKind() string
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	Name string `yaml:"name"`
	Kind string `yaml:"kind"`
	Pool *pgxpool.Pool
}
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) PostgresPool() *pgxpool.Pool
⋮----
func getOpts(ipType, userAgent string, useIAM bool) ([]alloydbconn.Option, error)
⋮----
func getConnectionConfig(ctx context.Context, user, pass, dbname string) (string, bool, error)
⋮----
// If username and password both provided, use password authentication
⋮----
// If username is empty, fetch email from ADC
// otherwise, use username as IAM email
⋮----
// If password is provided without an username, raise an error
⋮----
// Construct IAM connection string with username
⋮----
func initAlloyDBPgConnectionPool(ctx context.Context, tracer trace.Tracer, name, project, region, cluster, instance, ipType, user, pass, dbname string) (*pgxpool.Pool, error)
⋮----
//nolint:all // Reassigned ctx
⋮----
// Create a new dialer with options
⋮----
// Tell the driver to use the AlloyDB Go Connector to create connections
⋮----
// Interact with the driver directly as you normally would

================
File: internal/sources/bigquery/bigquery_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigquery_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources/bigquery"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources/bigquery"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlBigQuery(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/bigquery/bigquery.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigquery
⋮----
import (
	"context"
	"fmt"

	bigqueryapi "cloud.google.com/go/bigquery"
	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/util"
	"go.opentelemetry.io/otel/trace"
	"golang.org/x/oauth2/google"
	bigqueryrestapi "google.golang.org/api/bigquery/v2"
	"google.golang.org/api/option"
)
⋮----
"context"
"fmt"
⋮----
bigqueryapi "cloud.google.com/go/bigquery"
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/util"
"go.opentelemetry.io/otel/trace"
"golang.org/x/oauth2/google"
bigqueryrestapi "google.golang.org/api/bigquery/v2"
"google.golang.org/api/option"
⋮----
const SourceKind string = "bigquery"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
type Config struct {
	// BigQuery configs
	Name     string `yaml:"name" validate:"required"`
	Kind     string `yaml:"kind" validate:"required"`
	Project  string `yaml:"project" validate:"required"`
	Location string `yaml:"location"`
}
⋮----
// BigQuery configs
⋮----
func (r Config) SourceConfigKind() string
⋮----
// Returns BigQuery source kind
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
// Initializes a BigQuery Google SQL source
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	// BigQuery Google SQL struct with client
	Name        string `yaml:"name"`
	Kind        string `yaml:"kind"`
	Client      *bigqueryapi.Client
	RestService *bigqueryrestapi.Service
	Location    string `yaml:"location"`
}
⋮----
// BigQuery Google SQL struct with client
⋮----
func (s *Source) SourceKind() string
⋮----
// Returns BigQuery Google SQL source kind
⋮----
func (s *Source) BigQueryClient() *bigqueryapi.Client
⋮----
func (s *Source) BigQueryRestService() *bigqueryrestapi.Service
⋮----
func initBigQueryConnection(
	ctx context.Context,
	tracer trace.Tracer,
	name string,
	project string,
	location string,
) (*bigqueryapi.Client, *bigqueryrestapi.Service, error)
⋮----
// Initialize the high-level BigQuery client
⋮----
// Initialize the low-level BigQuery REST service using the same credentials

================
File: internal/sources/bigtable/bigtable_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigtable_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/bigtable"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/bigtable"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlBigtableDb(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/bigtable/bigtable.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigtable
⋮----
import (
	"context"
	"fmt"

	"cloud.google.com/go/bigtable"
	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/util"
	"go.opentelemetry.io/otel/trace"
	"google.golang.org/api/option"
)
⋮----
"context"
"fmt"
⋮----
"cloud.google.com/go/bigtable"
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/util"
"go.opentelemetry.io/otel/trace"
"google.golang.org/api/option"
⋮----
const SourceKind string = "bigtable"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
type Config struct {
	Name     string `yaml:"name" validate:"required"`
	Kind     string `yaml:"kind" validate:"required"`
	Project  string `yaml:"project" validate:"required"`
	Instance string `yaml:"instance" validate:"required"`
}
⋮----
func (r Config) SourceConfigKind() string
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	Name   string `yaml:"name"`
	Kind   string `yaml:"kind"`
	Client *bigtable.Client
}
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) BigtableClient() *bigtable.Client
⋮----
func initBigtableClient(ctx context.Context, tracer trace.Tracer, name, project, instance string) (*bigtable.Client, error)
⋮----
//nolint:all // Reassigned ctx
⋮----
// Set up Bigtable data operations client.

================
File: internal/sources/cloudsqlmssql/cloud_sql_mssql_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package cloudsqlmssql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlmssql"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlmssql"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlCloudSQLMssql(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/cloudsqlmssql/cloud_sql_mssql.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package cloudsqlmssql
⋮----
import (
	"context"
	"database/sql"
	"fmt"
	"net/url"
	"slices"

	"cloud.google.com/go/cloudsqlconn/sqlserver/mssql"
	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/util"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"database/sql"
"fmt"
"net/url"
"slices"
⋮----
"cloud.google.com/go/cloudsqlconn/sqlserver/mssql"
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/util"
"go.opentelemetry.io/otel/trace"
⋮----
const SourceKind string = "cloud-sql-mssql"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
actual := Config{Name: name, IPType: "public"} // Default IPType
⋮----
type Config struct {
	// Cloud SQL MSSQL configs
	Name      string         `yaml:"name" validate:"required"`
	Kind      string         `yaml:"kind" validate:"required"`
	Project   string         `yaml:"project" validate:"required"`
	Region    string         `yaml:"region" validate:"required"`
	Instance  string         `yaml:"instance" validate:"required"`
	IPAddress string         `yaml:"ipAddress" validate:"required"`
	IPType    sources.IPType `yaml:"ipType" validate:"required"`
	User      string         `yaml:"user" validate:"required"`
	Password  string         `yaml:"password" validate:"required"`
	Database  string         `yaml:"database" validate:"required"`
}
⋮----
// Cloud SQL MSSQL configs
⋮----
func (r Config) SourceConfigKind() string
⋮----
// Returns Cloud SQL MSSQL source kind
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
// Initializes a Cloud SQL MSSQL source
⋮----
// Verify db connection
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	// Cloud SQL MSSQL struct with connection pool
	Name string `yaml:"name"`
	Kind string `yaml:"kind"`
	Db   *sql.DB
}
⋮----
// Cloud SQL MSSQL struct with connection pool
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) MSSQLDB() *sql.DB
⋮----
// Returns a Cloud SQL MSSQL database connection pool
⋮----
func initCloudSQLMssqlConnection(ctx context.Context, tracer trace.Tracer, name, project, region, instance, ipAddress, ipType, user, pass, dbname string) (*sql.DB, error)
⋮----
//nolint:all // Reassigned ctx
⋮----
// Create dsn
⋮----
// Get dial options
⋮----
// Register sql server driver
⋮----
// Open database connection

================
File: internal/sources/cloudsqlmysql/cloud_sql_mysql_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package cloudsqlmysql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlmysql"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlmysql"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlCloudSQLMySQL(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/cloudsqlmysql/cloud_sql_mysql.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package cloudsqlmysql
⋮----
import (
	"context"
	"database/sql"
	"fmt"
	"slices"

	"cloud.google.com/go/cloudsqlconn/mysql/mysql"
	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/util"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"database/sql"
"fmt"
"slices"
⋮----
"cloud.google.com/go/cloudsqlconn/mysql/mysql"
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/util"
"go.opentelemetry.io/otel/trace"
⋮----
const SourceKind string = "cloud-sql-mysql"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
actual := Config{Name: name, IPType: "public"} // Default IPType
⋮----
type Config struct {
	Name     string         `yaml:"name" validate:"required"`
	Kind     string         `yaml:"kind" validate:"required"`
	Project  string         `yaml:"project" validate:"required"`
	Region   string         `yaml:"region" validate:"required"`
	Instance string         `yaml:"instance" validate:"required"`
	IPType   sources.IPType `yaml:"ipType" validate:"required"`
	User     string         `yaml:"user" validate:"required"`
	Password string         `yaml:"password" validate:"required"`
	Database string         `yaml:"database" validate:"required"`
}
⋮----
func (r Config) SourceConfigKind() string
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	Name string `yaml:"name"`
	Kind string `yaml:"kind"`
	Pool *sql.DB
}
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) MySQLPool() *sql.DB
⋮----
func initCloudSQLMySQLConnectionPool(ctx context.Context, tracer trace.Tracer, name, project, region, instance, ipType, user, pass, dbname string) (*sql.DB, error)
⋮----
//nolint:all // Reassigned ctx
⋮----
// Create a new dialer with options
⋮----
// Tell the driver to use the Cloud SQL Go Connector to create connections

================
File: internal/sources/cloudsqlpg/cloud_sql_pg_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package cloudsqlpg_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlpg"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlpg"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlCloudSQLPg(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/cloudsqlpg/cloud_sql_pg.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package cloudsqlpg
⋮----
import (
	"context"
	"fmt"
	"net"

	"cloud.google.com/go/cloudsqlconn"
	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/util"
	"github.com/jackc/pgx/v5/pgxpool"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"fmt"
"net"
⋮----
"cloud.google.com/go/cloudsqlconn"
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/util"
"github.com/jackc/pgx/v5/pgxpool"
"go.opentelemetry.io/otel/trace"
⋮----
const SourceKind string = "cloud-sql-postgres"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
actual := Config{Name: name, IPType: "public"} // Default IPType
⋮----
type Config struct {
	Name     string         `yaml:"name" validate:"required"`
	Kind     string         `yaml:"kind" validate:"required"`
	Project  string         `yaml:"project" validate:"required"`
	Region   string         `yaml:"region" validate:"required"`
	Instance string         `yaml:"instance" validate:"required"`
	IPType   sources.IPType `yaml:"ipType" validate:"required"`
	Database string         `yaml:"database" validate:"required"`
	User     string         `yaml:"user"`
	Password string         `yaml:"password"`
}
⋮----
func (r Config) SourceConfigKind() string
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	Name string `yaml:"name"`
	Kind string `yaml:"kind"`
	Pool *pgxpool.Pool
}
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) PostgresPool() *pgxpool.Pool
⋮----
func getConnectionConfig(ctx context.Context, user, pass, dbname string) (string, bool, error)
⋮----
// If username and password both provided, use password authentication
⋮----
// If username is empty, fetch email from ADC
// otherwise, use username as IAM email
⋮----
// If password is provided without an username, raise an error
⋮----
// Construct IAM connection string with username
⋮----
func initCloudSQLPgConnectionPool(ctx context.Context, tracer trace.Tracer, name, project, region, instance, ipType, user, pass, dbname string) (*pgxpool.Pool, error)
⋮----
//nolint:all // Reassigned ctx
⋮----
// Configure the driver to connect to the database
⋮----
// Create a new dialer with options
⋮----
// Tell the driver to use the Cloud SQL Go Connector to create connections
⋮----
// Interact with the driver directly as you normally would

================
File: internal/sources/couchbase/couchbase_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package couchbase_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources/couchbase"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources/couchbase"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlCouchbase(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/couchbase/couchbase.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package couchbase
⋮----
import (
	"context"
	"crypto/tls"
	"fmt"
	"os"

	"github.com/couchbase/gocb/v2"
	tlsutil "github.com/couchbase/tools-common/http/tls"
	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"crypto/tls"
"fmt"
"os"
⋮----
"github.com/couchbase/gocb/v2"
tlsutil "github.com/couchbase/tools-common/http/tls"
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"go.opentelemetry.io/otel/trace"
⋮----
const SourceKind string = "couchbase"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
type Config struct {
	Name                 string `yaml:"name" validate:"required"`
	Kind                 string `yaml:"kind" validate:"required"`
	ConnectionString     string `yaml:"connectionString" validate:"required"`
	Bucket               string `yaml:"bucket" validate:"required"`
	Scope                string `yaml:"scope" validate:"required"`
	Username             string `yaml:"username"`
	Password             string `yaml:"password"`
	ClientCert           string `yaml:"clientCert"`
	ClientCertPassword   string `yaml:"clientCertPassword"`
	ClientKey            string `yaml:"clientKey"`
	ClientKeyPassword    string `yaml:"clientKeyPassword"`
	CACert               string `yaml:"caCert"`
	NoSSLVerify          bool   `yaml:"noSslVerify"`
	Profile              string `yaml:"profile"`
	QueryScanConsistency uint   `yaml:"queryScanConsistency"`
}
⋮----
func (r Config) SourceConfigKind() string
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	Name                 string `yaml:"name"`
	Kind                 string `yaml:"kind"`
	QueryScanConsistency uint   `yaml:"queryScanConsistency"`
	Scope                *gocb.Scope
}
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) CouchbaseScope() *gocb.Scope
⋮----
func (s *Source) CouchbaseQueryScanConsistency() uint
⋮----
func (r Config) createCouchbaseOptions() (gocb.ClusterOptions, error)
⋮----
var clientCert, clientKey, caCert []byte
var err error
⋮----
// tls parsing code is similar to the code used in the cbimport.
⋮----
// GetCertKeyPassword - Returns the password which should be used when creating a new TLS config.
func getCertKeyPassword(certPassword, keyPassword string) string

================
File: internal/sources/dgraph/dgraph_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package dgraph_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources/dgraph"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources/dgraph"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlDgraph(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/dgraph/dgraph.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package dgraph
⋮----
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"bytes"
"context"
"encoding/json"
"fmt"
"io"
"net/http"
"net/url"
"strings"
⋮----
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"go.opentelemetry.io/otel/trace"
⋮----
const SourceKind string = "dgraph"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
// HttpToken stores credentials for making HTTP request
type HttpToken struct {
	UserId       string
	Password     string
	AccessJwt    string
	RefreshToken string
	Namespace    uint64
}
⋮----
type DgraphClient struct {
	httpClient *http.Client
	*HttpToken
	baseUrl string
	apiKey  string
}
⋮----
type Config struct {
	Name      string `yaml:"name" validate:"required"`
	Kind      string `yaml:"kind" validate:"required"`
	DgraphUrl string `yaml:"dgraphUrl" validate:"required"`
	User      string `yaml:"user"`
	Password  string `yaml:"password"`
	Namespace uint64 `yaml:"namespace"`
	ApiKey    string `yaml:"apiKey"`
}
⋮----
func (r Config) SourceConfigKind() string
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	Name   string        `yaml:"name"`
	Kind   string        `yaml:"kind"`
	Client *DgraphClient `yaml:"client"`
}
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) DgraphClient() *DgraphClient
⋮----
func initDgraphHttpClient(ctx context.Context, tracer trace.Tracer, r Config) (*DgraphClient, error)
⋮----
//nolint:all // Reassigned ctx
⋮----
func (hc *DgraphClient) ExecuteQuery(query string, paramsMap map[string]interface
⋮----
// postDqlQuery sends a DQL query to the Dgraph server with query, parameters, and optional timeout.
// Returns the response body ([]byte) and an error, if any.
func (hc *DgraphClient) postDqlQuery(query string, paramsMap map[string]interface
⋮----
// mutate sends an RDF mutation to the Dgraph server with "commitNow: true", embedding parameters.
// Returns the server's response as a byte slice or an error if the mutation fails.
func (hc *DgraphClient) mutate(mutation string, paramsMap map[string]interface
⋮----
func (hc *DgraphClient) doReq(req *http.Request) ([]byte, error)
⋮----
func (hc *DgraphClient) loginWithCredentials() error
⋮----
func (hc *DgraphClient) loginWithToken() error
⋮----
func (hc *DgraphClient) doLogin(creds map[string]interface
⋮----
var r struct {
		Data struct {
			AccessJWT  string `json:"accessJWT"`
			RefreshJWT string `json:"refreshJWT"`
		} `json:"data"`
	}
⋮----
func (hc *DgraphClient) healthCheck() error
⋮----
var result []struct {
		Instance string `json:"instance"`
		Address  string `json:"address"`
		Status   string `json:"status"`
	}
⋮----
// Unmarshal response into the struct
⋮----
var unhealthyErr error
⋮----
func getUrl(baseUrl, resource string, params url.Values) (string, error)
⋮----
func CheckError(resp []byte) error
⋮----
var errResp struct {
		Errors []struct {
			Message string `json:"message"`
		} `json:"errors"`
	}
⋮----
func embedParamsIntoMutation(mutation string, paramsMap map[string]interface

================
File: internal/sources/firestore/firestore_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package firestore_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources/firestore"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources/firestore"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlFirestore(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYamlFirestore(t *testing.T)

================
File: internal/sources/firestore/firestore.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package firestore
⋮----
import (
	"context"
	"fmt"

	"cloud.google.com/go/firestore"
	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/util"
	"go.opentelemetry.io/otel/trace"
	"google.golang.org/api/firebaserules/v1"
	"google.golang.org/api/option"
)
⋮----
"context"
"fmt"
⋮----
"cloud.google.com/go/firestore"
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/util"
"go.opentelemetry.io/otel/trace"
"google.golang.org/api/firebaserules/v1"
"google.golang.org/api/option"
⋮----
const SourceKind string = "firestore"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
type Config struct {
	// Firestore configs
	Name     string `yaml:"name" validate:"required"`
	Kind     string `yaml:"kind" validate:"required"`
	Project  string `yaml:"project" validate:"required"`
	Database string `yaml:"database"` // Optional, defaults to "(default)"
}
⋮----
// Firestore configs
⋮----
Database string `yaml:"database"` // Optional, defaults to "(default)"
⋮----
func (r Config) SourceConfigKind() string
⋮----
// Returns Firestore source kind
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
// Initializes a Firestore source
⋮----
// Initialize Firebase Rules client
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	// Firestore struct with client
	Name        string `yaml:"name"`
	Kind        string `yaml:"kind"`
	Client      *firestore.Client
	RulesClient *firebaserules.Service
	ProjectId   string `yaml:"projectId"`
}
⋮----
// Firestore struct with client
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) FirestoreClient() *firestore.Client
⋮----
func (s *Source) FirebaseRulesClient() *firebaserules.Service
⋮----
func (s *Source) GetProjectId() string
⋮----
func initFirestoreConnection(
	ctx context.Context,
	tracer trace.Tracer,
	name string,
	project string,
	database string,
) (*firestore.Client, error)
⋮----
// If database is not specified, use the default database
⋮----
// Create the Firestore client
⋮----
func initFirebaseRulesConnection(
	ctx context.Context,
	project string,
) (*firebaserules.Service, error)
⋮----
// Create the Firebase Rules client

================
File: internal/sources/http/http_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package http_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/http"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/http"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlHttp(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/http/http.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//	http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package http
⋮----
import (
	"context"
	"crypto/tls"
	"fmt"
	"net/http"
	"net/url"
	"time"

	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/util"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"crypto/tls"
"fmt"
"net/http"
"net/url"
"time"
⋮----
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/util"
"go.opentelemetry.io/otel/trace"
⋮----
const SourceKind string = "http"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
actual := Config{Name: name, Timeout: "30s"} // Default timeout
⋮----
type Config struct {
	Name                   string            `yaml:"name" validate:"required"`
	Kind                   string            `yaml:"kind" validate:"required"`
	BaseURL                string            `yaml:"baseUrl"`
	Timeout                string            `yaml:"timeout"`
	DefaultHeaders         map[string]string `yaml:"headers"`
	QueryParams            map[string]string `yaml:"queryParams"`
	DisableSslVerification bool              `yaml:"disableSslVerification"`
}
⋮----
func (r Config) SourceConfigKind() string
⋮----
// Initialize initializes an HTTP Source instance.
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
// Validate BaseURL
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	Name           string            `yaml:"name"`
	Kind           string            `yaml:"kind"`
	BaseURL        string            `yaml:"baseUrl"`
	DefaultHeaders map[string]string `yaml:"headers"`
	QueryParams    map[string]string `yaml:"queryParams"`
	Client         *http.Client
}
⋮----
func (s *Source) SourceKind() string

================
File: internal/sources/mssql/mssql_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package mssql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources/mssql"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources/mssql"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlMssql(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/mssql/mssql.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package mssql
⋮----
import (
	"context"
	"database/sql"
	"fmt"
	"net/url"

	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	_ "github.com/microsoft/go-mssqldb"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"database/sql"
"fmt"
"net/url"
⋮----
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
_ "github.com/microsoft/go-mssqldb"
"go.opentelemetry.io/otel/trace"
⋮----
const SourceKind string = "mssql"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
type Config struct {
	// Cloud SQL MSSQL configs
	Name     string `yaml:"name" validate:"required"`
	Kind     string `yaml:"kind" validate:"required"`
	Host     string `yaml:"host" validate:"required"`
	Port     string `yaml:"port" validate:"required"`
	User     string `yaml:"user" validate:"required"`
	Password string `yaml:"password" validate:"required"`
	Database string `yaml:"database" validate:"required"`
}
⋮----
// Cloud SQL MSSQL configs
⋮----
func (r Config) SourceConfigKind() string
⋮----
// Returns Cloud SQL MSSQL source kind
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
// Initializes a MSSQL source
⋮----
// Verify db connection
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	// Cloud SQL MSSQL struct with connection pool
	Name string `yaml:"name"`
	Kind string `yaml:"kind"`
	Db   *sql.DB
}
⋮----
// Cloud SQL MSSQL struct with connection pool
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) MSSQLDB() *sql.DB
⋮----
// Returns a Cloud SQL MSSQL database connection pool
⋮----
func initMssqlConnection(ctx context.Context, tracer trace.Tracer, name, host, port, user, pass, dbname string) (*sql.DB, error)
⋮----
//nolint:all // Reassigned ctx
⋮----
// Create dsn
⋮----
// Open database connection

================
File: internal/sources/mysql/mysql_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package mysql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources/mysql"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources/mysql"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlCloudSQLMySQL(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/mysql/mysql.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package mysql
⋮----
import (
	"context"
	"database/sql"
	"fmt"
	"time"

	_ "github.com/go-sql-driver/mysql"
	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"database/sql"
"fmt"
"time"
⋮----
_ "github.com/go-sql-driver/mysql"
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"go.opentelemetry.io/otel/trace"
⋮----
const SourceKind string = "mysql"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
type Config struct {
	Name         string `yaml:"name" validate:"required"`
	Kind         string `yaml:"kind" validate:"required"`
	Host         string `yaml:"host" validate:"required"`
	Port         string `yaml:"port" validate:"required"`
	User         string `yaml:"user" validate:"required"`
	Password     string `yaml:"password" validate:"required"`
	Database     string `yaml:"database" validate:"required"`
	QueryTimeout string `yaml:"queryTimeout"`
}
⋮----
func (r Config) SourceConfigKind() string
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	Name string `yaml:"name"`
	Kind string `yaml:"kind"`
	Pool *sql.DB
}
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) MySQLPool() *sql.DB
⋮----
func initMySQLConnectionPool(ctx context.Context, tracer trace.Tracer, name, host, port, user, pass, dbname, queryTimeout string) (*sql.DB, error)
⋮----
//nolint:all // Reassigned ctx
⋮----
// Configure the driver to connect to the database
⋮----
// Add query timeout to DSN if specified
⋮----
// Interact with the driver directly as you normally would

================
File: internal/sources/neo4j/neo4j_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package neo4j_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources/neo4j"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources/neo4j"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlNeo4j(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/neo4j/neo4j.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package neo4j
⋮----
import (
	"context"
	"fmt"

	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/neo4j/neo4j-go-driver/v5/neo4j"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"fmt"
⋮----
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/neo4j/neo4j-go-driver/v5/neo4j"
"go.opentelemetry.io/otel/trace"
⋮----
const SourceKind string = "neo4j"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
actual := Config{Name: name, Database: "neo4j"} // Default database
⋮----
type Config struct {
	Name     string `yaml:"name" validate:"required"`
	Kind     string `yaml:"kind" validate:"required"`
	Uri      string `yaml:"uri" validate:"required"`
	User     string `yaml:"user" validate:"required"`
	Password string `yaml:"password" validate:"required"`
	Database string `yaml:"database" validate:"required"`
}
⋮----
func (r Config) SourceConfigKind() string
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	Name     string `yaml:"name"`
	Kind     string `yaml:"kind"`
	Database string `yaml:"database"`
	Driver   neo4j.DriverWithContext
}
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) Neo4jDriver() neo4j.DriverWithContext
⋮----
func (s *Source) Neo4jDatabase() string
⋮----
func initNeo4jDriver(ctx context.Context, tracer trace.Tracer, uri, user, password, name string) (neo4j.DriverWithContext, error)
⋮----
//nolint:all // Reassigned ctx

================
File: internal/sources/postgres/postgres_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package postgres_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources/postgres"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources/postgres"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlPostgres(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/postgres/postgres.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package postgres
⋮----
import (
	"context"
	"fmt"
	"net/url"

	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/jackc/pgx/v5/pgxpool"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"fmt"
"net/url"
⋮----
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/jackc/pgx/v5/pgxpool"
"go.opentelemetry.io/otel/trace"
⋮----
const SourceKind string = "postgres"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
type Config struct {
	Name     string `yaml:"name" validate:"required"`
	Kind     string `yaml:"kind" validate:"required"`
	Host     string `yaml:"host" validate:"required"`
	Port     string `yaml:"port" validate:"required"`
	User     string `yaml:"user" validate:"required"`
	Password string `yaml:"password" validate:"required"`
	Database string `yaml:"database" validate:"required"`
}
⋮----
func (r Config) SourceConfigKind() string
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	Name string `yaml:"name"`
	Kind string `yaml:"kind"`
	Pool *pgxpool.Pool
}
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) PostgresPool() *pgxpool.Pool
⋮----
func initPostgresConnectionPool(ctx context.Context, tracer trace.Tracer, name, host, port, user, pass, dbname string) (*pgxpool.Pool, error)
⋮----
//nolint:all // Reassigned ctx
⋮----
// urlExample := "postgres:dd//username:password@localhost:5432/database_name"

================
File: internal/sources/redis/redis_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package redis_test
⋮----
import (
	"strings"
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources/redis"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"strings"
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources/redis"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlRedis(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/redis/redis.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//	http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package redis
⋮----
import (
	"context"
	"fmt"
	"time"

	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/redis/go-redis/v9"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"fmt"
"time"
⋮----
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/redis/go-redis/v9"
"go.opentelemetry.io/otel/trace"
⋮----
const SourceKind string = "redis"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
type Config struct {
	Name           string   `yaml:"name" validate:"required"`
	Kind           string   `yaml:"kind" validate:"required"`
	Address        []string `yaml:"address" validate:"required"`
	Username       string   `yaml:"username"`
	Password       string   `yaml:"password"`
	Database       int      `yaml:"database"`
	UseGCPIAM      bool     `yaml:"useGCPIAM"`
	ClusterEnabled bool     `yaml:"clusterEnabled"`
}
⋮----
func (r Config) SourceConfigKind() string
⋮----
// RedisClient is an interface for `redis.Client` and `redis.ClusterClient
type RedisClient interface {
	Do(context.Context, ...any) *redis.Cmd
}
⋮----
var _ RedisClient = (*redis.Client)(nil)
var _ RedisClient = (*redis.ClusterClient)(nil)
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
func initRedisClient(ctx context.Context, r Config) (RedisClient, error)
⋮----
var authFn func(ctx context.Context) (username string, password string, err error)
⋮----
// Pass in an access token getter fn for IAM auth
⋮----
var client RedisClient
var err error
⋮----
// Create a new Redis Cluster client
⋮----
// PoolSize applies per cluster node and not for the whole cluster.
⋮----
// Create a new Redis client
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	Name   string `yaml:"name"`
	Kind   string `yaml:"kind"`
	Client RedisClient
}
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) RedisClient() RedisClient

================
File: internal/sources/spanner/spanner_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package spanner_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/spanner"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/spanner"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlSpannerDb(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/spanner/spanner.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package spanner
⋮----
import (
	"context"
	"fmt"

	"cloud.google.com/go/spanner"
	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/util"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"fmt"
⋮----
"cloud.google.com/go/spanner"
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/util"
"go.opentelemetry.io/otel/trace"
⋮----
const SourceKind string = "spanner"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
actual := Config{Name: name, Dialect: "googlesql"} // Default dialect
⋮----
type Config struct {
	Name     string          `yaml:"name" validate:"required"`
	Kind     string          `yaml:"kind" validate:"required"`
	Project  string          `yaml:"project" validate:"required"`
	Instance string          `yaml:"instance" validate:"required"`
	Dialect  sources.Dialect `yaml:"dialect" validate:"required"`
	Database string          `yaml:"database" validate:"required"`
}
⋮----
func (r Config) SourceConfigKind() string
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	Name    string `yaml:"name"`
	Kind    string `yaml:"kind"`
	Client  *spanner.Client
	Dialect string
}
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) SpannerClient() *spanner.Client
⋮----
func (s *Source) DatabaseDialect() string
⋮----
func initSpannerClient(ctx context.Context, tracer trace.Tracer, name, project, instance, dbname string) (*spanner.Client, error)
⋮----
//nolint:all // Reassigned ctx
⋮----
// Configure the connection to the database
⋮----
// Configure session pool to automatically clean inactive transactions
⋮----
// Create spanner client

================
File: internal/sources/sqlite/sqlite_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package sqlite_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/sqlite"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/sqlite"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlSQLite(t *testing.T)
⋮----
// Parse contents

================
File: internal/sources/sqlite/sqlite.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package sqlite
⋮----
import (
	"context"
	"database/sql"
	"fmt"

	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"go.opentelemetry.io/otel/trace"
	_ "modernc.org/sqlite" // Pure Go SQLite driver
)
⋮----
"context"
"database/sql"
"fmt"
⋮----
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"go.opentelemetry.io/otel/trace"
_ "modernc.org/sqlite" // Pure Go SQLite driver
⋮----
const SourceKind string = "sqlite"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
type Config struct {
	Name     string `yaml:"name" validate:"required"`
	Kind     string `yaml:"kind" validate:"required"`
	Database string `yaml:"database" validate:"required"` // Path to SQLite database file
}
⋮----
Database string `yaml:"database" validate:"required"` // Path to SQLite database file
⋮----
func (r Config) SourceConfigKind() string
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	Name string `yaml:"name"`
	Kind string `yaml:"kind"`
	Db   *sql.DB
}
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) SQLiteDB() *sql.DB
⋮----
func initSQLiteConnection(ctx context.Context, tracer trace.Tracer, name, dbPath string) (*sql.DB, error)
⋮----
//nolint:all // Reassigned ctx
⋮----
// Open database connection
⋮----
// Set some reasonable defaults for SQLite
db.SetMaxOpenConns(1) // SQLite only supports one writer at a time

================
File: internal/sources/valkey/valkey_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package valkey_test
⋮----
import (
	"strings"
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/valkey"
	"github.com/googleapis/genai-toolbox/internal/testutils"
)
⋮----
"strings"
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/valkey"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
func TestParseFromYamlValkey(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYaml(t *testing.T)

================
File: internal/sources/valkey/valkey.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//	http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package valkey
⋮----
import (
	"context"
	"fmt"
	"log"

	"github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/valkey-io/valkey-go"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
"fmt"
"log"
⋮----
"github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/valkey-io/valkey-go"
"go.opentelemetry.io/otel/trace"
⋮----
const SourceKind string = "valkey"
⋮----
// validate interface
var _ sources.SourceConfig = Config{}
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (sources.SourceConfig, error)
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Address      []string `yaml:"address" validate:"required"`
	Username     string   `yaml:"username"`
	Password     string   `yaml:"password"`
	Database     int      `yaml:"database"`
	UseGCPIAM    bool     `yaml:"useGCPIAM"`
	DisableCache bool     `yaml:"disableCache"`
}
⋮----
func (r Config) SourceConfigKind() string
⋮----
func (r Config) Initialize(ctx context.Context, tracer trace.Tracer) (sources.Source, error)
⋮----
func initValkeyClient(ctx context.Context, r Config) (valkey.Client, error)
⋮----
var authFn func(valkey.AuthCredentialsContext) (valkey.AuthCredentials, error)
⋮----
// Pass in an access token getter fn for IAM auth
⋮----
// Ping the server to check connectivity
⋮----
var _ sources.Source = &Source{}
⋮----
type Source struct {
	Name   string `yaml:"name"`
	Kind   string `yaml:"kind"`
	Client valkey.Client
}
⋮----
func (s *Source) SourceKind() string
⋮----
func (s *Source) ValkeyClient() valkey.Client

================
File: internal/sources/dialect.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package sources
⋮----
import (
	"context"
	"fmt"
	"strings"
)
⋮----
"context"
"fmt"
"strings"
⋮----
// Dialect represents the dialect type of a database.
type Dialect string
⋮----
func (i *Dialect) String() string
⋮----
func (i *Dialect) UnmarshalYAML(ctx context.Context, unmarshal func(interface
⋮----
var dialect string

================
File: internal/sources/ip_type.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package sources
⋮----
import (
	"context"
	"fmt"
	"strings"
)
⋮----
"context"
"fmt"
"strings"
⋮----
type IPType string
⋮----
func (i *IPType) String() string
⋮----
func (i *IPType) UnmarshalYAML(ctx context.Context, unmarshal func(interface
⋮----
var ipType string

================
File: internal/sources/sources.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package sources
⋮----
import (
	"context"

	"fmt"

	"github.com/goccy/go-yaml"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"context"
⋮----
"fmt"
⋮----
"github.com/goccy/go-yaml"
"go.opentelemetry.io/otel/attribute"
"go.opentelemetry.io/otel/trace"
⋮----
// SourceConfigFactory defines the function signature for creating a SourceConfig.
type SourceConfigFactory func(ctx context.Context, name string, decoder *yaml.Decoder) (SourceConfig, error)
⋮----
var sourceRegistry = make(map[string]SourceConfigFactory)
⋮----
// Register registers a new source kind with its factory.
// It returns false if the kind is already registered.
func Register(kind string, factory SourceConfigFactory) bool
⋮----
// Source with this kind already exists, do not overwrite.
⋮----
// DecodeConfig decodes a source configuration using the registered factory for the given kind.
func DecodeConfig(ctx context.Context, kind string, name string, decoder *yaml.Decoder) (SourceConfig, error)
⋮----
// SourceConfig is the interface for configuring a source.
type SourceConfig interface {
	SourceConfigKind() string
	Initialize(ctx context.Context, tracer trace.Tracer) (Source, error)
}
⋮----
// Source is the interface for the source itself.
type Source interface {
	SourceKind() string
}
⋮----
// InitConnectionSpan adds a span for database pool connection initialization
func InitConnectionSpan(ctx context.Context, tracer trace.Tracer, sourceKind, sourceName string) (context.Context, trace.Span)

================
File: internal/sources/util.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package sources
⋮----
import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"

	"cloud.google.com/go/cloudsqlconn"
	"golang.org/x/oauth2/google"
)
⋮----
"context"
"encoding/json"
"fmt"
"io"
"net/http"
"strings"
⋮----
"cloud.google.com/go/cloudsqlconn"
"golang.org/x/oauth2/google"
⋮----
// GetCloudSQLDialOpts retrieve dial options with the right ip type and user agent for cloud sql
// databases.
func GetCloudSQLOpts(ipType, userAgent string, useIAM bool) ([]cloudsqlconn.Option, error)
⋮----
// GetIAMPrincipalEmailFromADC finds the email associated with ADC
func GetIAMPrincipalEmailFromADC(ctx context.Context) (string, error)
⋮----
// Finds ADC and returns an HTTP client associated with it
⋮----
// Retrieve the email associated with the token
⋮----
// Unmarshal response body and get `email`
var responseJSON map[string]any
⋮----
// service account email used for IAM should trim the suffix
⋮----
func GetIAMAccessToken(ctx context.Context) (string, error)
⋮----
token, err := creds.TokenSource.Token() // This gets an oauth2.Token

================
File: internal/telemetry/instrumentation.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package telemetry
⋮----
import (
	"fmt"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)
⋮----
"fmt"
⋮----
"go.opentelemetry.io/otel"
"go.opentelemetry.io/otel/metric"
"go.opentelemetry.io/otel/trace"
⋮----
const (
	TracerName = "github.com/googleapis/genai-toolbox/internal/opentel"
	MetricName = "github.com/googleapis/genai-toolbox/internal/opentel"

	toolsetGetCountName = "toolbox.server.toolset.get.count"
	toolGetCountName    = "toolbox.server.tool.get.count"
	toolInvokeCountName = "toolbox.server.tool.invoke.count"
	mcpSseCountName     = "toolbox.server.mcp.sse.count"
	mcpPostCountName    = "toolbox.server.mcp.post.count"
)
⋮----
// Instrumentation defines the telemetry instrumentation for toolbox
type Instrumentation struct {
	Tracer     trace.Tracer
	meter      metric.Meter
	ToolsetGet metric.Int64Counter
	ToolGet    metric.Int64Counter
	ToolInvoke metric.Int64Counter
	McpSse     metric.Int64Counter
	McpPost    metric.Int64Counter
}
⋮----
func CreateTelemetryInstrumentation(versionString string) (*Instrumentation, error)

================
File: internal/telemetry/telemetry.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package telemetry
⋮----
import (
	"context"
	"errors"
	"fmt"

	mexporter "github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/metric"
	texporter "github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/trace"
	"go.opentelemetry.io/contrib/propagators/autoprop"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp"
	"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp"
	"go.opentelemetry.io/otel/sdk/metric"
	"go.opentelemetry.io/otel/sdk/resource"
	tracesdk "go.opentelemetry.io/otel/sdk/trace"
	semconv "go.opentelemetry.io/otel/semconv/v1.34.0"
)
⋮----
"context"
"errors"
"fmt"
⋮----
mexporter "github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/metric"
texporter "github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/trace"
"go.opentelemetry.io/contrib/propagators/autoprop"
"go.opentelemetry.io/otel"
"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp"
"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp"
"go.opentelemetry.io/otel/sdk/metric"
"go.opentelemetry.io/otel/sdk/resource"
tracesdk "go.opentelemetry.io/otel/sdk/trace"
semconv "go.opentelemetry.io/otel/semconv/v1.34.0"
⋮----
// setupOTelSDK bootstraps the OpenTelemetry pipeline.
// If it does not return an error, make sure to call shutdown for proper cleanup.
func SetupOTel(ctx context.Context, versionString, telemetryOTLP string, telemetryGCP bool, telemetryServiceName string) (shutdown func(context.Context) error, err error)
⋮----
var shutdownFuncs []func(context.Context) error
⋮----
// shutdown calls cleanup functions registered via shutdownFuncs.
// The errors from the calls are joined.
// Each registered cleanup will be invoked once.
⋮----
var err error
⋮----
// handleErr calls shutdown for cleanup and makes sure that all errors are returned.
⋮----
// Configure Context Propagation to use the default W3C traceparent format.
⋮----
// newResource create default resources for telemetry data.
// Resource represents the entity producing telemetry.
func newResource(ctx context.Context, versionString string, telemetryServiceName string) (*resource.Resource, error)
⋮----
// Ensure default SDK resources and the required service name are set.
⋮----
resource.WithFromEnv(),      // Discover and provide attributes from OTEL_RESOURCE_ATTRIBUTES and OTEL_SERVICE_NAME environment variables.
resource.WithTelemetrySDK(), // Discover and provide information about the OTel SDK used.
resource.WithOS(),           // Discover and provide OS information.
resource.WithContainer(),    // Discover and provide container information.
resource.WithHost(),         //Discover and provide host information.
resource.WithSchemaURL(semconv.SchemaURL), // Set the schema url.
resource.WithAttributes( // Add other custom resource attributes.
⋮----
// newTracerProvider creates TracerProvider.
// TracerProvider is a factory for Tracers and is responsible for creating spans.
func newTracerProvider(ctx context.Context, r *resource.Resource, telemetryOTLP string, telemetryGCP bool) (*tracesdk.TracerProvider, error)
⋮----
// otlptracehttp provides an OTLP span exporter using HTTP with protobuf payloads.
// By default, the telemetry is sent to https://localhost:4318/v1/traces.
⋮----
// newMeterProvider creates MeterProvider.
// MeterProvider is a factory for Meters, and is responsible for creating metrics.
func newMeterProvider(ctx context.Context, r *resource.Resource, telemetryOTLP string, telemetryGCP bool) (*metric.MeterProvider, error)
⋮----
// otlpmetrichttp provides an OTLP metrics exporter using HTTP with protobuf payloads.
// By default, the telemetry is sent to https://localhost:4318/v1/metrics.

================
File: internal/testutils/testutils.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package testutils
⋮----
import (
	"bufio"
	"context"
	"fmt"
	"io"
	"os"
	"regexp"
	"strings"

	"github.com/googleapis/genai-toolbox/internal/log"
	"github.com/googleapis/genai-toolbox/internal/util"
)
⋮----
"bufio"
"context"
"fmt"
"io"
"os"
"regexp"
"strings"
⋮----
"github.com/googleapis/genai-toolbox/internal/log"
"github.com/googleapis/genai-toolbox/internal/util"
⋮----
// formatYaml is a utility function for stripping out tabs in multiline strings
func FormatYaml(in string) []byte
⋮----
// removes any leading indentation(tabs)
⋮----
// converts remaining indentation
⋮----
// ContextWithNewLogger create a new context with new logger
func ContextWithNewLogger() (context.Context, error)
⋮----
// WaitForString waits until the server logs a single line that matches the provided regex.
// returns the output of whatever the server sent so far.
func WaitForString(ctx context.Context, re *regexp.Regexp, pr io.ReadCloser) (string, error)
⋮----
// read lines in background, sending result of each read over a channel
// this allows us to use in.ReadString without blocking
type result struct {
		s   string
		err error
	}
⋮----
// if the context is canceled, the orig thread will send back the error
// so we can just exit the goroutine here
⋮----
// otherwise read a line from the output
⋮----
// if that last string matched, exit the goroutine
⋮----
// collect the output until the ctx is canceled, an error was hit,
// or match was found (which is indicated the channel is closed)
var sb strings.Builder
⋮----
// if ctx is done, return that error
⋮----
// match was found!
⋮----
// error was found!

================
File: internal/tools/alloydbainl/alloydbainl_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package alloydbainl_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/tools/alloydbainl"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/tools/alloydbainl"
⋮----
func TestParseFromYamlAlloyDBNLA(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/alloydbainl/alloydbainl.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package alloydbainl
⋮----
import (
	"context"
	"fmt"
	"strings"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/alloydbpg"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/jackc/pgx/v5/pgxpool"
)
⋮----
"context"
"fmt"
"strings"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/alloydbpg"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/jackc/pgx/v5/pgxpool"
⋮----
const kind string = "alloydb-ai-nl"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	PostgresPool() *pgxpool.Pool
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &alloydbpg.Source{}
⋮----
var compatibleSources = [...]string{alloydbpg.SourceKind}
⋮----
type Config struct {
	Name               string           `yaml:"name" validate:"required"`
	Kind               string           `yaml:"kind" validate:"required"`
	Source             string           `yaml:"source" validate:"required"`
	Description        string           `yaml:"description" validate:"required"`
	NLConfig           string           `yaml:"nlConfig" validate:"required"`
	AuthRequired       []string         `yaml:"authRequired"`
	NLConfigParameters tools.Parameters `yaml:"nlConfigParameters"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
escapedName := strings.ReplaceAll(name, "'", "''") // Escape for SQL literal
⋮----
placeholderParts = append(placeholderParts, fmt.Sprintf("$%d", i+3)) // $1, $2 reserved
⋮----
var paramNamesSQL string
var paramValuesSQL string
⋮----
// execute_nl_query is the AlloyDB AI function that executes the natural language query
// The first parameter is the natural language query, which is passed as $1
// The second parameter is the NLConfig, which is passed as a $2
// The following params are the list of PSV values passed to the NLConfig
// Example SQL statement being executed:
// SELECT alloydb_ai_nl.execute_nl_query('How many tickets do I have?', 'cymbal_air_nl_config', param_names => ARRAY ['user_email'], param_values => ARRAY ['hailongli@google.com']);
⋮----
"question",                              // name
"The natural language question to ask.", // description
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	Pool        *pgxpool.Pool
	Statement   string
	NLConfig    string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
allParamValues[0] = fmt.Sprintf("%s", sliceParams[0]) // nl_question
allParamValues[1] = t.NLConfig                        // nl_config
⋮----
var out []any
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/bigquery/bigqueryexecutesql/bigqueryexecutesql_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigqueryexecutesql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/bigquery/bigqueryexecutesql"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/bigquery/bigqueryexecutesql"
⋮----
func TestParseFromYamlBigQueryExecuteSql(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/bigquery/bigqueryexecutesql/bigqueryexecutesql.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigqueryexecutesql
⋮----
import (
	"context"
	"fmt"

	bigqueryapi "cloud.google.com/go/bigquery"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	bigqueryds "github.com/googleapis/genai-toolbox/internal/sources/bigquery"
	"github.com/googleapis/genai-toolbox/internal/tools"
	bigqueryrestapi "google.golang.org/api/bigquery/v2"
	"google.golang.org/api/iterator"
)
⋮----
"context"
"fmt"
⋮----
bigqueryapi "cloud.google.com/go/bigquery"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
bigqueryds "github.com/googleapis/genai-toolbox/internal/sources/bigquery"
"github.com/googleapis/genai-toolbox/internal/tools"
bigqueryrestapi "google.golang.org/api/bigquery/v2"
"google.golang.org/api/iterator"
⋮----
const kind string = "bigquery-execute-sql"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	BigQueryClient() *bigqueryapi.Client
	BigQueryRestService() *bigqueryrestapi.Service
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &bigqueryds.Source{}
⋮----
var compatibleSources = [...]string{bigqueryds.SourceKind}
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`
	Client       *bigqueryapi.Client
	RestService  *bigqueryrestapi.Service
	manifest     tools.Manifest
	mcpManifest  tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// JobStatistics.QueryStatistics.StatementType
⋮----
// This block handles Data Manipulation Language (DML) and Data Definition Language (DDL) statements.
// These statements (e.g., INSERT, UPDATE, CREATE TABLE) do not return a row set.
// Instead, we execute them as a job, wait for completion, and return a success
// message, including the number of affected rows for DML operations.
⋮----
// This block handles SELECT statements, which return a row set.
// We iterate through the results, convert each row into a map of
// column names to values, and return the collection of rows.
var out []any
⋮----
var row map[string]bigqueryapi.Value
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool
⋮----
// dryRunQuery performs a dry run of the SQL query to validate it and get metadata.
func dryRunQuery(ctx context.Context, restService *bigqueryrestapi.Service, projectID string, sql string) (*bigqueryrestapi.Job, error)

================
File: internal/tools/bigquery/bigquerygetdatasetinfo/bigquerygetdatasetinfo_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigquerygetdatasetinfo_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/bigquery/bigquerygetdatasetinfo"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/bigquery/bigquerygetdatasetinfo"
⋮----
func TestParseFromYamlBigQueryGetDatasetInfo(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/bigquery/bigquerygetdatasetinfo/bigquerygetdatasetinfo.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigquerygetdatasetinfo
⋮----
import (
	"context"
	"fmt"

	bigqueryapi "cloud.google.com/go/bigquery"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	bigqueryds "github.com/googleapis/genai-toolbox/internal/sources/bigquery"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"fmt"
⋮----
bigqueryapi "cloud.google.com/go/bigquery"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
bigqueryds "github.com/googleapis/genai-toolbox/internal/sources/bigquery"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "bigquery-get-dataset-info"
const projectKey string = "project"
const datasetKey string = "dataset"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	BigQueryClient() *bigqueryapi.Client
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &bigqueryds.Source{}
⋮----
var compatibleSources = [...]string{bigqueryds.SourceKind}
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	Client      *bigqueryapi.Client
	Statement   string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/bigquery/bigquerygettableinfo/bigquerygettableinfo_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigquerygettableinfo_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/bigquery/bigquerygettableinfo"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/bigquery/bigquerygettableinfo"
⋮----
func TestParseFromYamlBigQueryGetTableInfo(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/bigquery/bigquerygettableinfo/bigquerygettableinfo.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigquerygettableinfo
⋮----
import (
	"context"
	"fmt"

	bigqueryapi "cloud.google.com/go/bigquery"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	bigqueryds "github.com/googleapis/genai-toolbox/internal/sources/bigquery"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"fmt"
⋮----
bigqueryapi "cloud.google.com/go/bigquery"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
bigqueryds "github.com/googleapis/genai-toolbox/internal/sources/bigquery"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "bigquery-get-table-info"
const projectKey string = "project"
const datasetKey string = "dataset"
const tableKey string = "table"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	BigQueryClient() *bigqueryapi.Client
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &bigqueryds.Source{}
⋮----
var compatibleSources = [...]string{bigqueryds.SourceKind}
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	Client      *bigqueryapi.Client
	Statement   string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/bigquery/bigquerylistdatasetids/bigquerylistdatasetids_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigquerylistdatasetids_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/bigquery/bigquerylistdatasetids"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/bigquery/bigquerylistdatasetids"
⋮----
func TestParseFromYamlBigQueryListDatasetIds(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/bigquery/bigquerylistdatasetids/bigquerylistdatasetids.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigquerylistdatasetids
⋮----
import (
	"context"
	"fmt"

	bigqueryapi "cloud.google.com/go/bigquery"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	bigqueryds "github.com/googleapis/genai-toolbox/internal/sources/bigquery"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"google.golang.org/api/iterator"
)
⋮----
"context"
"fmt"
⋮----
bigqueryapi "cloud.google.com/go/bigquery"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
bigqueryds "github.com/googleapis/genai-toolbox/internal/sources/bigquery"
"github.com/googleapis/genai-toolbox/internal/tools"
"google.golang.org/api/iterator"
⋮----
const kind string = "bigquery-list-dataset-ids"
const projectKey string = "project"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	BigQueryClient() *bigqueryapi.Client
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &bigqueryds.Source{}
⋮----
var compatibleSources = [...]string{bigqueryds.SourceKind}
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	Client      *bigqueryapi.Client
	Statement   string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
var datasetIds []any
⋮----
// Remove leading and trailing quotes
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/bigquery/bigquerylisttableids/bigquerylisttableids_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigquerylisttableids_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/bigquery/bigquerylisttableids"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/bigquery/bigquerylisttableids"
⋮----
func TestParseFromYamlBigQueryListTableIds(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/bigquery/bigquerylisttableids/bigquerylisttableids.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigquerylisttableids
⋮----
import (
	"context"
	"fmt"

	bigqueryapi "cloud.google.com/go/bigquery"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	bigqueryds "github.com/googleapis/genai-toolbox/internal/sources/bigquery"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"google.golang.org/api/iterator"
)
⋮----
"context"
"fmt"
⋮----
bigqueryapi "cloud.google.com/go/bigquery"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
bigqueryds "github.com/googleapis/genai-toolbox/internal/sources/bigquery"
"github.com/googleapis/genai-toolbox/internal/tools"
"google.golang.org/api/iterator"
⋮----
const kind string = "bigquery-list-table-ids"
const projectKey string = "project"
const datasetKey string = "dataset"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	BigQueryClient() *bigqueryapi.Client
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &bigqueryds.Source{}
⋮----
var compatibleSources = [...]string{bigqueryds.SourceKind}
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	Client      *bigqueryapi.Client
	Statement   string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
var tableIds []any
⋮----
// Remove leading and trailing quotes
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/bigquery/bigquerysql/bigquery_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigquerysql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/tools/bigquery/bigquerysql"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/tools/bigquery/bigquerysql"
⋮----
func TestParseFromYamlBigQuery(t *testing.T)
⋮----
// Parse contents
⋮----
func TestParseFromYamlWithTemplateBigQuery(t *testing.T)

================
File: internal/tools/bigquery/bigquerysql/bigquerysql.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigquerysql
⋮----
import (
	"context"
	"fmt"
	"strings"

	bigqueryapi "cloud.google.com/go/bigquery"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	bigqueryds "github.com/googleapis/genai-toolbox/internal/sources/bigquery"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"google.golang.org/api/iterator"
)
⋮----
"context"
"fmt"
"strings"
⋮----
bigqueryapi "cloud.google.com/go/bigquery"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
bigqueryds "github.com/googleapis/genai-toolbox/internal/sources/bigquery"
"github.com/googleapis/genai-toolbox/internal/tools"
"google.golang.org/api/iterator"
⋮----
const kind string = "bigquery-sql"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	BigQueryClient() *bigqueryapi.Client
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &bigqueryds.Source{}
⋮----
var compatibleSources = [...]string{bigqueryds.SourceKind}
⋮----
type Config struct {
	Name               string           `yaml:"name" validate:"required"`
	Kind               string           `yaml:"kind" validate:"required"`
	Source             string           `yaml:"source" validate:"required"`
	Description        string           `yaml:"description" validate:"required"`
	Statement          string           `yaml:"statement" validate:"required"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name               string           `yaml:"name"`
	Kind               string           `yaml:"kind"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
	AllParams          tools.Parameters `yaml:"allParams"`

	Client      *bigqueryapi.Client
	Statement   string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// BigQuery's QueryParameter only accepts typed slices as input
// This checks if the param is an array.
// If yes, convert []any to typed slice (e.g []string, []int)
⋮----
var err error
⋮----
var out []any
⋮----
var row map[string]bigqueryapi.Value
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/bigtable/bigtable_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigtable_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/tools/bigtable"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/tools/bigtable"
⋮----
func TestParseFromYamlBigtable(t *testing.T)
⋮----
// Parse contents
⋮----
func TestParseFromYamlWithTemplateBigtable(t *testing.T)

================
File: internal/tools/bigtable/bigtable.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package bigtable
⋮----
import (
	"context"
	"fmt"

	"cloud.google.com/go/bigtable"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	bigtabledb "github.com/googleapis/genai-toolbox/internal/sources/bigtable"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"fmt"
⋮----
"cloud.google.com/go/bigtable"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
bigtabledb "github.com/googleapis/genai-toolbox/internal/sources/bigtable"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "bigtable-sql"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	BigtableClient() *bigtable.Client
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &bigtabledb.Source{}
⋮----
var compatibleSources = [...]string{bigtabledb.SourceKind}
⋮----
type Config struct {
	Name               string           `yaml:"name" validate:"required"`
	Kind               string           `yaml:"kind" validate:"required"`
	Source             string           `yaml:"source" validate:"required"`
	Description        string           `yaml:"description" validate:"required"`
	Statement          string           `yaml:"statement" validate:"required"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name               string           `yaml:"name"`
	Kind               string           `yaml:"kind"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
	AllParams          tools.Parameters `yaml:"allParams"`

	Client      *bigtable.Client
	Statement   string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func getBigtableType(paramType string) (bigtable.SQLType, error)
⋮----
func getMapParamsType(tparams tools.Parameters, params tools.ParamValues) (map[string]bigtable.SQLType, error)
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
var out []any
⋮----
var columValue any
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/couchbase/couchbase_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package couchbase_test
⋮----
import (
	"testing"

	"github.com/googleapis/genai-toolbox/internal/tools/couchbase"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"testing"
⋮----
"github.com/googleapis/genai-toolbox/internal/tools/couchbase"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
func TestParseFromYamlCouchbase(t *testing.T)
⋮----
// Create a context with a logger
⋮----
// Parse contents with context
⋮----
func TestParseFromYamlWithTemplateMssql(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/couchbase/couchbase.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package couchbase
⋮----
import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/couchbase/gocb/v2"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/couchbase"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"encoding/json"
"fmt"
⋮----
"github.com/couchbase/gocb/v2"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/couchbase"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "couchbase-sql"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	CouchbaseScope() *gocb.Scope
	CouchbaseQueryScanConsistency() uint
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &couchbase.Source{}
⋮----
var compatibleSources = [...]string{couchbase.SourceKind}
⋮----
type Config struct {
	Name               string           `yaml:"name" validate:"required"`
	Kind               string           `yaml:"kind" validate:"required"`
	Source             string           `yaml:"source" validate:"required"`
	Description        string           `yaml:"description" validate:"required"`
	Statement          string           `yaml:"statement" validate:"required"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name               string           `yaml:"name"`
	Kind               string           `yaml:"kind"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
	AllParams          tools.Parameters `yaml:"allParams"`
	AuthRequired       []string         `yaml:"authRequired"`

	Scope                *gocb.Scope
	QueryScanConsistency uint
	Statement            string
	manifest             tools.Manifest
	mcpManifest          tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
var out []any
⋮----
var result json.RawMessage
⋮----
func (t Tool) ParseParams(data map[string]any, claimsMap map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthSources []string) bool

================
File: internal/tools/dgraph/dgraph_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package dgraph_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/dgraph"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/dgraph"
⋮----
func TestParseFromYamlDgraph(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/dgraph/dgraph.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package dgraph
⋮----
import (
	"context"
	"encoding/json"
	"fmt"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/dgraph"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"encoding/json"
"fmt"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/dgraph"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "dgraph-dql"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	DgraphClient() *dgraph.DgraphClient
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &dgraph.Source{}
⋮----
var compatibleSources = [...]string{dgraph.SourceKind}
⋮----
type Config struct {
	Name         string           `yaml:"name" validate:"required"`
	Kind         string           `yaml:"kind" validate:"required"`
	Source       string           `yaml:"source" validate:"required"`
	Description  string           `yaml:"description" validate:"required"`
	Statement    string           `yaml:"statement" validate:"required"`
	AuthRequired []string         `yaml:"authRequired"`
	IsQuery      bool             `yaml:"isQuery"`
	Timeout      string           `yaml:"timeout"`
	Parameters   tools.Parameters `yaml:"parameters"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	Parameters   tools.Parameters `yaml:"parameters"`
	AuthRequired []string         `yaml:"authRequired"`
	DgraphClient *dgraph.DgraphClient
	IsQuery      bool
	Timeout      string
	Statement    string
	manifest     tools.Manifest
	mcpManifest  tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
var result struct {
		Data map[string]interface{} `json:"data"`
	}
⋮----
func (t Tool) ParseParams(data map[string]any, claimsMap map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/firestore/firestoredeletedocuments/firestoredeletedocuments_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package firestoredeletedocuments_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/firestore/firestoredeletedocuments"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/firestore/firestoredeletedocuments"
⋮----
func TestParseFromYamlFirestoreDeleteDocuments(t *testing.T)
⋮----
// Parse contents
⋮----
func TestParseFromYamlMultipleTools(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/firestore/firestoredeletedocuments/firestoredeletedocuments.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package firestoredeletedocuments
⋮----
import (
	"context"
	"fmt"

	firestoreapi "cloud.google.com/go/firestore"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	firestoreds "github.com/googleapis/genai-toolbox/internal/sources/firestore"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"fmt"
⋮----
firestoreapi "cloud.google.com/go/firestore"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
firestoreds "github.com/googleapis/genai-toolbox/internal/sources/firestore"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "firestore-delete-documents"
const documentPathsKey string = "documentPaths"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	FirestoreClient() *firestoreapi.Client
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &firestoreds.Source{}
⋮----
var compatibleSources = [...]string{firestoreds.SourceKind}
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	Client      *firestoreapi.Client
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// Use ConvertAnySliceToTyped to convert the slice
⋮----
// Create a BulkWriter to handle multiple deletions efficiently
⋮----
// Keep track of jobs for each document
⋮----
// Add all delete operations to the BulkWriter
⋮----
// End the BulkWriter to execute all operations
⋮----
// Collect results
⋮----
// Wait for the job to complete and get the result
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/firestore/firestoregetdocuments/firestoregetdocuments_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package firestoregetdocuments_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/firestore/firestoregetdocuments"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/firestore/firestoregetdocuments"
⋮----
func TestParseFromYamlFirestoreGetDocuments(t *testing.T)
⋮----
// Parse contents
⋮----
func TestParseFromYamlMultipleTools(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/firestore/firestoregetdocuments/firestoregetdocuments.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package firestoregetdocuments
⋮----
import (
	"context"
	"fmt"

	firestoreapi "cloud.google.com/go/firestore"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	firestoreds "github.com/googleapis/genai-toolbox/internal/sources/firestore"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"fmt"
⋮----
firestoreapi "cloud.google.com/go/firestore"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
firestoreds "github.com/googleapis/genai-toolbox/internal/sources/firestore"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "firestore-get-documents"
const documentPathsKey string = "documentPaths"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	FirestoreClient() *firestoreapi.Client
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &firestoreds.Source{}
⋮----
var compatibleSources = [...]string{firestoreds.SourceKind}
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	Client      *firestoreapi.Client
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// Use ConvertAnySliceToTyped to convert the slice
⋮----
// Create document references from paths
⋮----
// Get all documents
⋮----
// Convert snapshots to response data
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/firestore/firestoregetrules/firestoregetrules_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package firestoregetrules_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/firestore/firestoregetrules"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/firestore/firestoregetrules"
⋮----
func TestParseFromYamlFirestoreGetRules(t *testing.T)
⋮----
// Parse contents
⋮----
func TestParseFromYamlMultipleTools(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/firestore/firestoregetrules/firestoregetrules.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package firestoregetrules
⋮----
import (
	"context"
	"fmt"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	firestoreds "github.com/googleapis/genai-toolbox/internal/sources/firestore"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"google.golang.org/api/firebaserules/v1"
)
⋮----
"context"
"fmt"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
firestoreds "github.com/googleapis/genai-toolbox/internal/sources/firestore"
"github.com/googleapis/genai-toolbox/internal/tools"
"google.golang.org/api/firebaserules/v1"
⋮----
const kind string = "firestore-get-rules"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	FirebaseRulesClient() *firebaserules.Service
	GetProjectId() string
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &firestoreds.Source{}
⋮----
var compatibleSources = [...]string{firestoreds.SourceKind}
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// No parameters needed for this tool
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	RulesClient *firebaserules.Service
	ProjectId   string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// Get the latest release for Firestore
⋮----
// Get the ruleset content
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/firestore/firestorelistcollections/firestorelistcollections_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package firestorelistcollections_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/firestore/firestorelistcollections"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/firestore/firestorelistcollections"
⋮----
func TestParseFromYamlFirestoreListCollections(t *testing.T)
⋮----
// Parse contents
⋮----
func TestParseFromYamlMultipleTools(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/firestore/firestorelistcollections/firestorelistcollections.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package firestorelistcollections
⋮----
import (
	"context"
	"fmt"

	firestoreapi "cloud.google.com/go/firestore"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	firestoreds "github.com/googleapis/genai-toolbox/internal/sources/firestore"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"fmt"
⋮----
firestoreapi "cloud.google.com/go/firestore"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
firestoreds "github.com/googleapis/genai-toolbox/internal/sources/firestore"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "firestore-list-collections"
const parentPathKey string = "parentPath"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	FirestoreClient() *firestoreapi.Client
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &firestoreds.Source{}
⋮----
var compatibleSources = [...]string{firestoreds.SourceKind}
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	Client      *firestoreapi.Client
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
var collectionRefs []*firestoreapi.CollectionRef
var err error
⋮----
// Check if parentPath is provided
⋮----
// List subcollections of the specified document
⋮----
// List root collections
⋮----
// Convert collection references to response data
⋮----
// If this is a subcollection, include parent information
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/firestore/firestorequerycollection/firestorequerycollection_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package firestorequerycollection_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/firestore/firestorequerycollection"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/firestore/firestorequerycollection"
⋮----
func TestParseFromYamlFirestoreQueryCollection(t *testing.T)
⋮----
// Parse contents
⋮----
func TestParseFromYamlMultipleTools(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/firestore/firestorequerycollection/firestorequerycollection.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package firestorequerycollection
⋮----
import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	firestoreapi "cloud.google.com/go/firestore"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	firestoreds "github.com/googleapis/genai-toolbox/internal/sources/firestore"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"encoding/json"
"fmt"
"strings"
⋮----
firestoreapi "cloud.google.com/go/firestore"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
firestoreds "github.com/googleapis/genai-toolbox/internal/sources/firestore"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
// Constants for tool configuration
const (
	kind            = "firestore-query-collection"
	defaultLimit    = 100
	defaultAnalyze  = false
	maxFilterLength = 100 // Maximum filters to prevent abuse
)
⋮----
maxFilterLength = 100 // Maximum filters to prevent abuse
⋮----
// Parameter keys
const (
	collectionPathKey = "collectionPath"
	filtersKey        = "filters"
	orderByKey        = "orderBy"
	limitKey          = "limit"
	analyzeQueryKey   = "analyzeQuery"
)
⋮----
// Firestore operators
var validOperators = map[string]bool{
	"<":                  true,
	"<=":                 true,
	">":                  true,
	">=":                 true,
	"==":                 true,
	"!=":                 true,
	"array-contains":     true,
	"array-contains-any": true,
	"in":                 true,
	"not-in":             true,
}
⋮----
// Error messages
const (
	errMissingCollectionPath = "invalid or missing '%s' parameter"
	errInvalidFilters        = "invalid '%s' parameter; expected an array"
	errFilterNotString       = "filter at index %d is not a string"
	errFilterParseFailed     = "failed to parse filter at index %d: %w"
	errInvalidOperator       = "unsupported operator: %s. Valid operators are: %v"
	errMissingFilterValue    = "no value specified for filter on field '%s'"
	errOrderByParseFailed    = "failed to parse orderBy: %w"
	errQueryExecutionFailed  = "failed to execute query: %w"
	errTooManyFilters        = "too many filters provided: %d (maximum: %d)"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
// compatibleSource defines the interface for sources that can provide a Firestore client
type compatibleSource interface {
	FirestoreClient() *firestoreapi.Client
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &firestoreds.Source{}
⋮----
var compatibleSources = [...]string{firestoreds.SourceKind}
⋮----
// Config represents the configuration for the Firestore query collection tool
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
// ToolConfigKind returns the kind of tool configuration
func (cfg Config) ToolConfigKind() string
⋮----
// Initialize creates a new Tool instance from the configuration
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// Create parameters
⋮----
// finish tool setup
⋮----
// createParameters creates the parameter definitions for the tool
func createParameters() tools.Parameters
⋮----
var _ tools.Tool = Tool{}
⋮----
// Tool represents the Firestore query collection tool
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	Client      *firestoreapi.Client
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
// FilterConfig represents a filter for the query
type FilterConfig struct {
	Field string      `json:"field"`
	Op    string      `json:"op"`
	Value interface{} `json:"value"`
⋮----
// Validate checks if the filter configuration is valid
func (f *FilterConfig) Validate() error
⋮----
// OrderByConfig represents ordering configuration
type OrderByConfig struct {
	Field     string `json:"field"`
	Direction string `json:"direction"`
}
⋮----
// GetDirection returns the Firestore direction constant
func (o *OrderByConfig) GetDirection() firestoreapi.Direction
⋮----
// QueryResult represents a document result from the query
type QueryResult struct {
	ID         string         `json:"id"`
	Path       string         `json:"path"`
	Data       map[string]any `json:"data"`
	CreateTime interface{}    `json:"createTime,omitempty"`
⋮----
// QueryResponse represents the full response including optional metrics
type QueryResponse struct {
	Documents      []QueryResult  `json:"documents"`
	ExplainMetrics map[string]any `json:"explainMetrics,omitempty"`
}
⋮----
// Invoke executes the Firestore query based on the provided parameters
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// Parse parameters
⋮----
// Build the query
⋮----
// Execute the query and return results
⋮----
// queryParameters holds all parsed query parameters
type queryParameters struct {
	CollectionPath string
	Filters        []FilterConfig
	OrderBy        *OrderByConfig
	Limit          int
	AnalyzeQuery   bool
}
⋮----
// parseQueryParameters extracts and validates parameters from the input
func (t Tool) parseQueryParameters(params tools.ParamValues) (*queryParameters, error)
⋮----
// Get collection path
⋮----
// Parse filters
⋮----
// Parse orderBy
⋮----
// Parse limit
⋮----
// Parse analyze
⋮----
// parseFilters parses and validates filter configurations
func (t Tool) parseFilters(filtersRaw interface
⋮----
var filter FilterConfig
⋮----
// parseOrderBy parses the orderBy configuration
func (t Tool) parseOrderBy(orderByRaw interface
⋮----
var orderBy OrderByConfig
⋮----
// buildQuery constructs the Firestore query from parameters
func (t Tool) buildQuery(params *queryParameters) (*firestoreapi.Query, error)
⋮----
// Apply filters
⋮----
// Apply ordering
⋮----
// Apply limit
⋮----
// Apply analyze options
⋮----
// executeQuery runs the query and formats the results
func (t Tool) executeQuery(ctx context.Context, query *firestoreapi.Query, analyzeQuery bool) (any, error)
⋮----
// Convert results to structured format
⋮----
// Return with explain metrics if requested
⋮----
// Return just the documents
⋮----
// getExplainMetrics extracts explain metrics from the query iterator
func (t Tool) getExplainMetrics(docIterator *firestoreapi.DocumentIterator) (map[string]any, error)
⋮----
// Add plan summary if available
⋮----
// Add execution stats if available
⋮----
// ParseParams parses and validates input parameters
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
// Manifest returns the tool manifest
func (t Tool) Manifest() tools.Manifest
⋮----
// McpManifest returns the MCP manifest
func (t Tool) McpManifest() tools.McpManifest
⋮----
// Authorized checks if the tool is authorized based on verified auth services
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/firestore/firestorevalidaterules/firestorevalidaterules_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package firestorevalidaterules_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/firestore/firestorevalidaterules"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/firestore/firestorevalidaterules"
⋮----
func TestParseFromYamlFirestoreValidateRules(t *testing.T)
⋮----
// Parse contents
⋮----
func TestParseFromYamlMultipleTools(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/firestore/firestorevalidaterules/firestorevalidaterules.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package firestorevalidaterules
⋮----
import (
	"context"
	"fmt"
	"strings"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	firestoreds "github.com/googleapis/genai-toolbox/internal/sources/firestore"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"google.golang.org/api/firebaserules/v1"
)
⋮----
"context"
"fmt"
"strings"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
firestoreds "github.com/googleapis/genai-toolbox/internal/sources/firestore"
"github.com/googleapis/genai-toolbox/internal/tools"
"google.golang.org/api/firebaserules/v1"
⋮----
const kind string = "firestore-validate-rules"
⋮----
// Parameter keys
const (
	sourceKey = "source"
)
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	FirebaseRulesClient() *firebaserules.Service
	GetProjectId() string
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &firestoreds.Source{}
⋮----
var compatibleSources = [...]string{firestoreds.SourceKind}
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// Create parameters
⋮----
// finish tool setup
⋮----
// createParameters creates the parameter definitions for the tool
func createParameters() tools.Parameters
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	RulesClient *firebaserules.Service
	ProjectId   string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
// Issue represents a validation issue in the rules
type Issue struct {
	SourcePosition SourcePosition `json:"sourcePosition"`
	Description    string         `json:"description"`
	Severity       string         `json:"severity"`
}
⋮----
// SourcePosition represents the location of an issue in the source
type SourcePosition struct {
	FileName      string `json:"fileName,omitempty"`
	Line          int64  `json:"line"`          // 1-based
	Column        int64  `json:"column"`        // 1-based
	CurrentOffset int64  `json:"currentOffset"` // 0-based, inclusive start
	EndOffset     int64  `json:"endOffset"`     // 0-based, exclusive end
}
⋮----
Line          int64  `json:"line"`          // 1-based
Column        int64  `json:"column"`        // 1-based
CurrentOffset int64  `json:"currentOffset"` // 0-based, inclusive start
EndOffset     int64  `json:"endOffset"`     // 0-based, exclusive end
⋮----
// ValidationResult represents the result of rules validation
type ValidationResult struct {
	Valid           bool    `json:"valid"`
	IssueCount      int     `json:"issueCount"`
	FormattedIssues string  `json:"formattedIssues,omitempty"`
	RawIssues       []Issue `json:"rawIssues,omitempty"`
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// Get source parameter
⋮----
// Create test request
⋮----
// We don't need test cases for validation only
⋮----
// Call the test API
⋮----
// Process the response
⋮----
func (t Tool) processValidationResponse(response *firebaserules.TestRulesetResponse, source string) ValidationResult
⋮----
// Convert issues to our format
⋮----
// Format issues
⋮----
// formatRulesetIssues formats validation issues into a human-readable string with code snippets
func (t Tool) formatRulesetIssues(issues []Issue, rulesSource string) string
⋮----
var formattedOutput []string
⋮----
lineIndex := int(issue.SourcePosition.Line - 1) // 0-based index
⋮----
// Add carets if we have column and offset information
⋮----
startColumn := int(issue.SourcePosition.Column - 1) // 0-based
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/http/http_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package http_test
⋮----
import (
	"strings"
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
	http "github.com/googleapis/genai-toolbox/internal/tools/http"
)
⋮----
"strings"
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
http "github.com/googleapis/genai-toolbox/internal/tools/http"
⋮----
func TestParseFromYamlHTTP(t *testing.T)
⋮----
// Parse contents
⋮----
func TestFailParseFromYamlHTTP(t *testing.T)

================
File: internal/tools/http/http.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//	http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package http
⋮----
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"slices"
	"strings"

	"maps"
	"text/template"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	httpsrc "github.com/googleapis/genai-toolbox/internal/sources/http"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"bytes"
"context"
"encoding/json"
"fmt"
"io"
"net/http"
"net/url"
"slices"
"strings"
⋮----
"maps"
"text/template"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
httpsrc "github.com/googleapis/genai-toolbox/internal/sources/http"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "http"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type Config struct {
	Name         string            `yaml:"name" validate:"required"`
	Kind         string            `yaml:"kind" validate:"required"`
	Source       string            `yaml:"source" validate:"required"`
	Description  string            `yaml:"description" validate:"required"`
	AuthRequired []string          `yaml:"authRequired"`
	Path         string            `yaml:"path" validate:"required"`
	Method       tools.HTTPMethod  `yaml:"method" validate:"required"`
	Headers      map[string]string `yaml:"headers"`
	RequestBody  string            `yaml:"requestBody"`
	PathParams   tools.Parameters  `yaml:"pathParams"`
	QueryParams  tools.Parameters  `yaml:"queryParams"`
	BodyParams   tools.Parameters  `yaml:"bodyParams"`
	HeaderParams tools.Parameters  `yaml:"headerParams"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// Combine Source and Tool headers.
// In case of conflict, Tool header overrides Source header
⋮----
// Create a slice for all parameters
⋮----
// Create parameter MCP manifest
⋮----
// Concatenate parameters for MCP `required` field
⋮----
// Concatenate parameters for MCP `properties` field
⋮----
// Create a new McpToolsSchema with all parameters
⋮----
// Verify there are no duplicate parameter names
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string   `yaml:"name"`
	Kind         string   `yaml:"kind"`
	Description  string   `yaml:"description"`
	AuthRequired []string `yaml:"authRequired"`

	BaseURL            string            `yaml:"baseURL"`
	Path               string            `yaml:"path"`
	Method             tools.HTTPMethod  `yaml:"method"`
	Headers            map[string]string `yaml:"headers"`
	DefaultQueryParams map[string]string `yaml:"defaultQueryParams"`

	RequestBody  string           `yaml:"requestBody"`
	PathParams   tools.Parameters `yaml:"pathParams"`
	QueryParams  tools.Parameters `yaml:"queryParams"`
	BodyParams   tools.Parameters `yaml:"bodyParams"`
	HeaderParams tools.Parameters `yaml:"headerParams"`
	AllParams    tools.Parameters `yaml:"allParams"`

	Client      *http.Client
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
// helper function to convert a parameter to JSON formatted string.
func convertParamToJSON(param any) (string, error)
⋮----
// Helper function to generate the HTTP request body upon Tool invocation.
func getRequestBody(bodyParams tools.Parameters, requestBodyPayload string, paramsMap map[string]any) (string, error)
⋮----
// Create a FuncMap to format array parameters
⋮----
var result bytes.Buffer
⋮----
// Helper function to generate the HTTP request URL upon Tool invocation.
func getURL(baseURL, path string, pathParams, queryParams tools.Parameters, defaultQueryParams map[string]string, paramsMap map[string]any) (string, error)
⋮----
// use Go template to replace path params
⋮----
var templatedPath bytes.Buffer
⋮----
// Create URL based on BaseURL and Path
// Attach query parameters
⋮----
// Get existing query parameters from the URL
⋮----
// Set dynamic query parameters
⋮----
// Helper function to generate the HTTP headers upon Tool invocation.
func getHeaders(headerParams tools.Parameters, defaultHeaders map[string]string, paramsMap map[string]any) (map[string]string, error)
⋮----
// Populate header params
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// Calculate request body
⋮----
// Calculate URL
⋮----
// Calculate request headers
⋮----
// Set request headers
⋮----
// Make request and fetch response
⋮----
var body []byte
⋮----
var data any
⋮----
// if unable to unmarshal data, return result as string.
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/mssql/mssqlexecutesql/mssqlexecutesql_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package mssqlexecutesql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/mssql/mssqlexecutesql"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/mssql/mssqlexecutesql"
⋮----
func TestParseFromYamlExecuteSql(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/mssql/mssqlexecutesql/mssqlexecutesql.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package mssqlexecutesql
⋮----
import (
	"context"
	"database/sql"
	"fmt"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlmssql"
	"github.com/googleapis/genai-toolbox/internal/sources/mssql"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"database/sql"
"fmt"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlmssql"
"github.com/googleapis/genai-toolbox/internal/sources/mssql"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "mssql-execute-sql"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	MSSQLDB() *sql.DB
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &cloudsqlmssql.Source{}
var _ compatibleSource = &mssql.Source{}
⋮----
var compatibleSources = [...]string{cloudsqlmssql.SourceKind, mssql.SourceKind}
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	Pool        *sql.DB
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// If Columns() errors, it might be a DDL/DML without an OUTPUT clause.
// We proceed, and results.Err() will catch actual query execution errors.
// 'out' will remain nil if cols is empty or err is not nil here.
⋮----
var out []any
⋮----
// create an array of values for each column, which can be re-used to scan each row
⋮----
// Check for errors from iterating over rows or from the query execution itself.
// results.Close() is handled by defer.
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/mssql/mssqlsql/mssqlsql_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package mssqlsql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/tools/mssql/mssqlsql"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/tools/mssql/mssqlsql"
⋮----
func TestParseFromYamlMssql(t *testing.T)
⋮----
// Parse contents
⋮----
func TestParseFromYamlWithTemplateMssql(t *testing.T)

================
File: internal/tools/mssql/mssqlsql/mssqlsql.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package mssqlsql
⋮----
import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlmssql"
	"github.com/googleapis/genai-toolbox/internal/sources/mssql"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"database/sql"
"fmt"
"strings"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlmssql"
"github.com/googleapis/genai-toolbox/internal/sources/mssql"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "mssql-sql"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	MSSQLDB() *sql.DB
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &cloudsqlmssql.Source{}
var _ compatibleSource = &mssql.Source{}
⋮----
var compatibleSources = [...]string{cloudsqlmssql.SourceKind, mssql.SourceKind}
⋮----
type Config struct {
	Name               string           `yaml:"name" validate:"required"`
	Kind               string           `yaml:"kind" validate:"required"`
	Source             string           `yaml:"source" validate:"required"`
	Description        string           `yaml:"description" validate:"required"`
	Statement          string           `yaml:"statement" validate:"required"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name               string           `yaml:"name"`
	Kind               string           `yaml:"kind"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
	AllParams          tools.Parameters `yaml:"allParams"`

	Db          *sql.DB
	Statement   string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// To support both named args (e.g @id) and positional args (e.g @p1), check
// if arg name is contained in the statement.
⋮----
// create an array of values for each column, which can be re-used to scan each row
⋮----
var out []any
⋮----
// Check if error occurred during iteration
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/mysql/mysqlexecutesql/mysqlexecutesql_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package mysqlexecutesql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/mysql/mysqlexecutesql"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/mysql/mysqlexecutesql"
⋮----
func TestParseFromYamlExecuteSql(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/mysql/mysqlexecutesql/mysqlexecutesql.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package mysqlexecutesql
⋮----
import (
	"context"
	"database/sql"
	"fmt"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlmysql"
	"github.com/googleapis/genai-toolbox/internal/sources/mysql"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"database/sql"
"fmt"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlmysql"
"github.com/googleapis/genai-toolbox/internal/sources/mysql"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "mysql-execute-sql"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	MySQLPool() *sql.DB
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &cloudsqlmysql.Source{}
var _ compatibleSource = &mysql.Source{}
⋮----
var compatibleSources = [...]string{cloudsqlmysql.SourceKind, mysql.SourceKind}
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	Pool        *sql.DB
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// create an array of values for each column, which can be re-used to scan each row
⋮----
var out []any
⋮----
// mysql driver return []uint8 type for "TEXT", "VARCHAR", and "NVARCHAR"
// we'll need to cast it back to string
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/mysql/mysqlsql/mysqlsql_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package mysqlsql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/tools/mysql/mysqlsql"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/tools/mysql/mysqlsql"
⋮----
func TestParseFromYamlMySQL(t *testing.T)
⋮----
// Parse contents
⋮----
func TestParseFromYamlWithTemplateParamsMySQL(t *testing.T)

================
File: internal/tools/mysql/mysqlsql/mysqlsql.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package mysqlsql
⋮----
import (
	"context"
	"database/sql"
	"fmt"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlmysql"
	"github.com/googleapis/genai-toolbox/internal/sources/mysql"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"database/sql"
"fmt"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlmysql"
"github.com/googleapis/genai-toolbox/internal/sources/mysql"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "mysql-sql"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	MySQLPool() *sql.DB
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &cloudsqlmysql.Source{}
var _ compatibleSource = &mysql.Source{}
⋮----
var compatibleSources = [...]string{cloudsqlmysql.SourceKind, mysql.SourceKind}
⋮----
type Config struct {
	Name               string           `yaml:"name" validate:"required"`
	Kind               string           `yaml:"kind" validate:"required"`
	Source             string           `yaml:"source" validate:"required"`
	Description        string           `yaml:"description" validate:"required"`
	Statement          string           `yaml:"statement" validate:"required"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name               string           `yaml:"name"`
	Kind               string           `yaml:"kind"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
	AllParams          tools.Parameters `yaml:"allParams"`

	Pool        *sql.DB
	Statement   string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// create an array of values for each column, which can be re-used to scan each row
⋮----
var out []any
⋮----
// mysql driver return []uint8 type for "TEXT", "VARCHAR", and "NVARCHAR"
// we'll need to cast it back to string
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/neo4j/neo4jcypher/neo4jcypher_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package neo4jcypher
⋮----
import (
	"testing"

	"github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"testing"
⋮----
"github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
func TestParseFromYamlNeo4j(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/neo4j/neo4jcypher/neo4jcypher.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package neo4jcypher
⋮----
import (
	"context"
	"fmt"

	"github.com/goccy/go-yaml"
	neo4jsc "github.com/googleapis/genai-toolbox/internal/sources/neo4j"
	"github.com/neo4j/neo4j-go-driver/v5/neo4j"

	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"fmt"
⋮----
"github.com/goccy/go-yaml"
neo4jsc "github.com/googleapis/genai-toolbox/internal/sources/neo4j"
"github.com/neo4j/neo4j-go-driver/v5/neo4j"
⋮----
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "neo4j-cypher"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	Neo4jDriver() neo4j.DriverWithContext
	Neo4jDatabase() string
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &neo4jsc.Source{}
⋮----
var compatibleSources = [...]string{neo4jsc.SourceKind}
⋮----
type Config struct {
	Name         string           `yaml:"name" validate:"required"`
	Kind         string           `yaml:"kind" validate:"required"`
	Source       string           `yaml:"source" validate:"required"`
	Description  string           `yaml:"description" validate:"required"`
	Statement    string           `yaml:"statement" validate:"required"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	Parameters   tools.Parameters `yaml:"parameters"`
	AuthRequired []string         `yaml:"authRequired"`

	Driver      neo4j.DriverWithContext
	Database    string
	Statement   string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
var out []any
⋮----
func (t Tool) ParseParams(data map[string]any, claimsMap map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/postgres/postgresexecutesql/postgresexecutesql_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package postgresexecutesql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/postgres/postgresexecutesql"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/postgres/postgresexecutesql"
⋮----
func TestParseFromYamlExecuteSql(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/postgres/postgresexecutesql/postgresexecutesql.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package postgresexecutesql
⋮----
import (
	"context"
	"fmt"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/alloydbpg"
	"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlpg"
	"github.com/googleapis/genai-toolbox/internal/sources/postgres"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/jackc/pgx/v5/pgxpool"
)
⋮----
"context"
"fmt"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/alloydbpg"
"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlpg"
"github.com/googleapis/genai-toolbox/internal/sources/postgres"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/jackc/pgx/v5/pgxpool"
⋮----
const kind string = "postgres-execute-sql"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	PostgresPool() *pgxpool.Pool
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &alloydbpg.Source{}
var _ compatibleSource = &cloudsqlpg.Source{}
var _ compatibleSource = &postgres.Source{}
⋮----
var compatibleSources = [...]string{alloydbpg.SourceKind, cloudsqlpg.SourceKind, postgres.SourceKind}
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	Pool        *pgxpool.Pool
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
var out []any
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/postgres/postgressql/postgressql_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package postgressql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/tools/postgres/postgressql"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/tools/postgres/postgressql"
⋮----
func TestParseFromYamlPostgres(t *testing.T)
⋮----
// Parse contents
⋮----
func TestParseFromYamlWithTemplateParamsPostgres(t *testing.T)

================
File: internal/tools/postgres/postgressql/postgressql.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package postgressql
⋮----
import (
	"context"
	"fmt"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/alloydbpg"
	"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlpg"
	"github.com/googleapis/genai-toolbox/internal/sources/postgres"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/jackc/pgx/v5/pgxpool"
)
⋮----
"context"
"fmt"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/alloydbpg"
"github.com/googleapis/genai-toolbox/internal/sources/cloudsqlpg"
"github.com/googleapis/genai-toolbox/internal/sources/postgres"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/jackc/pgx/v5/pgxpool"
⋮----
const kind string = "postgres-sql"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	PostgresPool() *pgxpool.Pool
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &alloydbpg.Source{}
var _ compatibleSource = &cloudsqlpg.Source{}
var _ compatibleSource = &postgres.Source{}
⋮----
var compatibleSources = [...]string{alloydbpg.SourceKind, cloudsqlpg.SourceKind, postgres.SourceKind}
⋮----
type Config struct {
	Name               string           `yaml:"name" validate:"required"`
	Kind               string           `yaml:"kind" validate:"required"`
	Source             string           `yaml:"source" validate:"required"`
	Description        string           `yaml:"description" validate:"required"`
	Statement          string           `yaml:"statement" validate:"required"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name               string           `yaml:"name"`
	Kind               string           `yaml:"kind"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
	AllParams          tools.Parameters `yaml:"allParams"`

	Pool        *pgxpool.Pool
	Statement   string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
var out []any
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/redis/redis_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package redis_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/tools/redis"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/tools/redis"
⋮----
func TestParseFromYamlRedis(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/redis/redis.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//	http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package redis
⋮----
import (
	"context"
	"fmt"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	redissrc "github.com/googleapis/genai-toolbox/internal/sources/redis"
	"github.com/googleapis/genai-toolbox/internal/tools"
	jsoniter "github.com/json-iterator/go"
	"github.com/redis/go-redis/v9"
)
⋮----
"context"
"fmt"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
redissrc "github.com/googleapis/genai-toolbox/internal/sources/redis"
"github.com/googleapis/genai-toolbox/internal/tools"
jsoniter "github.com/json-iterator/go"
"github.com/redis/go-redis/v9"
⋮----
const kind string = "redis"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	RedisClient() redissrc.RedisClient
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &redissrc.Source{}
⋮----
var compatibleSources = [...]string{redissrc.SourceKind}
⋮----
type Config struct {
	Name         string           `yaml:"name" validate:"required"`
	Kind         string           `yaml:"kind" validate:"required"`
	Source       string           `yaml:"source" validate:"required"`
	Description  string           `yaml:"description" validate:"required"`
	Commands     [][]string       `yaml:"commands" validate:"required"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	Client      redissrc.RedisClient
	Commands    [][]string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// Execute commands
⋮----
// Parse responses
⋮----
// Add error from each command to `errSum`
⋮----
// If result is a map, convert map[any]any to map[string]any
// Because the Go's built-in json/encoding marshalling doesn't support
// map[any]any as an input
var strMap map[string]any
var json = jsoniter.ConfigCompatibleWithStandardLibrary
⋮----
// result is not a map
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool
⋮----
// replaceCommandsParams is a helper function to replace parameters in the commands
⋮----
func replaceCommandsParams(commands [][]string, params tools.Parameters, paramValues tools.ParamValues) ([][]any, error)
⋮----
// Command part is not a Parameter placeholder
⋮----
// Nested arrays will only be expanded once
// e.g., [A, [B, C]]  --> ["A", "[B C]"]

================
File: internal/tools/spanner/spannerexecutesql/spannerexecutesql_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package spannerexecutesql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools/spanner/spannerexecutesql"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools/spanner/spannerexecutesql"
⋮----
func TestParseFromYamlExecuteSql(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/spanner/spannerexecutesql/spannerexecutesql.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package spannerexecutesql
⋮----
import (
	"context"
	"fmt"

	"cloud.google.com/go/spanner"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	spannerdb "github.com/googleapis/genai-toolbox/internal/sources/spanner"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"google.golang.org/api/iterator"
)
⋮----
"context"
"fmt"
⋮----
"cloud.google.com/go/spanner"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
spannerdb "github.com/googleapis/genai-toolbox/internal/sources/spanner"
"github.com/googleapis/genai-toolbox/internal/tools"
"google.golang.org/api/iterator"
⋮----
const kind string = "spanner-execute-sql"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	SpannerClient() *spanner.Client
	DatabaseDialect() string
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &spannerdb.Source{}
⋮----
var compatibleSources = [...]string{spannerdb.SourceKind}
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Source       string   `yaml:"source" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
	ReadOnly     bool     `yaml:"readOnly"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`
	ReadOnly     bool             `yaml:"readOnly"`
	Client       *spanner.Client
	dialect      string
	manifest     tools.Manifest
	mcpManifest  tools.McpManifest
}
⋮----
// processRows iterates over the spanner.RowIterator and converts each row to a map[string]any.
func processRows(iter *spanner.RowIterator) ([]any, error)
⋮----
var out []any
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
var results []any
var opErr error
⋮----
var err error
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/spanner/spannersql/spanner_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package spannersql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/tools/spanner/spannersql"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/tools/spanner/spannersql"
⋮----
func TestParseFromYamlSpanner(t *testing.T)
⋮----
// Parse contents
⋮----
func TestParseFromYamlWithTemplateParamsSpanner(t *testing.T)

================
File: internal/tools/spanner/spannersql/spannersql.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package spannersql
⋮----
import (
	"context"
	"fmt"
	"strings"

	"cloud.google.com/go/spanner"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	spannerdb "github.com/googleapis/genai-toolbox/internal/sources/spanner"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"google.golang.org/api/iterator"
)
⋮----
"context"
"fmt"
"strings"
⋮----
"cloud.google.com/go/spanner"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
spannerdb "github.com/googleapis/genai-toolbox/internal/sources/spanner"
"github.com/googleapis/genai-toolbox/internal/tools"
"google.golang.org/api/iterator"
⋮----
const kind string = "spanner-sql"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	SpannerClient() *spanner.Client
	DatabaseDialect() string
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &spannerdb.Source{}
⋮----
var compatibleSources = [...]string{spannerdb.SourceKind}
⋮----
type Config struct {
	Name               string           `yaml:"name" validate:"required"`
	Kind               string           `yaml:"kind" validate:"required"`
	Source             string           `yaml:"source" validate:"required"`
	Description        string           `yaml:"description" validate:"required"`
	Statement          string           `yaml:"statement" validate:"required"`
	ReadOnly           bool             `yaml:"readOnly"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name               string           `yaml:"name"`
	Kind               string           `yaml:"kind"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
	AllParams          tools.Parameters `yaml:"allParams"`
	ReadOnly           bool             `yaml:"readOnly"`
	Client             *spanner.Client
	dialect            string
	Statement          string
	manifest           tools.Manifest
	mcpManifest        tools.McpManifest
}
⋮----
func getMapParams(params tools.ParamValues, dialect string) (map[string]interface
⋮----
// processRows iterates over the spanner.RowIterator and converts each row to a map[string]any.
func processRows(iter *spanner.RowIterator) ([]any, error)
⋮----
var out []any
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// Spanner only accepts typed slices as input
// This checks if the param is an array.
// If yes, convert []any to typed slice (e.g []string, []int)
⋮----
var err error
⋮----
var results []any
var opErr error
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/sqlitesql/sqlitesql_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package sqlitesql_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/tools/sqlitesql"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/tools/sqlitesql"
⋮----
func TestParseFromYamlSQLite(t *testing.T)
⋮----
// Parse contents
⋮----
func TestParseFromYamlWithTemplateSqlite(t *testing.T)

================
File: internal/tools/sqlitesql/sqlitesql.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package sqlitesql
⋮----
import (
	"context"
	"database/sql"
	"fmt"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/sources/sqlite"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"database/sql"
"fmt"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/sources/sqlite"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "sqlite-sql"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	SQLiteDB() *sql.DB
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &sqlite.Source{}
⋮----
var compatibleSources = [...]string{sqlite.SourceKind}
⋮----
type Config struct {
	Name               string           `yaml:"name" validate:"required"`
	Kind               string           `yaml:"kind" validate:"required"`
	Source             string           `yaml:"source" validate:"required"`
	Description        string           `yaml:"description" validate:"required"`
	Statement          string           `yaml:"statement" validate:"required"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name               string           `yaml:"name"`
	Kind               string           `yaml:"kind"`
	AuthRequired       []string         `yaml:"authRequired"`
	Parameters         tools.Parameters `yaml:"parameters"`
	TemplateParameters tools.Parameters `yaml:"templateParameters"`
	AllParams          tools.Parameters `yaml:"allParams"`

	Db          *sql.DB
	Statement   string `yaml:"statement"`
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// Execute the SQL query with parameters
⋮----
// Get column names
⋮----
// Prepare the result slice
var result []any
// Iterate through the rows
⋮----
// Scan the row into the value pointers
⋮----
// Create a map for this row
⋮----
// Handle nil values
⋮----
// Store the value in the map
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/utility/wait/wait_test.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package wait_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"

	wait "github.com/googleapis/genai-toolbox/internal/tools/utility/wait"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
⋮----
wait "github.com/googleapis/genai-toolbox/internal/tools/utility/wait"
⋮----
func TestParseFromYamlWait(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/utility/wait/wait.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package wait
⋮----
import (
	"context"
	"fmt"
	"time"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"context"
"fmt"
"time"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
const kind string = "wait"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type Config struct {
	Name         string   `yaml:"name" validate:"required"`
	Kind         string   `yaml:"kind" validate:"required"`
	Description  string   `yaml:"description" validate:"required"`
	Timeout      string   `yaml:"timeout" validate:"required"`
	AuthRequired []string `yaml:"authRequired"`
}
⋮----
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(_ map[string]sources.Source) (tools.Tool, error)
⋮----
// validate interface
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name        string
	Kind        string
	Parameters  tools.Parameters
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/valkey/valkey_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package valkey_test
⋮----
import (
	"testing"

	yaml "github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/server"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/googleapis/genai-toolbox/internal/tools/valkey"
)
⋮----
"testing"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/server"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/googleapis/genai-toolbox/internal/tools/valkey"
⋮----
func TestParseFromYamlvalkey(t *testing.T)
⋮----
// Parse contents

================
File: internal/tools/valkey/valkey.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//	http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package valkey
⋮----
import (
	"context"
	"fmt"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
	valkeysrc "github.com/googleapis/genai-toolbox/internal/sources/valkey"
	"github.com/googleapis/genai-toolbox/internal/tools"
	"github.com/valkey-io/valkey-go"
)
⋮----
"context"
"fmt"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
valkeysrc "github.com/googleapis/genai-toolbox/internal/sources/valkey"
"github.com/googleapis/genai-toolbox/internal/tools"
"github.com/valkey-io/valkey-go"
⋮----
const kind string = "valkey"
⋮----
func init()
⋮----
func newConfig(ctx context.Context, name string, decoder *yaml.Decoder) (tools.ToolConfig, error)
⋮----
type compatibleSource interface {
	ValkeyClient() valkey.Client
}
⋮----
// validate compatible sources are still compatible
var _ compatibleSource = &valkeysrc.Source{}
⋮----
var compatibleSources = [...]string{valkeysrc.SourceKind, valkeysrc.SourceKind}
⋮----
type Config struct {
	Name         string           `yaml:"name" validate:"required"`
	Kind         string           `yaml:"kind" validate:"required"`
	Source       string           `yaml:"source" validate:"required"`
	Description  string           `yaml:"description" validate:"required"`
	Commands     [][]string       `yaml:"commands" validate:"required"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`
}
⋮----
// validate interface
var _ tools.ToolConfig = Config{}
⋮----
func (cfg Config) ToolConfigKind() string
⋮----
func (cfg Config) Initialize(srcs map[string]sources.Source) (tools.Tool, error)
⋮----
// verify source exists
⋮----
// verify the source is compatible
⋮----
// finish tool setup
⋮----
var _ tools.Tool = Tool{}
⋮----
type Tool struct {
	Name         string           `yaml:"name"`
	Kind         string           `yaml:"kind"`
	AuthRequired []string         `yaml:"authRequired"`
	Parameters   tools.Parameters `yaml:"parameters"`

	Client      valkey.Client
	Commands    [][]string
	manifest    tools.Manifest
	mcpManifest tools.McpManifest
}
⋮----
func (t Tool) Invoke(ctx context.Context, params tools.ParamValues) (any, error)
⋮----
// Replace parameters
⋮----
// Build commands
⋮----
// Execute commands
⋮----
// Parse responses
⋮----
// Add error from each command to `errSum`
⋮----
// replaceCommandsParams is a helper function to replace parameters in the commands
func replaceCommandsParams(commands [][]string, params tools.Parameters, paramValues tools.ParamValues) ([][]string, error)
⋮----
// Command part is not a Parameter placeholder
⋮----
// Nested arrays will only be expanded once
// e.g., [A, [B, C]]  --> ["A", "[B C]"]
⋮----
func (t Tool) ParseParams(data map[string]any, claims map[string]map[string]any) (tools.ParamValues, error)
⋮----
func (t Tool) Manifest() tools.Manifest
⋮----
func (t Tool) McpManifest() tools.McpManifest
⋮----
func (t Tool) Authorized(verifiedAuthServices []string) bool

================
File: internal/tools/common.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package tools
⋮----
import (
	"fmt"
	"regexp"
)
⋮----
"fmt"
"regexp"
⋮----
var validName = regexp.MustCompile(`^[a-zA-Z0-9_-]*$`)
⋮----
func IsValidName(s string) bool
⋮----
func ConvertAnySliceToTyped(s []any, itemType string) (any, error)
⋮----
var typedSlice any

================
File: internal/tools/http_method.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//	http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package tools
⋮----
import (
	"context"
	"fmt"
	"net/http"
	"strings"
)
⋮----
"context"
"fmt"
"net/http"
"strings"
⋮----
// HTTPMethod is a string of a valid HTTP method (e.g "GET")
type HTTPMethod string
⋮----
// isValidHTTPMethod checks if the input string matches one of the method constants defined in the net/http package
func isValidHTTPMethod(method string) bool
⋮----
func (i *HTTPMethod) UnmarshalYAML(ctx context.Context, unmarshal func(interface
⋮----
var httpMethod string

================
File: internal/tools/parameters_test.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package tools_test
⋮----
import (
	"bytes"
	"encoding/json"
	"math"
	"strings"
	"testing"

	"github.com/goccy/go-yaml"
	"github.com/google/go-cmp/cmp"
	"github.com/googleapis/genai-toolbox/internal/testutils"
	"github.com/googleapis/genai-toolbox/internal/tools"
)
⋮----
"bytes"
"encoding/json"
"math"
"strings"
"testing"
⋮----
"github.com/goccy/go-yaml"
"github.com/google/go-cmp/cmp"
"github.com/googleapis/genai-toolbox/internal/testutils"
"github.com/googleapis/genai-toolbox/internal/tools"
⋮----
func TestParametersMarshal(t *testing.T)
⋮----
var got tools.Parameters
// parse map to bytes
⋮----
// parse bytes to object
⋮----
func TestAuthParametersMarshal(t *testing.T)
⋮----
func TestParametersParse(t *testing.T)
⋮----
// ... (primitive type tests are unchanged)
⋮----
var m map[string]any
⋮----
wantErr := len(tc.want) == 0 // error is expected if no items in want
⋮----
// Use cmp.Diff for robust comparison
⋮----
func TestAuthParametersParse(t *testing.T)
⋮----
// error is expected if no items in want
⋮----
func TestParamValues(t *testing.T)
⋮----
func TestParamManifest(t *testing.T)
⋮----
func TestParamMcpManifest(t *testing.T)
⋮----
func TestMcpManifest(t *testing.T)
⋮----
func TestFailParametersUnmarshal(t *testing.T)
⋮----
// --- MODIFIED MAP PARAMETER TEST ---
⋮----
// ... (Remaining test functions do not involve parameter definitions and need no changes)
⋮----
func TestConvertArrayParamToString(t *testing.T)
⋮----
func TestFailConvertArrayParamToString(t *testing.T)
⋮----
func TestGetParams(t *testing.T)
⋮----
func TestFailGetParams(t *testing.T)
⋮----
func TestResolveTemplateParameters(t *testing.T)
⋮----
func TestFailResolveTemplateParameters(t *testing.T)
⋮----
func TestCheckParamRequired(t *testing.T)

================
File: internal/tools/parameters.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package tools
⋮----
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"slices"
	"strings"
	"text/template"

	"github.com/googleapis/genai-toolbox/internal/util"
)
⋮----
"bytes"
"context"
"encoding/json"
"fmt"
"slices"
"strings"
"text/template"
⋮----
"github.com/googleapis/genai-toolbox/internal/util"
⋮----
const (
	typeString = "string"
	typeInt    = "integer"
	typeFloat  = "float"
	typeBool   = "boolean"
	typeArray  = "array"
	typeMap    = "map"
)
⋮----
// ParamValues is an ordered list of ParamValue
type ParamValues []ParamValue
⋮----
// ParamValue represents the parameter's name and value.
type ParamValue struct {
	Name  string
	Value any
}
⋮----
// AsSlice returns a slice of the Param's values (in order).
func (p ParamValues) AsSlice() []any
⋮----
// AsMap returns a map of ParamValue's names to values.
func (p ParamValues) AsMap() map[string]interface
⋮----
// AsMapByOrderedKeys returns a map of a key's position to it's value, as necessary for Spanner PSQL.
// Example { $1 -> "value1", $2 -> "value2" }
func (p ParamValues) AsMapByOrderedKeys() map[string]interface
⋮----
// AsMapWithDollarPrefix ensures all keys are prefixed with a dollar sign for Dgraph.
// Example:
// Input:  {"role": "admin", "$age": 30}
// Output: {"$role": "admin", "$age": 30}
func (p ParamValues) AsMapWithDollarPrefix() map[string]interface
⋮----
func parseFromAuthService(paramAuthServices []ParamAuthService, claimsMap map[string]map[string]any) (any, error)
⋮----
// parse a parameter from claims using its specified auth services
⋮----
// not validated for this authservice, skip to the next one
⋮----
// claims do not contain specified field
⋮----
// CheckParamRequired checks if a parameter is required based on the required and default field.
func CheckParamRequired(required bool, defaultV any) bool
⋮----
// ParseParams is a helper function for parsing Parameters from an arbitraryJSON object.
func ParseParams(ps Parameters, data map[string]any, claimsMap map[string]map[string]any) (ParamValues, error)
⋮----
var v, newV any
var err error
⋮----
// parse non auth-required parameter
var ok bool
⋮----
// if the parameter is required and no value given, throw an error
⋮----
// parse authenticated parameter
⋮----
// helper function to convert a string array parameter to a comma separated string
func ConvertArrayParamToString(param any) (string, error)
⋮----
var stringValues []string
⋮----
// GetParams return the ParamValues that are associated with the Parameters.
func GetParams(params Parameters, paramValuesMap map[string]any) (ParamValues, error)
⋮----
func ResolveTemplateParams(templateParams Parameters, originalStatement string, paramsMap map[string]any) (string, error)
⋮----
var result bytes.Buffer
⋮----
// ProcessParameters concatenate templateParameters and parameters from a tool.
// It returns a list of concatenated parameters, concatenated Toolbox manifest, and concatenated MCP Manifest.
func ProcessParameters(templateParams Parameters, params Parameters) (Parameters, []ParameterManifest, McpToolsSchema)
⋮----
// Concatenate parameters for MCP `required` field
⋮----
// Concatenate parameters for MCP `properties` field
⋮----
// Create a new McpToolsSchema with all parameters
⋮----
type Parameter interface {
	// Note: It's typically not idiomatic to include "Get" in the function name,
	// but this is done to differentiate it from the fields in CommonParameter.
	GetName() string
	GetType() string
	GetDefault() any
	GetRequired() bool
	GetAuthServices() []ParamAuthService
	Parse(any) (any, error)
	Manifest() ParameterManifest
	McpManifest() ParameterMcpManifest
}
⋮----
// Note: It's typically not idiomatic to include "Get" in the function name,
// but this is done to differentiate it from the fields in CommonParameter.
⋮----
// McpToolsSchema is the representation of input schema for McpManifest.
type McpToolsSchema struct {
	Type       string                          `json:"type"`
	Properties map[string]ParameterMcpManifest `json:"properties"`
	Required   []string                        `json:"required"`
}
⋮----
// Parameters is a type used to allow unmarshal a list of parameters
type Parameters []Parameter
⋮----
func (c *Parameters) UnmarshalYAML(ctx context.Context, unmarshal func(interface
⋮----
var rawList []util.DelayedUnmarshaler
⋮----
// parseParamFromDelayedUnmarshaler is a helper function that is required to parse
// parameters because there are multiple different types
func parseParamFromDelayedUnmarshaler(ctx context.Context, u *util.DelayedUnmarshaler) (Parameter, error)
⋮----
var p map[string]any
⋮----
func (ps Parameters) Manifest() []ParameterManifest
⋮----
func (ps Parameters) McpManifest() McpToolsSchema
⋮----
// parameters that doesn't have a default value are added to the required field
⋮----
// ParameterManifest represents parameters when served as part of a ToolManifest.
type ParameterManifest struct {
	Name                 string             `json:"name"`
	Type                 string             `json:"type"`
	Required             bool               `json:"required"`
	Description          string             `json:"description"`
	AuthServices         []string           `json:"authSources"`
	Items                *ParameterManifest `json:"items,omitempty"`
	AdditionalProperties any                `json:"AdditionalProperties,omitempty"`
}
⋮----
// ParameterMcpManifest represents properties when served as part of a ToolMcpManifest.
type ParameterMcpManifest struct {
	Type                 string                `json:"type"`
	Description          string                `json:"description"`
	Items                *ParameterMcpManifest `json:"items,omitempty"`
	AdditionalProperties any                   `json:"AdditionalProperties,omitempty"`
}
⋮----
// CommonParameter are default fields that are emebdding in most Parameter implementations. Embedding this stuct will give the object Name() and Type() functions.
type CommonParameter struct {
	Name         string             `yaml:"name" validate:"required"`
	Type         string             `yaml:"type" validate:"required"`
	Desc         string             `yaml:"description" validate:"required"`
	Required     *bool              `yaml:"required"`
	AuthServices []ParamAuthService `yaml:"authServices"`
	AuthSources  []ParamAuthService `yaml:"authSources"` // Deprecated: Kept for compatibility.
}
⋮----
AuthSources  []ParamAuthService `yaml:"authSources"` // Deprecated: Kept for compatibility.
⋮----
// GetName returns the name specified for the Parameter.
func (p *CommonParameter) GetName() string
⋮----
// GetType returns the type specified for the Parameter.
func (p *CommonParameter) GetType() string
⋮----
// GetRequired returns the type specified for the Parameter.
func (p *CommonParameter) GetRequired() bool
⋮----
// parameters are defaulted to required
⋮----
// McpManifest returns the MCP manifest for the Parameter.
⋮----
// ParseTypeError is a custom error for incorrectly typed Parameters.
type ParseTypeError struct {
	Name  string
	Type  string
	Value any
}
⋮----
func (e ParseTypeError) Error() string
⋮----
type ParamAuthService struct {
	Name  string `yaml:"name"`
	Field string `yaml:"field"`
}
⋮----
// NewStringParameter is a convenience function for initializing a StringParameter.
func NewStringParameter(name string, desc string) *StringParameter
⋮----
// NewStringParameterWithDefault is a convenience function for initializing a StringParameter with default value.
func NewStringParameterWithDefault(name string, defaultV, desc string) *StringParameter
⋮----
// NewStringParameterWithRequired is a convenience function for initializing a StringParameter.
func NewStringParameterWithRequired(name string, desc string, required bool) *StringParameter
⋮----
// NewStringParameterWithAuth is a convenience function for initializing a StringParameter with a list of ParamAuthService.
func NewStringParameterWithAuth(name string, desc string, authServices []ParamAuthService) *StringParameter
⋮----
var _ Parameter = &StringParameter{}
⋮----
// StringParameter is a parameter representing the "string" type.
type StringParameter struct {
	CommonParameter `yaml:",inline"`
	Default         *string `yaml:"default"`
}
⋮----
// Parse casts the value "v" as a "string".
func (p *StringParameter) Parse(v any) (any, error)
⋮----
func (p *StringParameter) GetAuthServices() []ParamAuthService
⋮----
func (p *StringParameter) GetDefault() any
⋮----
// Manifest returns the manifest for the StringParameter.
⋮----
// only list ParamAuthService names (without fields) in manifest
⋮----
// NewIntParameter is a convenience function for initializing a IntParameter.
func NewIntParameter(name string, desc string) *IntParameter
⋮----
// NewIntParameterWithDefault is a convenience function for initializing a IntParameter with default value.
func NewIntParameterWithDefault(name string, defaultV int, desc string) *IntParameter
⋮----
// NewIntParameterWithRequired is a convenience function for initializing a IntParameter.
func NewIntParameterWithRequired(name string, desc string, required bool) *IntParameter
⋮----
// NewIntParameterWithAuth is a convenience function for initializing a IntParameter with a list of ParamAuthService.
func NewIntParameterWithAuth(name string, desc string, authServices []ParamAuthService) *IntParameter
⋮----
var _ Parameter = &IntParameter{}
⋮----
// IntParameter is a parameter representing the "int" type.
type IntParameter struct {
	CommonParameter `yaml:",inline"`
	Default         *int `yaml:"default"`
}
⋮----
var out int
⋮----
// Manifest returns the manifest for the IntParameter.
⋮----
// NewFloatParameter is a convenience function for initializing a FloatParameter.
func NewFloatParameter(name string, desc string) *FloatParameter
⋮----
// NewFloatParameterWithDefault is a convenience function for initializing a FloatParameter with default value.
func NewFloatParameterWithDefault(name string, defaultV float64, desc string) *FloatParameter
⋮----
// NewFloatParameterWithRequired is a convenience function for initializing a FloatParameter.
func NewFloatParameterWithRequired(name string, desc string, required bool) *FloatParameter
⋮----
// NewFloatParameterWithAuth is a convenience function for initializing a FloatParameter with a list of ParamAuthService.
func NewFloatParameterWithAuth(name string, desc string, authServices []ParamAuthService) *FloatParameter
⋮----
var _ Parameter = &FloatParameter{}
⋮----
// FloatParameter is a parameter representing the "float" type.
type FloatParameter struct {
	CommonParameter `yaml:",inline"`
	Default         *float64 `yaml:"default"`
}
⋮----
var out float64
⋮----
// Manifest returns the manifest for the FloatParameter.
⋮----
// NewBooleanParameter is a convenience function for initializing a BooleanParameter.
func NewBooleanParameter(name string, desc string) *BooleanParameter
⋮----
// NewBooleanParameterWithDefault is a convenience function for initializing a BooleanParameter with default value.
func NewBooleanParameterWithDefault(name string, defaultV bool, desc string) *BooleanParameter
⋮----
// NewBooleanParameterWithRequired is a convenience function for initializing a BooleanParameter.
func NewBooleanParameterWithRequired(name string, desc string, required bool) *BooleanParameter
⋮----
// NewBooleanParameterWithAuth is a convenience function for initializing a BooleanParameter with a list of ParamAuthService.
func NewBooleanParameterWithAuth(name string, desc string, authServices []ParamAuthService) *BooleanParameter
⋮----
var _ Parameter = &BooleanParameter{}
⋮----
// BooleanParameter is a parameter representing the "boolean" type.
type BooleanParameter struct {
	CommonParameter `yaml:",inline"`
	Default         *bool `yaml:"default"`
}
⋮----
// Manifest returns the manifest for the BooleanParameter.
⋮----
// NewArrayParameter is a convenience function for initializing a ArrayParameter.
func NewArrayParameter(name string, desc string, items Parameter) *ArrayParameter
⋮----
// NewArrayParameterWithDefault is a convenience function for initializing a ArrayParameter with default value.
func NewArrayParameterWithDefault(name string, defaultV []any, desc string, items Parameter) *ArrayParameter
⋮----
// NewArrayParameterWithRequired is a convenience function for initializing a ArrayParameter with default value.
func NewArrayParameterWithRequired(name string, desc string, required bool, items Parameter) *ArrayParameter
⋮----
// NewArrayParameterWithAuth is a convenience function for initializing a ArrayParameter with a list of ParamAuthService.
func NewArrayParameterWithAuth(name string, desc string, items Parameter, authServices []ParamAuthService) *ArrayParameter
⋮----
var _ Parameter = &ArrayParameter{}
⋮----
// ArrayParameter is a parameter representing the "array" type.
type ArrayParameter struct {
	CommonParameter `yaml:",inline"`
	Default         *[]any    `yaml:"default"`
	Items           Parameter `yaml:"items"`
}
⋮----
var rawItem struct {
		CommonParameter `yaml:",inline"`
		Default         *[]any                  `yaml:"default"`
		Items           util.DelayedUnmarshaler `yaml:"items"`
	}
⋮----
func (p *ArrayParameter) GetItems() Parameter
⋮----
// Manifest returns the manifest for the ArrayParameter.
⋮----
// if required value is true, or there's no default value
⋮----
// McpManifest returns the MCP manifest for the ArrayParameter.
⋮----
// MapParameter is a parameter representing a map with string keys. If ValueType is
// specified (e.g., "string"), values are validated against that type. If ValueType
// is empty, it is treated as a generic map[string]any.
type MapParameter struct {
	CommonParameter `yaml:",inline"`
	Default         *map[string]any `yaml:"default,omitempty"`
	ValueType       string          `yaml:"valueType,omitempty"`
}
⋮----
// Ensure MapParameter implements the Parameter interface.
var _ Parameter = &MapParameter{}
⋮----
// NewMapParameter is a convenience function for initializing a MapParameter.
func NewMapParameter(name string, desc string, valueType string) *MapParameter
⋮----
// NewMapParameterWithDefault is a convenience function for initializing a MapParameter with a default value.
func NewMapParameterWithDefault(name string, defaultV map[string]any, desc string, valueType string) *MapParameter
⋮----
// NewMapParameterWithRequired is a convenience function for initializing a MapParameter as required.
func NewMapParameterWithRequired(name string, desc string, required bool, valueType string) *MapParameter
⋮----
// NewMapParameterWithAuth is a convenience function for initializing a MapParameter with auth services.
func NewMapParameterWithAuth(name string, desc string, valueType string, authServices []ParamAuthService) *MapParameter
⋮----
// UnmarshalYAML handles parsing the MapParameter from YAML input.
⋮----
var rawItem struct {
		CommonParameter `yaml:",inline"`
		Default         *map[string]any `yaml:"default"`
		ValueType       string          `yaml:"valueType"`
	}
⋮----
// Validate `ValueType` to be one of the supported basic types
⋮----
// getPrototypeParameter is a helper factory to create a temporary parameter
// based on a type string for parsing and manifest generation.
func getPrototypeParameter(typeName string) (Parameter, error)
⋮----
// Parse validates and parses an incoming value for the map parameter.
⋮----
// for generic maps, convert json.Numbers to their corresponding types
⋮----
// Otherwise, get a prototype and parse each value in the map.
⋮----
func (p *MapParameter) GetValueType() string
⋮----
// Manifest returns the manifest for the MapParameter.
⋮----
var additionalProperties any
⋮----
// If no valueType is given, allow any properties.
⋮----
// McpManifest returns the MCP manifest for the MapParameter.

================
File: internal/tools/tools.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package tools
⋮----
import (
	"context"
	"fmt"
	"slices"

	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/sources"
)
⋮----
"context"
"fmt"
"slices"
⋮----
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/sources"
⋮----
// ToolConfigFactory defines the signature for a function that creates and
// decodes a specific tool's configuration. It takes the context, the tool's
// name, and a YAML decoder to parse the config.
type ToolConfigFactory func(ctx context.Context, name string, decoder *yaml.Decoder) (ToolConfig, error)
⋮----
var toolRegistry = make(map[string]ToolConfigFactory)
⋮----
// Register allows individual tool packages to register their configuration
// factory function. This is typically called from an init() function in the
// tool's package. It associates a 'kind' string with a function that can
// produce the specific ToolConfig type. It returns true if the registration was
// successful, and false if a tool with the same kind was already registered.
func Register(kind string, factory ToolConfigFactory) bool
⋮----
// Tool with this kind already exists, do not overwrite.
⋮----
// DecodeConfig looks up the registered factory for the given kind and uses it
// to decode the tool configuration.
func DecodeConfig(ctx context.Context, kind string, name string, decoder *yaml.Decoder) (ToolConfig, error)
⋮----
type ToolConfig interface {
	ToolConfigKind() string
	Initialize(map[string]sources.Source) (Tool, error)
}
⋮----
type Tool interface {
	Invoke(context.Context, ParamValues) (any, error)
	ParseParams(map[string]any, map[string]map[string]any) (ParamValues, error)
	Manifest() Manifest
	McpManifest() McpManifest
	Authorized([]string) bool
}
⋮----
// Manifest is the representation of tools sent to Client SDKs.
type Manifest struct {
	Description  string              `json:"description"`
	Parameters   []ParameterManifest `json:"parameters"`
	AuthRequired []string            `json:"authRequired"`
}
⋮----
// Definition for a tool the MCP client can call.
type McpManifest struct {
	// The name of the tool.
	Name string `json:"name"`
	// A human-readable description of the tool.
	Description string `json:"description,omitempty"`
	// A JSON Schema object defining the expected parameters for the tool.
	InputSchema McpToolsSchema `json:"inputSchema,omitempty"`
}
⋮----
// The name of the tool.
⋮----
// A human-readable description of the tool.
⋮----
// A JSON Schema object defining the expected parameters for the tool.
⋮----
// Helper function that returns if a tool invocation request is authorized
func IsAuthorized(authRequiredSources []string, verifiedAuthServices []string) bool
⋮----
// no authorization requirement

================
File: internal/tools/toolsets.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package tools
⋮----
import (
	"fmt"
)
⋮----
"fmt"
⋮----
type ToolsetConfig struct {
	Name      string   `yaml:"name"`
	ToolNames []string `yaml:",inline"`
}
⋮----
type Toolset struct {
	Name        string          `yaml:"name"`
	Tools       []*Tool         `yaml:",inline"`
	Manifest    ToolsetManifest `yaml:",inline"`
	McpManifest []McpManifest   `yaml:",inline"`
}
⋮----
type ToolsetManifest struct {
	ServerVersion string              `json:"serverVersion"`
	ToolsManifest map[string]Manifest `json:"tools"`
}
⋮----
func (t ToolsetConfig) Initialize(serverVersion string, toolsMap map[string]Tool) (Toolset, error)
⋮----
// finish toolset setup
// Check each declared tool name exists
var toolset Toolset

================
File: internal/util/util.go
================
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//	http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package util
⋮----
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strings"

	"github.com/go-playground/validator/v10"
	yaml "github.com/goccy/go-yaml"
	"github.com/googleapis/genai-toolbox/internal/log"
	"github.com/googleapis/genai-toolbox/internal/telemetry"
)
⋮----
"bytes"
"context"
"encoding/json"
"fmt"
"io"
"strings"
⋮----
"github.com/go-playground/validator/v10"
yaml "github.com/goccy/go-yaml"
"github.com/googleapis/genai-toolbox/internal/log"
"github.com/googleapis/genai-toolbox/internal/telemetry"
⋮----
// DecodeJSON decodes a given reader into an interface using the json decoder.
func DecodeJSON(r io.Reader, v interface
⋮----
defer io.Copy(io.Discard, r) //nolint:errcheck
⋮----
// specify JSON numbers should get parsed to json.Number instead of float64 by default.
// This prevents loss between floats/ints.
⋮----
// ConvertNumbers traverses an interface and converts all json.Number
// instances to int64 or float64.
func ConvertNumbers(data any) (any, error)
⋮----
// If it's a map, recursively convert the values.
⋮----
// If it's a slice, recursively convert the elements.
⋮----
// If it's a json.Number, convert it to float or int
⋮----
// Check for a decimal point to decide the type.
⋮----
// For all other types, return them as is.
⋮----
var _ yaml.InterfaceUnmarshalerContext = &DelayedUnmarshaler{}
⋮----
// DelayedUnmarshaler is struct that saves the provided unmarshal function
// passed to UnmarshalYAML so it can be re-used later once the target interface
// is known.
type DelayedUnmarshaler struct {
	unmarshal func(interface{}) error
⋮----
func (d *DelayedUnmarshaler) UnmarshalYAML(ctx context.Context, unmarshal func(interface
⋮----
func (d *DelayedUnmarshaler) Unmarshal(v interface
⋮----
type contextKey string
⋮----
// userAgentKey is the key used to store userAgent within context
const userAgentKey contextKey = "userAgent"
⋮----
// WithUserAgent adds a user agent into the context as a value
func WithUserAgent(ctx context.Context, versionString string) context.Context
⋮----
// UserAgentFromContext retrieves the user agent or return an error
func UserAgentFromContext(ctx context.Context) (string, error)
⋮----
func NewStrictDecoder(v interface
⋮----
// loggerKey is the key used to store logger within context
const loggerKey contextKey = "logger"
⋮----
// WithLogger adds a logger into the context as a value
func WithLogger(ctx context.Context, logger log.Logger) context.Context
⋮----
// LoggerFromContext retrieves the logger or return an error
func LoggerFromContext(ctx context.Context) (log.Logger, error)
⋮----
const instrumentationKey contextKey = "instrumentation"
⋮----
// WithInstrumentation adds an instrumentation into the context as a value
func WithInstrumentation(ctx context.Context, instrumentation *telemetry.Instrumentation) context.Context
⋮----
// InstrumentationFromContext retrieves the instrumentation or return an error
func InstrumentationFromContext(ctx context.Context) (*telemetry.Instrumentation, error)

================
File: .gitignore
================
# direnv
.envrc

# vscode
.vscode/

# npm
node_modules

# hugo
.hugo/public/
.hugo/resources/_gen
.hugo_build.lock

# coverage
.coverage

================
File: .gitmodules
================
[submodule "docs2/themes/godocs"]
	path = docs2/themes/godocs
	url = https://github.com/themefisher/godocs.git

================
File: .golangci.yaml
================
# Copyright 2024 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: "2"
linters:
  enable:
    - errcheck
    - govet
    - ineffassign
    - staticcheck
    - unused
  exclusions:
    presets:
      - std-error-handling
issues:
  fix: true
formatters:
  enable:
    - goimports
  settings:
    gofmt:
      rewrite-rules:
        - pattern: interface{}
          replacement: any
        - pattern: a[b:len(a)]
          replacement: a[b:]

================
File: DEVELOPER.md
================
# DEVELOPER.md

This document provides instructions for setting up your development environment
and contributing to the Toolbox project.

## Prerequisites

Before you begin, ensure you have the following:

1. **Databases:** Set up the necessary databases for your development
   environment.
1. **Go:** Install the latest version of [Go](https://go.dev/doc/install).
1. **Dependencies:** Download and manage project dependencies:

    ```bash
    go get
    go mod tidy
    ```

## Developing Toolbox

### Running from Local Source

1. **Configuration:** Create a `tools.yaml` file to configure your sources and
   tools. See the [Configuration section in the
   README](./README.md#Configuration) for details.
1. **CLI Flags:** List available command-line flags for the Toolbox server:

    ```bash
    go run . --help
    ```

1. **Running the Server:** Start the Toolbox server with optional flags. The
   server listens on port 5000 by default.

    ```bash
    go run .
    ```

1. **Testing the Endpoint:** Verify the server is running by sending a request
   to the endpoint:

    ```bash
    curl http://127.0.0.1:5000
    ```

## Testing

### Infrastructure

Toolbox uses both GitHub Actions and Cloud Build to run test workflows. Cloud
Build is used when Google credentials are required. Cloud Build uses test
project "toolbox-testing-438616".

### Linting

Run the lint check to ensure code quality:

```bash
golangci-lint run --fix
```

### Unit Tests

Execute unit tests locally:

```bash
go test -race -v ./...
```

### Integration Tests

#### Running Locally

1. **Environment Variables:** Set the required environment variables. Refer to
   the [Cloud Build testing configuration](./.ci/integration.cloudbuild.yaml)
   for a complete list of variables for each source.
    * `SERVICE_ACCOUNT_EMAIL`: Use your own GCP email.
    * `CLIENT_ID`: Use the Google Cloud SDK application Client ID. Contact
      Toolbox maintainers if you don't have it.
1. **Running Tests:** Run the integration test for your target source. Specify
   the required Go build tags at the top of each integration test file.

    ```shell
    go test -race -v ./tests/<YOUR_TEST_DIR>
    ```

    For example, to run the AlloyDB integration test:

    ```shell
    go test -race -v ./tests/alloydbpg
    ```

#### Running on Pull Requests

* **Internal Contributors:** Testing workflows should trigger automatically.
* **External Contributors:** Request Toolbox maintainers to trigger the testing
  workflows on your PR.

#### Test Resources

The following databases have been added as test resources. To add a new database
to test against, please contact the Toolbox maintainer team via an issue or PR.
Refer to the [Cloud Build testing
configuration](./.ci/integration.cloudbuild.yaml) for a complete list of
variables for each source.

* AlloyDB - setup in the test project
  * AI Natural Language ([setup
    instructions](https://cloud.google.com/alloydb/docs/ai/use-natural-language-generate-sql-queries))
    has been configured for `alloydb-a`-nl` tool tests
  * The Cloud Build service account is a user
* Bigtable - setup in the test project
  * The Cloud Build service account is a user
* BigQuery - setup in the test project
  * The Cloud Build service account is a user
* Cloud SQL Postgres - setup in the test project
  * The Cloud Build service account is a user
* Cloud SQL MySQL - setup in the test project
  * The Cloud Build service account is a user
* Cloud SQL SQL Server - setup in the test project
  * The Cloud Build service account is a user
* Couchbase - setup in the test project via the Marketplace
* DGraph - using the public dgraph interface <https://play.dgraph.io> for
  testing
* Memorystore Redis - setup in the test project using a Memorystore for Redis
  standalone instance
  * Memorystore Redis Cluster, Memorystore Valkey standalone, and Memorystore
    Valkey Cluster instances all require PSC connections, which requires extra
    security setup to connect from Cloud Build. Memorystore Redis standalone is
    the only one allowing PSA connection.
  * The Cloud Build service account is a user
* Memorystore Valkey - setup in the test project using a Memorystore for Redis
  standalone instance
  * The Cloud Build service account is a user
* MySQL - setup in the test project using a Cloud SQL instance
* Neo4j - setup in the test project on a GCE VM
* Postgres - setup in the test project using an AlloyDB instance
* Spanner - setup in the test project
  * The Cloud Build service account is a user
* SQL Server - setup in the test project using a Cloud SQL instance
* SQLite -  setup in the integration test, where we create a temporary database
  file

### Other GitHub Checks

* License header check (`.github/header-checker-lint.yml`) - Ensures files have
  the appropriate license
* CLA/google - Ensures the developer has signed the CLA:
  <https://cla.developers.google.com/>
* conventionalcommits.org - Ensures the commit messages are in the correct
  format. This repository uses tool [Release
  Please](https://github.com/googleapis/release-please) to create GitHub
  releases. It does so by parsing your git history, looking for [Conventional
  Commit messages](https://www.conventionalcommits.org/), and creating release
  PRs. Learn more by reading [How should I write my
  commits?](https://github.com/googleapis/release-please?tab=readme-ov-file#how-should-i-write-my-commits)

## Developing Documentation

### Running a Local Hugo Server

Follow these steps to preview documentation changes locally using a Hugo server:

1. **Install Hugo:** Ensure you have
   [Hugo](https://gohugo.io/installation/macos/) extended edition version
   0.146.0 or later installed.
1. **Navigate to the Hugo Directory:**

    ```bash
    cd .hugo
    ```

1. **Install Dependencies:**

    ```bash
    npm ci
    ```

1. **Start the Server:**

    ```bash
    hugo server
    ```

### Previewing Documentation on Pull Requests

#### Contributors

Request a repo owner to run the preview deployment workflow on your PR. A
preview link will be automatically added as a comment to your PR.

#### Maintainers

1. **Inspect Changes:** Review the proposed changes in the PR to ensure they are
   safe and do not contain malicious code. Pay close attention to changes in the
   `.github/workflows/` directory.
1. **Deploy Preview:** Apply the `docs: deploy-preview` label to the PR to
   deploy a documentation preview.

## Building Toolbox

### Building the Binary

1. **Build Command:** Compile the Toolbox binary:

    ```bash
    go build -o toolbox
    ```

1. **Running the Binary:** Execute the compiled binary with optional flags. The
   server listens on port 5000 by default:

    ```bash
    ./toolbox
    ```

1. **Testing the Endpoint:** Verify the server is running by sending a request
   to the endpoint:

    ```bash
    curl http://127.0.0.1:5000
    ```

### Building Container Images

1. **Build Command:** Build the Toolbox container image:

    ```bash
    docker build -t toolbox:dev .
    ```

1. **View Image:** List available Docker images to confirm the build:

    ```bash
    docker images
    ```

1. **Run Container:** Run the Toolbox container image using Docker:

    ```bash
    docker run -d toolbox:dev
    ```

## Developing Toolbox SDKs

Refer to the [SDK developer
guide](https://github.com/googleapis/mcp-toolbox-sdk-python/blob/main/DEVELOPER.md)
for instructions on developing Toolbox SDKs.

## Maintainer Information

### Team

Team, `@googleapis/senseai-eco`, has been set as
[CODEOWNERS](.github/CODEOWNERS). The GitHub TeamSync tool is used to create
this team from MDB Group, `senseai-eco`.

### Releasing

Toolbox has two types of releases: versioned and continuous. It uses Google
Cloud project, `database-toolbox`.

* **Versioned Release:** Official, supported distributions tagged as `latest`.
  The release process is defined in
  [versioned.release.cloudbuild.yaml](.ci/versioned.release.cloudbuild.yaml).
* **Continuous Release:** Used for early testing of features between official
  releases and for end-to-end testing. The release process is defined in
  [continuous.release.cloudbuild.yaml](.ci/continuous.release.cloudbuild.yaml).
* **GitHub Release:** `.github/release-please.yml` automatically creates GitHub
  Releases and release PRs.

### How-to Release a new Version

1. [Optional] If you want to override the version number, send a
   [PR](https://github.com/googleapis/genai-toolbox/pull/31) to trigger
   [release-please](https://github.com/googleapis/release-please?tab=readme-ov-file#how-do-i-change-the-version-number).
   You can generate a commit with the following line: `git commit -m "chore:
   release 0.1.0" -m "Release-As: 0.1.0" --allow-empty`
1. [Optional] If you want to edit the changelog, send commits to the release PR
1. Approve and merge the PR with the title “[chore(main): release
   x.x.x](https://github.com/googleapis/genai-toolbox/pull/16)”
1. The
   [trigger](https://pantheon.corp.google.com/cloud-build/triggers;region=us-central1/edit/27bd0d21-264a-4446-b2d7-0df4e9915fb3?e=13802955&inv=1&invt=AbhU8A&mods=logs_tg_staging&project=database-toolbox)
   should automatically run when a new tag is pushed. You can view [triggered
   builds here to check the
   status](https://pantheon.corp.google.com/cloud-build/builds;region=us-central1?query=trigger_id%3D%2227bd0d21-264a-4446-b2d7-0df4e9915fb3%22&e=13802955&inv=1&invt=AbhU8A&mods=logs_tg_staging&project=database-toolbox)
1. Update the Github release notes to include the following table:
    1. Run the following command (from the root directory):

        ```
        export VERSION="v0.0.0"
        .ci/generate_release_table.sh
        ```

    1. Copy the table output
    1. In the GitHub UI, navigate to Releases and click the `edit` button.
    1. Paste the table at the bottom of release note and click `Update release`.
1. Post release in internal chat and on Discord.

#### Supported Binaries

The following operating systems and architectures are supported for binary
releases:

* linux/amd64
* darwin/arm64
* darwin/amd64
* windows/amd64

#### Supported Container Images

The following base container images are supported for container image releases:

* distroless

### Automated Tests

Integration and unit tests are automatically triggered via Cloud Build on each
pull request. Integration tests run on merge and nightly.

#### Failure notifications

On-merge and nightly tests that fail have notification setup via Cloud Build
Failure Reporter [GitHub Actions
Workflow](.github/workflows/schedule_reporter.yml).

#### Trigger Setup

Configure a Cloud Build trigger using the UI or `gcloud` with the following
settings:

* **Event:** Pull request
* **Region:** global (for default worker pools)
* **Source:**
  * Generation: 1st gen
  * Repo: googleapis/genai-toolbox (GitHub App)
  * Base branch: `^main$`
* **Comment control:** Required except for owners and collaborators
* **Filters:** Add directory filter
* **Config:** Cloud Build configuration file
  * Location: Repository (add path to file)
* **Service account:** Set for demo service to enable ID token creation for
  authenticated services

### Triggering Tests

Trigger pull request tests for external contributors by:

* **Cloud Build tests:** Comment `/gcbrun`
* **Unit tests:** Add the `tests:run` label

## Repo Setup & Automation

* .github/blunderbuss.yml - Auto-assign issues and PRs from GitHub teams
* .github/renovate.json5 - Tooling for dependency updates. Dependabot is built
  into the GitHub repo for GitHub security warnings
* go/github-issue-mirror - GitHub issues are automatically mirrored into buganizer
* (Suspended) .github/sync-repo-settings.yaml - configure repo settings
* .github/release-please.yml - Creates GitHub releases
* .github/ISSUE_TEMPLATE - templates for GitHub issues

================
File: Dockerfile
================
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest stable golang 1.x to compile to a binary
FROM --platform=$BUILDPLATFORM golang:1 AS build

WORKDIR /go/src/genai-toolbox
COPY . .

ARG TARGETOS
ARG TARGETARCH
ARG BUILD_TYPE="container.dev"
ARG COMMIT_SHA=""

RUN go get ./...
RUN CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} \
    go build -ldflags "-X github.com/googleapis/genai-toolbox/cmd.buildType=container.${BUILD_TYPE} -X github.com/googleapis/genai-toolbox/cmd.commitSha=${COMMIT_SHA}"

# Final Stage
FROM gcr.io/distroless/static:nonroot

WORKDIR /app
COPY --from=build --chown=nonroot /go/src/genai-toolbox/genai-toolbox /toolbox
USER nonroot

ENTRYPOINT ["/toolbox"]

================
File: go.mod
================
module github.com/googleapis/genai-toolbox

go 1.23.8

toolchain go1.24.5

require (
	cloud.google.com/go/alloydbconn v1.15.4
	cloud.google.com/go/bigquery v1.69.0
	cloud.google.com/go/bigtable v1.38.0
	cloud.google.com/go/cloudsqlconn v1.17.3
	cloud.google.com/go/firestore v1.18.0
	cloud.google.com/go/spanner v1.83.0
	github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/metric v0.53.0
	github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/trace v1.29.0
	github.com/couchbase/gocb/v2 v2.10.1
	github.com/couchbase/tools-common/http v1.0.9
	github.com/fsnotify/fsnotify v1.9.0
	github.com/go-chi/chi/v5 v5.2.2
	github.com/go-chi/httplog/v2 v2.1.1
	github.com/go-chi/render v1.0.3
	github.com/go-playground/validator/v10 v10.27.0
	github.com/go-sql-driver/mysql v1.9.3
	github.com/goccy/go-yaml v1.18.0
	github.com/google/go-cmp v0.7.0
	github.com/google/uuid v1.6.0
	github.com/jackc/pgx/v5 v5.7.5
	github.com/json-iterator/go v1.1.12
	github.com/microsoft/go-mssqldb v1.9.2
	github.com/neo4j/neo4j-go-driver/v5 v5.28.1
	github.com/redis/go-redis/v9 v9.11.0
	github.com/spf13/cobra v1.9.1
	github.com/valkey-io/valkey-go v1.0.63
	go.opentelemetry.io/contrib/propagators/autoprop v0.62.0
	go.opentelemetry.io/otel v1.37.0
	go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp v1.37.0
	go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.37.0
	go.opentelemetry.io/otel/metric v1.37.0
	go.opentelemetry.io/otel/sdk v1.37.0
	go.opentelemetry.io/otel/sdk/metric v1.37.0
	go.opentelemetry.io/otel/trace v1.37.0
	golang.org/x/oauth2 v0.30.0
	google.golang.org/api v0.242.0
	modernc.org/sqlite v1.38.0
)

require golang.org/x/exp v0.0.0-20250408133849-7e4ce0ab07d0 // indirect

require (
	cel.dev/expr v0.23.0 // indirect
	cloud.google.com/go v0.121.2 // indirect
	cloud.google.com/go/alloydb v1.18.0 // indirect
	cloud.google.com/go/auth v0.16.2 // indirect
	cloud.google.com/go/auth/oauth2adapt v0.2.8 // indirect
	cloud.google.com/go/compute/metadata v0.7.0 // indirect
	cloud.google.com/go/iam v1.5.2 // indirect
	cloud.google.com/go/longrunning v0.6.7 // indirect
	cloud.google.com/go/monitoring v1.24.2 // indirect
	cloud.google.com/go/trace v1.11.6 // indirect
	filippo.io/edwards25519 v1.1.0 // indirect
	github.com/GoogleCloudPlatform/grpc-gcp-go/grpcgcp v1.5.3 // indirect
	github.com/GoogleCloudPlatform/opentelemetry-operations-go/detectors/gcp v1.27.0 // indirect
	github.com/GoogleCloudPlatform/opentelemetry-operations-go/internal/resourcemapping v0.53.0 // indirect
	github.com/ajg/form v1.5.1 // indirect
	github.com/apache/arrow/go/v15 v15.0.2 // indirect
	github.com/cenkalti/backoff/v5 v5.0.2 // indirect
	github.com/cespare/xxhash/v2 v2.3.0 // indirect
	github.com/cncf/xds/go v0.0.0-20250326154945-ae57f3c0d45f // indirect
	github.com/couchbase/gocbcore/v10 v10.7.1 // indirect
	github.com/couchbase/gocbcoreps v0.1.3 // indirect
	github.com/couchbase/goprotostellar v1.0.2 // indirect
	github.com/couchbase/tools-common/errors v1.0.0 // indirect
	github.com/couchbaselabs/gocbconnstr/v2 v2.0.0-20240607131231-fb385523de28 // indirect
	github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect
	github.com/dustin/go-humanize v1.0.1 // indirect
	github.com/envoyproxy/go-control-plane/envoy v1.32.4 // indirect
	github.com/envoyproxy/protoc-gen-validate v1.2.1 // indirect
	github.com/felixge/httpsnoop v1.0.4 // indirect
	github.com/gabriel-vasile/mimetype v1.4.8 // indirect
	github.com/go-jose/go-jose/v4 v4.0.5 // indirect
	github.com/go-logr/logr v1.4.3 // indirect
	github.com/go-logr/stdr v1.2.2 // indirect
	github.com/go-playground/locales v0.14.1 // indirect
	github.com/go-playground/universal-translator v0.18.1 // indirect
	github.com/goccy/go-json v0.10.2 // indirect
	github.com/golang-sql/civil v0.0.0-20220223132316-b832511892a9 // indirect
	github.com/golang-sql/sqlexp v0.1.0 // indirect
	github.com/golang/groupcache v0.0.0-20241129210726-2c02b8208cf8 // indirect
	github.com/golang/snappy v0.0.4 // indirect
	github.com/google/flatbuffers v23.5.26+incompatible // indirect
	github.com/google/s2a-go v0.1.9 // indirect
	github.com/googleapis/enterprise-certificate-proxy v0.3.6 // indirect
	github.com/googleapis/gax-go/v2 v2.14.2 // indirect
	github.com/gorilla/websocket v1.5.3 // indirect
	github.com/grpc-ecosystem/go-grpc-middleware v1.4.0 // indirect
	github.com/grpc-ecosystem/grpc-gateway/v2 v2.27.1 // indirect
	github.com/inconshreveable/mousetrap v1.1.0 // indirect
	github.com/jackc/pgpassfile v1.0.0 // indirect
	github.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761 // indirect
	github.com/jackc/puddle/v2 v2.2.2 // indirect
	github.com/klauspost/compress v1.16.7 // indirect
	github.com/klauspost/cpuid/v2 v2.2.5 // indirect
	github.com/leodido/go-urn v1.4.0 // indirect
	github.com/mattn/go-isatty v0.0.20 // indirect
	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
	github.com/modern-go/reflect2 v1.0.2 // indirect
	github.com/ncruces/go-strftime v0.1.9 // indirect
	github.com/pierrec/lz4/v4 v4.1.18 // indirect
	github.com/planetscale/vtprotobuf v0.6.1-0.20240319094008-0393e58bdf10 // indirect
	github.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec // indirect
	github.com/spf13/pflag v1.0.6 // indirect
	github.com/spiffe/go-spiffe/v2 v2.5.0 // indirect
	github.com/youmark/pkcs8 v0.0.0-20240726163527-a2c0da244d78 // indirect
	github.com/zeebo/errs v1.4.0 // indirect
	github.com/zeebo/xxh3 v1.0.2 // indirect
	go.opencensus.io v0.24.0 // indirect
	go.opentelemetry.io/auto/sdk v1.1.0 // indirect
	go.opentelemetry.io/contrib/detectors/gcp v1.36.0 // indirect
	go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.61.0 // indirect
	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.61.0 // indirect
	go.opentelemetry.io/contrib/propagators/aws v1.37.0 // indirect
	go.opentelemetry.io/contrib/propagators/b3 v1.37.0 // indirect
	go.opentelemetry.io/contrib/propagators/jaeger v1.37.0 // indirect
	go.opentelemetry.io/contrib/propagators/ot v1.37.0 // indirect
	go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.37.0 // indirect
	go.opentelemetry.io/proto/otlp v1.7.0 // indirect
	go.uber.org/multierr v1.11.0 // indirect
	go.uber.org/zap v1.27.0 // indirect
	golang.org/x/crypto v0.40.0 // indirect
	golang.org/x/mod v0.25.0 // indirect
	golang.org/x/net v0.42.0 // indirect
	golang.org/x/sync v0.16.0 // indirect
	golang.org/x/sys v0.34.0 // indirect
	golang.org/x/text v0.27.0 // indirect
	golang.org/x/time v0.12.0 // indirect
	golang.org/x/tools v0.34.0 // indirect
	golang.org/x/xerrors v0.0.0-20240903120638-7835f813f4da // indirect
	google.golang.org/genproto v0.0.0-20250505200425-f936aa4a68b2 // indirect
	google.golang.org/genproto/googleapis/api v0.0.0-20250603155806-513f23925822 // indirect
	google.golang.org/genproto/googleapis/rpc v0.0.0-20250707201910-8d1bb00bc6a7 // indirect
	google.golang.org/grpc v1.73.0 // indirect
	google.golang.org/protobuf v1.36.6 // indirect
	modernc.org/libc v1.65.10 // indirect
	modernc.org/mathutil v1.7.1 // indirect
	modernc.org/memory v1.11.0 // indirect
)

================
File: LICENSE
================
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

================
File: main.go
================
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
⋮----
//     http://www.apache.org/licenses/LICENSE-2.0
⋮----
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
⋮----
package main
⋮----
import (
	"github.com/googleapis/genai-toolbox/cmd"
)
⋮----
"github.com/googleapis/genai-toolbox/cmd"
⋮----
func main()

================
File: README.md
================
![logo](./logo.png)

# MCP Toolbox for Databases

[![Docs](https://img.shields.io/badge/docs-MCP_Toolbox-blue)](https://googleapis.github.io/genai-toolbox/)
[![Discord](https://img.shields.io/badge/Discord-%235865F2.svg?style=flat&logo=discord&logoColor=white)](https://discord.gg/Dmm69peqjh)
[![Medium](https://img.shields.io/badge/Medium-12100E?style=flat&logo=medium&logoColor=white)](https://medium.com/@mcp_toolbox)
[![Go Report Card](https://goreportcard.com/badge/github.com/googleapis/genai-toolbox)](https://goreportcard.com/report/github.com/googleapis/genai-toolbox)

> [!NOTE]
> MCP Toolbox for Databases is currently in beta, and may see breaking
> changes until the first stable release (v1.0).

MCP Toolbox for Databases is an open source MCP server for databases. It enables
you to develop tools easier, faster, and more securely by handling the complexities
such as connection pooling, authentication, and more.

This README provides a brief overview. For comprehensive details, see the [full
documentation](https://googleapis.github.io/genai-toolbox/).

> [!NOTE]
> This solution was originally named “Gen AI Toolbox for Databases” as
> its initial development predated MCP, but was renamed to align with recently
> added MCP compatibility.

<!-- TOC ignore:true -->
## Table of Contents

<!-- TOC -->

- [Why Toolbox?](#why-toolbox)
- [General Architecture](#general-architecture)
- [Getting Started](#getting-started)
  - [Installing the server](#installing-the-server)
  - [Running the server](#running-the-server)
  - [Integrating your application](#integrating-your-application)
- [Configuration](#configuration)
  - [Sources](#sources)
  - [Tools](#tools)
  - [Toolsets](#toolsets)
- [Versioning](#versioning)
- [Contributing](#contributing)
- [Community](#community)

<!-- /TOC -->

## Why Toolbox?

Toolbox helps you build Gen AI tools that let your agents access data in your
database. Toolbox provides:

- **Simplified development**: Integrate tools to your agent in less than 10
  lines of code, reuse tools between multiple agents or frameworks, and deploy
  new versions of tools more easily.
- **Better performance**: Best practices such as connection pooling,
  authentication, and more.
- **Enhanced security**: Integrated auth for more secure access to your data
- **End-to-end observability**: Out of the box metrics and tracing with built-in
  support for OpenTelemetry.

**⚡ Supercharge Your Workflow with an AI Database Assistant ⚡**

Stop context-switching and let your AI assistant become a true co-developer. By
[connecting your IDE to your databases with MCP Toolbox][connect-ide], you can
delegate complex and time-consuming database tasks, allowing you to build faster
and focus on what matters. This isn't just about code completion; it's about
giving your AI the context it needs to handle the entire development lifecycle.

Here’s how it will save you time:

- **Query in Plain English**: Interact with your data using natural language
  right from your IDE. Ask complex questions like, *"How many orders were
  delivered in 2024, and what items were in them?"* without writing any SQL.
- **Automate Database Management**: Simply describe your data needs, and let the
  AI assistant manage your database for you. It can handle generating queries,
  creating tables, adding indexes, and more.
- **Generate Context-Aware Code**: Empower your AI assistant to generate
  application code and tests with a deep understanding of your real-time
  database schema.  This accelerates the development cycle by ensuring the
  generated code is directly usable.
- **Slash Development Overhead**: Radically reduce the time spent on manual
  setup and boilerplate. MCP Toolbox helps streamline lengthy database
  configurations, repetitive code, and error-prone schema migrations.

Learn [how to connect your AI tools (IDEs) to Toolbox using MCP][connect-ide].

[connect-ide]: https://googleapis.github.io/genai-toolbox/how-to/connect-ide/

## General Architecture

Toolbox sits between your application's orchestration framework and your
database, providing a control plane that is used to modify, distribute, or
invoke tools. It simplifies the management of your tools by providing you with a
centralized location to store and update tools, allowing you to share tools
between agents and applications and update those tools without necessarily
redeploying your application.

![architecture](./docs/en/getting-started/introduction/architecture.png)

## Getting Started

### Installing the server

For the latest version, check the [releases page][releases] and use the
following instructions for your OS and CPU architecture.

[releases]: https://github.com/googleapis/genai-toolbox/releases

<details open>
<summary>Binary</summary>

To install Toolbox as a binary:

<!-- {x-release-please-start-version} -->
```sh
# see releases page for other versions
export VERSION=0.9.0
curl -O https://storage.googleapis.com/genai-toolbox/v$VERSION/linux/amd64/toolbox
chmod +x toolbox
```

</details>

<details>
<summary>Container image</summary>
You can also install Toolbox as a container:

```sh
# see releases page for other versions
export VERSION=0.9.0
docker pull us-central1-docker.pkg.dev/database-toolbox/toolbox/toolbox:$VERSION
```

</details>

<details>
<summary>Compile from source</summary>

To install from source, ensure you have the latest version of
[Go installed](https://go.dev/doc/install), and then run the following command:

```sh
go install github.com/googleapis/genai-toolbox@v0.9.0
```
<!-- {x-release-please-end} -->

</details>

### Running the server

[Configure](#configuration) a `tools.yaml` to define your tools, and then
execute `toolbox` to start the server:

```sh
./toolbox --tools-file "tools.yaml"
```
> [!NOTE]
> Toolbox enables dynamic reloading by default. To disable, use the `--disable-reload` flag.

You can use `toolbox help` for a full list of flags! To stop the server, send a
terminate signal (`ctrl+c` on most platforms).

For more detailed documentation on deploying to different environments, check
out the resources in the [How-to
section](https://googleapis.github.io/genai-toolbox/how-to/)

### Integrating your application

Once your server is up and running, you can load the tools into your
application. See below the list of Client SDKs for using various frameworks:

<details open>
  <summary>Python (<a href="https://github.com/googleapis/mcp-toolbox-sdk-python">Github</a>)</summary>
  <br>
  <blockquote>

  <details open>
    <summary>Core</summary>

1. Install [Toolbox Core SDK][toolbox-core]:

    ```bash
    pip install toolbox-core
    ```

1. Load tools:

    ```python
    from toolbox_core import ToolboxClient

    # update the url to point to your server
    async with ToolboxClient("http://127.0.0.1:5000") as client:

        # these tools can be passed to your application!
        tools = await client.load_toolset("toolset_name")
    ```

For more detailed instructions on using the Toolbox Core SDK, see the
[project's README][toolbox-core-readme].

[toolbox-core]: https://pypi.org/project/toolbox-core/
[toolbox-core-readme]: https://github.com/googleapis/mcp-toolbox-sdk-python/tree/main/packages/toolbox-core/README.md

  </details>
  <details>
    <summary>LangChain / LangGraph</summary>

1. Install [Toolbox LangChain SDK][toolbox-langchain]:

    ```bash
    pip install toolbox-langchain
    ```

1. Load tools:

    ```python
    from toolbox_langchain import ToolboxClient

    # update the url to point to your server
    async with ToolboxClient("http://127.0.0.1:5000") as client:

        # these tools can be passed to your application!
        tools = client.load_toolset()
    ```

    For more detailed instructions on using the Toolbox LangChain SDK, see the
    [project's README][toolbox-langchain-readme].

    [toolbox-langchain]: https://pypi.org/project/toolbox-langchain/
    [toolbox-langchain-readme]: https://github.com/googleapis/mcp-toolbox-sdk-python/blob/main/packages/toolbox-langchain/README.md

  </details>
  <details>
    <summary>LlamaIndex</summary>

1. Install [Toolbox Llamaindex SDK][toolbox-llamaindex]:

    ```bash
    pip install toolbox-llamaindex
    ```

1. Load tools:

    ```python
    from toolbox_llamaindex import ToolboxClient

    # update the url to point to your server
    async with ToolboxClient("http://127.0.0.1:5000") as client:

        # these tools can be passed to your application!
        tools = client.load_toolset()
    ```

    For more detailed instructions on using the Toolbox Llamaindex SDK, see the
    [project's README][toolbox-llamaindex-readme].

    [toolbox-llamaindex]: https://pypi.org/project/toolbox-llamaindex/
    [toolbox-llamaindex-readme]: https://github.com/googleapis/genai-toolbox-llamaindex-python/blob/main/README.md

  </details>
</details>
</blockquote>
<details>
  <summary>Javascript/Typescript (<a href="https://github.com/googleapis/mcp-toolbox-sdk-js">Github</a>)</summary>
  <br>
  <blockquote>

  <details open>
    <summary>Core</summary>

1. Install [Toolbox Core SDK][toolbox-core-js]:

    ```bash
    npm install @toolbox-sdk/core
    ```

1. Load tools:

    ```javascript
    import { ToolboxClient } from '@toolbox-sdk/core';

    // update the url to point to your server
    const URL = 'http://127.0.0.1:5000';
    let client = new ToolboxClient(URL);

    // these tools can be passed to your application!
    const tools = await client.loadToolset('toolsetName');
    ```

    For more detailed instructions on using the Toolbox Core SDK, see the
    [project's README][toolbox-core-js-readme].

    [toolbox-core-js]: https://www.npmjs.com/package/@toolbox-sdk/core
    [toolbox-core-js-readme]: https://github.com/googleapis/mcp-toolbox-sdk-js/blob/main/packages/toolbox-core/README.md

  </details>
  <details>
    <summary>LangChain / LangGraph</summary>

1. Install [Toolbox Core SDK][toolbox-core-js]:

    ```bash
    npm install @toolbox-sdk/core
    ```

2. Load tools:

    ```javascript
    import { ToolboxClient } from '@toolbox-sdk/core';

    // update the url to point to your server
    const URL = 'http://127.0.0.1:5000';
    let client = new ToolboxClient(URL);

    // these tools can be passed to your application!
    const toolboxTools = await client.loadToolset('toolsetName');

    // Define the basics of the tool: name, description, schema and core logic
    const getTool = (toolboxTool) => tool(currTool, {
        name: toolboxTool.getName(),
        description: toolboxTool.getDescription(),
        schema: toolboxTool.getParamSchema()
    });

    // Use these tools in your Langchain/Langraph applications
    const tools = toolboxTools.map(getTool);
    ```

  </details>
  <details>
    <summary>Genkit</summary>

1. Install [Toolbox Core SDK][toolbox-core-js]:

    ```bash
    npm install @toolbox-sdk/core
    ```

2. Load tools:

    ```javascript
    import { ToolboxClient } from '@toolbox-sdk/core';
    import { genkit } from 'genkit';

    // Initialise genkit
    const ai = genkit({
        plugins: [
            googleAI({
                apiKey: process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY
            })
        ],
        model: googleAI.model('gemini-2.0-flash'),
    });

    // update the url to point to your server
    const URL = 'http://127.0.0.1:5000';
    let client = new ToolboxClient(URL);

    // these tools can be passed to your application!
    const toolboxTools = await client.loadToolset('toolsetName');

    // Define the basics of the tool: name, description, schema and core logic
    const getTool = (toolboxTool) => ai.defineTool({
        name: toolboxTool.getName(),
        description: toolboxTool.getDescription(),
        schema: toolboxTool.getParamSchema()
    }, toolboxTool)

    // Use these tools in your Genkit applications
    const tools = toolboxTools.map(getTool);
    ```

  </details>
</details>
</blockquote>
<details>
  <summary>Go (<a href="https://github.com/googleapis/mcp-toolbox-sdk-go">Github</a>)</summary>
  <br>
  <blockquote>

  <details open>
    <summary>Core</summary>

1. Install [Toolbox Go SDK][toolbox-go]:

    ```bash
    go get github.com/googleapis/mcp-toolbox-sdk-go
    ```

1. Load tools:

    ```go
    package main

    import (
      "github.com/googleapis/mcp-toolbox-sdk-go/core"
      "context"
    )

    func main() {
      // Make sure to add the error checks
      // update the url to point to your server
      URL := "http://127.0.0.1:5000";
      ctx := context.Background()

      client, err := core.NewToolboxClient(URL)

      // Framework agnostic tools
      tools, err := client.LoadToolset("toolsetName", ctx)
    }
    ```

    For more detailed instructions on using the Toolbox Go SDK, see the
    [project's README][toolbox-core-go-readme].

    [toolbox-go]: https://pkg.go.dev/github.com/googleapis/mcp-toolbox-sdk-go/core
    [toolbox-core-go-readme]: https://github.com/googleapis/mcp-toolbox-sdk-go/blob/main/core/README.md

  </details>
  <details>
    <summary>LangChain Go</summary>

1. Install [Toolbox Go SDK][toolbox-go]:

    ```bash
    go get github.com/googleapis/mcp-toolbox-sdk-go
    ```

2. Load tools:

    ```go
    package main

    import (
      "context"
      "encoding/json"

      "github.com/googleapis/mcp-toolbox-sdk-go/core"
      "github.com/tmc/langchaingo/llms"
    )

    func main() {
      // Make sure to add the error checks
      // update the url to point to your server
      URL := "http://127.0.0.1:5000"
      ctx := context.Background()

      client, err := core.NewToolboxClient(URL)

      // Framework agnostic tool
      tool, err := client.LoadTool("toolName", ctx)

      // Fetch the tool's input schema
      inputschema, err := tool.InputSchema()

      var paramsSchema map[string]any
      _ = json.Unmarshal(inputschema, &paramsSchema)

      // Use this tool with LangChainGo
      langChainTool := llms.Tool{
        Type: "function",
        Function: &llms.FunctionDefinition{
          Name:        tool.Name(),
          Description: tool.Description(),
          Parameters:  paramsSchema,
        },
      }
    }

    ```

  </details>
  <details>
    <summary>Genkit</summary>

1. Install [Toolbox Go SDK][toolbox-go]:

    ```bash
    go get github.com/googleapis/mcp-toolbox-sdk-go
    ```

2. Load tools:

    ```go
    package main
    import (
      "context"
      "encoding/json"

      "github.com/firebase/genkit/go/ai"
      "github.com/firebase/genkit/go/genkit"
      "github.com/googleapis/mcp-toolbox-sdk-go/core"
      "github.com/invopop/jsonschema"
    )

    func main() {
      // Make sure to add the error checks
      // Update the url to point to your server
      URL := "http://127.0.0.1:5000"
      ctx := context.Background()
      g, err := genkit.Init(ctx)

      client, err := core.NewToolboxClient(URL)

      // Framework agnostic tool
      tool, err := client.LoadTool("toolName", ctx)

      // Fetch the tool's input schema
      inputschema, err := tool.InputSchema()

      var schema *jsonschema.Schema
      _ = json.Unmarshal(inputschema, &schema)

      executeFn := func(ctx *ai.ToolContext, input any) (string, error) {
        result, err := tool.Invoke(ctx, input.(map[string]any))
        if err != nil {
          // Propagate errors from the tool invocation.
          return "", err
        }

        return result.(string), nil
      }

      // Use this tool with Genkit Go
      genkitTool := genkit.DefineToolWithInputSchema(
        g,
        tool.Name(),
        tool.Description(),
        schema,
        executeFn,
      )
    }
    ```

  </details>
  <details>
    <summary>Go GenAI</summary>

1. Install [Toolbox Go SDK][toolbox-go]:

    ```bash
    go get github.com/googleapis/mcp-toolbox-sdk-go
    ```

2. Load tools:

    ```go
    package main

    import (
      "context"
      "encoding/json"

      "github.com/googleapis/mcp-toolbox-sdk-go/core"
      "google.golang.org/genai"
    )

    func main() {
      // Make sure to add the error checks
      // Update the url to point to your server
      URL := "http://127.0.0.1:5000"
      ctx := context.Background()

      client, err := core.NewToolboxClient(URL)

      // Framework agnostic tool
      tool, err := client.LoadTool("toolName", ctx)

      // Fetch the tool's input schema
      inputschema, err := tool.InputSchema()

      var schema *genai.Schema
      _ = json.Unmarshal(inputschema, &schema)

      funcDeclaration := &genai.FunctionDeclaration{
        Name:        tool.Name(),
        Description: tool.Description(),
        Parameters:  schema,
      }

      // Use this tool with Go GenAI
      genAITool := &genai.Tool{
        FunctionDeclarations: []*genai.FunctionDeclaration{funcDeclaration},
      }
    }
    ```

  </details>
  <details>
    <summary>OpenAI Go</summary>

1. Install [Toolbox Go SDK][toolbox-go]:

    ```bash
    go get github.com/googleapis/mcp-toolbox-sdk-go
    ```

2. Load tools:

    ```go
    package main

    import (
      "context"
      "encoding/json"

      "github.com/googleapis/mcp-toolbox-sdk-go/core"
      openai "github.com/openai/openai-go"
    )

    func main() {
      // Make sure to add the error checks
      // Update the url to point to your server
      URL := "http://127.0.0.1:5000"
      ctx := context.Background()

      client, err := core.NewToolboxClient(URL)

      // Framework agnostic tool
      tool, err := client.LoadTool("toolName", ctx)

      // Fetch the tool's input schema
      inputschema, err := tool.InputSchema()

      var paramsSchema openai.FunctionParameters
      _ = json.Unmarshal(inputschema, &paramsSchema)

      // Use this tool with OpenAI Go
      openAITool := openai.ChatCompletionToolParam{
        Function: openai.FunctionDefinitionParam{
          Name:        tool.Name(),
          Description: openai.String(tool.Description()),
          Parameters:  paramsSchema,
        },
      }

    }
    ```

  </details>
</details>
</blockquote>
</details>

## Configuration

The primary way to configure Toolbox is through the `tools.yaml` file. If you
have multiple files, you can tell toolbox which to load with the `--tools-file
tools.yaml` flag.

You can find more detailed reference documentation to all resource types in the
[Resources](https://googleapis.github.io/genai-toolbox/resources/).

### Sources

The `sources` section of your `tools.yaml` defines what data sources your
Toolbox should have access to. Most tools will have at least one source to
execute against.

```yaml
sources:
  my-pg-source:
    kind: postgres
    host: 127.0.0.1
    port: 5432
    database: toolbox_db
    user: toolbox_user
    password: my-password
```

For more details on configuring different types of sources, see the
[Sources](https://googleapis.github.io/genai-toolbox/resources/sources).

### Tools

The `tools` section of a `tools.yaml` define the actions an agent can take: what
kind of tool it is, which source(s) it affects, what parameters it uses, etc.

```yaml
tools:
  search-hotels-by-name:
    kind: postgres-sql
    source: my-pg-source
    description: Search for hotels based on name.
    parameters:
      - name: name
        type: string
        description: The name of the hotel.
    statement: SELECT * FROM hotels WHERE name ILIKE '%' || $1 || '%';
```

For more details on configuring different types of tools, see the
[Tools](https://googleapis.github.io/genai-toolbox/resources/tools).

### Toolsets

The `toolsets` section of your `tools.yaml` allows you to define groups of tools
that you want to be able to load together. This can be useful for defining
different groups based on agent or application.

```yaml
toolsets:
    my_first_toolset:
        - my_first_tool
        - my_second_tool
    my_second_toolset:
        - my_second_tool
        - my_third_tool
```

You can load toolsets by name:

```python
# This will load all tools
all_tools = client.load_toolset()

# This will only load the tools listed in 'my_second_toolset'
my_second_toolset = client.load_toolset("my_second_toolset")
```

## Versioning

This project uses [semantic versioning](https://semver.org/), including a
`MAJOR.MINOR.PATCH` version number that increments with:

- MAJOR version when we make incompatible API changes
- MINOR version when we add functionality in a backward compatible manner
- PATCH version when we make backward compatible bug fixes

The public API that this applies to is the CLI associated with Toolbox, the
interactions with official SDKs, and the definitions in the `tools.yaml` file.

## Contributing

Contributions are welcome. Please, see the [CONTRIBUTING](CONTRIBUTING.md)
to get started.

Please note that this project is released with a Contributor Code of Conduct.
By participating in this project you agree to abide by its terms. See
[Contributor Code of Conduct](CODE_OF_CONDUCT.md) for more information.

## Community

Join our [discord community](https://discord.gg/GQrFB3Ec3W) to connect with our developers!




================================================================
End of Codebase
================================================================
