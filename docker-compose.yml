version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: mcp-postgres
    environment:
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: mcp_password
      POSTGRES_DB: mcp_retriever
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d mcp_retriever"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: mcp-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__LOG_LEVEL: INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:latest
    container_name: mcp-redis
    command: redis-server --appendonly yes --requirepass mcp_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Auth Gateway
  auth-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-auth-gateway
    command: ["uv", "run", "python", "-m", "src.auth.server"]
    environment:
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      REDIS_URL: redis://:mcp_redis_password@redis:6379/0
      POSTGRES_DSN: postgresql://mcp_user:mcp_password@postgres:5432/mcp_retriever
      MCP_SERVER_URL: http://mcp-server:8001
      MCP_INTERNAL_API_KEY: ${MCP_INTERNAL_API_KEY:-your-internal-api-key-change-in-production}
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MCP Server (통합 서버 사용)
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-server
    command: ["uv", "run", "python", "-m", "src.server_unified"]
    environment:
      # 프로파일 설정 (BASIC, AUTH, CONTEXT, CACHED, COMPLETE)
      MCP_PROFILE: ${MCP_PROFILE:-COMPLETE}
      TAVILY_API_KEY: ${TAVILY_API_KEY}
      POSTGRES_DSN: postgresql://mcp_user:mcp_password@postgres:5432/mcp_retriever
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      REDIS_URL: redis://:mcp_redis_password@redis:6379/1
      MCP_INTERNAL_API_KEY: ${MCP_INTERNAL_API_KEY:-your-internal-api-key-change-in-production}
      AUTH_GATEWAY_URL: http://auth-gateway:8000
      MCP_TRANSPORT: http
      MCP_SERVER_PORT: 8001
      LOG_LEVEL: INFO
      # 개별 기능 오버라이드 (선택적)
      # MCP_ENABLE_AUTH: "true"
      # MCP_ENABLE_CACHE: "true"
      # MCP_ENABLE_RATE_LIMIT: "true"
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - auth-gateway
      - mcp-server
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  qdrant_data:
  redis_data: