services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: mcp-postgres
    environment:
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: mcp_password
      POSTGRES_DB: mcp_retriever
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d mcp_retriever"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: mcp-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    networks:
      - mcp-network
    # Temporarily disabled to avoid blocking other services
    # healthcheck:
    #   test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:6333/ || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:latest
    container_name: mcp-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Auth Gateway (Port 8000)
  auth-gateway:
    build:
      context: .
      dockerfile: docker/Dockerfile.auth
    container_name: mcp-auth-gateway
    environment:
      # JWT Configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      JWT_ALGORITHM: HS256
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: 7
      
      # Database Configuration - SQLite for Auth Gateway
      AUTH_DATABASE_URL: sqlite+aiosqlite:////data/auth.db
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      # Service URLs
      MCP_SERVER_URL: http://mcp-server:8001
      
      # Internal Authentication
      MCP_INTERNAL_API_KEY: ${MCP_INTERNAL_API_KEY:-your-internal-api-key-change-in-production}
      
      # Initial Admin Account
      AUTO_CREATE_ADMIN: ${AUTO_CREATE_ADMIN:-true}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@example.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-Admin123!}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-System Admin}
      
      # Logging
      LOG_LEVEL: DEBUG
    volumes:
      - auth_data:/data
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()\""]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # MCP Server (Port 8001) - HTTP Mode Only
  mcp-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
    container_name: mcp-server
    environment:
      # MCP Server Profile Configuration
      MCP_PROFILE: ${MCP_PROFILE:-AUTH}
      
      # Retriever API Keys
      TAVILY_API_KEY: ${TAVILY_API_KEY:-tvly-demo-key}
      
      # Database Configuration
      POSTGRES_DSN: postgresql://mcp_user:mcp_password@postgres:5432/mcp_retriever
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: mcp_password
      POSTGRES_DB: mcp_retriever
      
      # Vector Database Configuration
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      QDRANT_GRPC_PORT: 6334
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 1
      
      # Service URLs
      AUTH_GATEWAY_URL: http://auth-gateway:8000
      
      # Internal Authentication
      MCP_INTERNAL_API_KEY: ${MCP_INTERNAL_API_KEY:-your-internal-api-key-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-test-secret-key}
      
      # Authentication Policy
      MCP_REQUIRE_AUTH: "false"  # tools/list, health_check는 인증 없이 접근 허용
      
      # MCP Server Configuration
      MCP_TRANSPORT: http
      MCP_SERVER_PORT: 8001
      
      # Rate Limiting Configuration (fix validation error)
      RATE_LIMIT_PER_MINUTE: "60"
      RATE_LIMIT_PER_HOUR: "3600"
      RATE_LIMIT_BURST: "10"
      
      # Logging
      LOG_LEVEL: DEBUG
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      redis:
        condition: service_healthy
      auth-gateway:
        condition: service_healthy
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8001/health').read()\""]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  auth_data:
    driver: local

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16